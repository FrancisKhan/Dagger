#include "gtest/gtest.h"
#include "file_tools.h"
#include "network_tools.h"
#include "Library.h"
#include "additionalPrintFuncs.h"


class XSTestsJeff : public ::testing::Test 
{
 protected:
	static std::string* url_;
	static std::string* target_;
	static Library* library_;
	static std::vector<std::string>* nucVec_;
	static std::vector < std::shared_ptr<Nuclide> >* nuclides_;

  	static void SetUpTestSuite() 
	{
    	library_ = new Library;
		url_ = new std::string("https://www.polymtl.ca/merlin/downloads/libraries/ascii/draglibJeff3.3.gz");
    	target_ =  new std::string(File::getPrePath() + "draglibJeff3.3.gz");
		library_->downloadLibrary(*url_, *target_);
		library_->setXSLibraryPath(*target_);
		nucVec_ = new std::vector<std::string> {"U238"};
		nuclides_ = new std::vector < std::shared_ptr<Nuclide> > {library_->readNuclides(*nucVec_)};
  	}

	static void TearDownTestSuite() 
	{
    	delete library_;
		delete url_;
		delete target_;
		delete nucVec_;
		delete nuclides_;
    	library_ = nullptr;
		url_ = nullptr;
		target_ = nullptr;
		nucVec_ = nullptr;
		nuclides_ = nullptr;
  	}

	virtual void SetUp() {}
  	virtual void TearDown() {}
};

Library* XSTestsJeff::library_ = nullptr;
std::string* XSTestsJeff::url_ = nullptr;
std::string* XSTestsJeff::target_ = nullptr;
std::vector<std::string>* XSTestsJeff::nucVec_ = nullptr;
std::vector < std::shared_ptr<Nuclide> >* XSTestsJeff::nuclides_ = nullptr;

TEST_F(XSTestsJeff, GetNuclides)
{	
    size_t numberOfNuclides = library_->getNumberOfNuclidesRead();
    EXPECT_EQ(numberOfNuclides, 1);
}

TEST_F(XSTestsJeff, GetLibraryNuclides)
{	
    std::vector<std::string> nuclideVec = library_->getLibraryNuclides();

	std::vector<std::string> refVec {"Ag107", "Ag109", "Ag111", "Al27", 
    "Am241", "Am242", "Am242m", "Am243", "As75", "Au197", "B10", "B11", 
    "Ba134", "Ba135", "Ba136", "Ba137", "Ba138", "Ba140", "Be9", "Bi209", 
    "Bk249", "Br79", "Br81", "C0", "C0_GR", "Ca40", "Ca42", "Ca43", "Ca44", 
    "Ca46", "Ca48", "Cd106", "Cd108", "Cd110", "Cd111", "Cd112", "Cd113", 
    "Cd114", "Cd115m", "Cd116", "Ce140", "Ce141", "Ce142", "Ce143", "Ce144", 
    "Cf249", "Cf250", "Cf251", "Cf252", "Cf253", "Cl35", "Cl37", "Cm241", 
    "Cm242", "Cm243", "Cm244", "Cm245", "Cm246", "Cm247", "Cm248", "Co59", 
    "Cr50", "Cr51", "Cr52", "Cr53", "Cr54", "Cs133", "Cs134", "Cs135", 
    "Cs136", "Cs137", "Cu63", "Cu65", "DEPL-CHAIN", "Dy160", "Dy161", 
    "Dy162", "Dy163", "Dy164", "Dy165", "Er166", "Er167", "Er168", 
    "Er170", "Eu151", "Eu152", "Eu153", "Eu154", "Eu155","Eu156", "Eu157", 
    "F19", "Fe54", "Fe56", "Fe57", "Fe58", "Ga69", "Ga71", "Gd152", 
    "Gd154", "Gd155", "Gd156", "Gd157", "Gd158", "Gd160", "Ge72", "Ge73", 
    "Ge74", "Ge76", "H1", "H1_CH2", "H1_H2O", "H1_ZRH", "H2", "H2_D2O", 
    "H3", "He3", "He4", "Hf174", "Hf176", "Hf177", "Hf178", "Hf179", 
    "Hf180", "Ho165", "I127", "I129", "I130", "I131", "I135", "In113", 
    "In115", "K39", "K40", "K41", "Kr80", "Kr82", "Kr83", "Kr84", 
    "Kr85", "Kr86", "La138", "La139", "La140", "Li6", "Li7", "Lu176", 
    "Mg24", "Mg25", "Mg26", "Mn55", "Mo100", "Mo92", "Mo94", "Mo95", 
    "Mo96", "Mo97", "Mo98", "Mo99", "N14", "N15", "Na23", "Nb93", 
    "Nb94", "Nb95", "Nd142", "Nd143", "Nd144", "Nd145", "Nd146", "Nd147", 
    "Nd148", "Nd150", "Ni58", "Ni60", "Ni61", "Ni62", "Ni64", "Np236", 
    "Np237", "Np238", "Np239", "O16", "O17", "P31", "Pa231", "Pa233", 
    "Pb204", "Pb206", "Pb207", "Pb208", "Pd104", "Pd105", "Pd106", 
    "Pd107", "Pd108", "Pm147", "Pm148", "Pm148m", "Pm149", "Pm151", 
    "Pr141", "Pr142", "Pr143", "Pu236", "Pu237", "Pu238", "Pu239", 
    "Pu240", "Pu241", "Pu242", "Pu243", "Pu244", "Rb85", "Rb87", "Re187", 
    "Rh103", "Rh105", "Ru100", "Ru101", "Ru102", "Ru103", "Ru104", "Ru105", 
    "Ru106", "Ru99", "S32", "S33", "S34", "S36", "Sb121", "Sb123", 
    "Sb124", "Sb125", "Sb126", "Se76", "Se77", "Se78", "Se79", "Se80", 
    "Se82", "Si28", "Si29", "Si30", "Sm147", "Sm148", "Sm149", "Sm150", 
    "Sm151", "Sm152", "Sm153", "Sm154", "Sn112", "Sn114", "Sn115", 
    "Sn116", "Sn117", "Sn118", "Sn119", "Sn120", "Sn122", "Sn123", "Sn124", 
    "Sn125", "Sn126", "Sr86", "Sr87", "Sr88", "Sr89", "Sr90", "Ta181", 
    "Tb159", "Tb160", "Tc99", "Te122", "Te123", "Te124", "Te125", 
    "Te126", "Te127m", "Te128", "Te129m", "Te130", "Te131m", "Te132", 
    "Th230", "Th232", "Th233", "Ti46", "Ti47", "Ti48", "Ti49", "Ti50", 
    "U232", "U233", "U234", "U235", "U236", "U237", "U238", "V48", "V49", 
    "V50", "V51", "W182", "W183", "W184", "W186", "Xe128", "Xe129", "Xe130", 
    "Xe131", "Xe132", "Xe133", "Xe134", "Xe135", "Xe136", "Y89", "Y90", 
    "Y91", "Zn64", "Zn66", "Zn67", "Zn68", "Zn70", "Zr90", "Zr91", "Zr92", 
    "Zr93", "Zr94", "Zr95", "Zr96"};

    bool areEqual = std::equal(refVec.begin(), refVec.end(), nuclideVec.begin());
    EXPECT_TRUE(areEqual);
}


TEST_F(XSTestsJeff, GetTotalCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("U238")->getXSSet(XSKind::NTOT0).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTestsJeff, GetTotalCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("U238")->getXSSet(XSKind::NTOT0).getXSNoInterp(5.50000000e+02, 2.11442700E+03).getValues();

	std::vector<double> ref {6.169363980000e+00, 6.003170010000e+00, 5.881499770000e+00, 
	5.768145080000e+00, 5.790030000000e+00, 6.063210010000e+00, 6.549205780000e+00, 6.943696980000e+00, 
	7.246772770000e+00, 7.642363070000e+00, 7.932824130000e+00, 7.963366030000e+00, 7.810211180000e+00, 
	7.624042030000e+00, 7.479804040000e+00, 7.267786980000e+00, 7.045404910000e+00, 6.962479110000e+00, 
	6.969850060000e+00, 7.028693200000e+00, 7.136888980000e+00, 7.292516230000e+00, 7.697721000000e+00, 
	8.135500910000e+00, 8.366161350000e+00, 8.603463170000e+00, 8.847351070000e+00, 9.362161640000e+00, 
	9.857310300000e+00, 1.008460040000e+01, 1.052130030000e+01, 1.123999020000e+01, 1.169627959986e+01, 
	1.202783030018e+01, 1.243334030014e+01, 1.272918959989e+01, 1.306535969968e+01, 1.332324989915e+01, 
	1.354148000145e+01, 1.373980000071e+01, 1.384683009994e+01, 1.448203949904e+01, 1.497178989822e+01, 
	1.528785029859e+01, 1.491408050043e+01, 1.571450999932e+01, 1.652686929115e+01, 1.441281999815e+01, 
	1.806467920630e+01, 2.299973022389e+01, 2.147740990542e+01, 2.112390049852e+01, 2.520450976653e+01, 
	1.572189040630e+01, 2.088826912095e+01, 2.111688909913e+01, 3.835056140440e+01, 1.799757049183e+01, 
	1.707451950442e+01, 2.155832935428e+01, 1.624408970087e+01, 2.323004898743e+01, 3.198737076856e+01, 
	4.568779886955e+01, 1.371880969984e+01, 6.163995969492e+01, 1.641544080804e+01, 1.449808969985e+01, 
	7.484813775626e+01, 1.112313030004e+01, 1.213799000009e+01, 1.319657040005e+01, 1.660032040018e+01, 
	4.671954091916e+01, 3.933893285033e+02, 6.401286199891e+00, 8.524664710135e+00, 1.031454989995e+01, 
	1.382604009993e+01, 2.806917254176e+02, 7.170814779960e+00, 8.272231150120e+00, 9.054769360006e+00, 
	1.019500040008e+01, 1.023052980012e+01, 1.111600020004e+01, 1.384545989997e+01, 3.308330758182e+02, 
	1.150826010179e+01, 9.273536310088e+00, 9.154528739931e+00, 9.028751330204e+00, 9.068170450161e+00, 
	9.113426159983e+00, 9.161784029832e+00, 9.207346920000e+00, 9.221444130000e+00, 9.235772130000e+00, 
	9.256585120000e+00, 9.293897630000e+00, 9.317162510000e+00, 9.327418330000e+00, 9.343441960000e+00, 
	9.360826490000e+00, 9.378212930000e+00, 9.395546910000e+00, 9.412740710000e+00, 9.431171420000e+00, 
	9.443745610000e+00, 9.450697900000e+00, 9.463004110000e+00, 9.475057600000e+00, 9.483783720000e+00, 
	9.496584890000e+00, 9.513732910000e+00, 9.525073050000e+00, 9.531450270000e+00, 9.536949160000e+00, 
	9.540661810000e+00, 9.546289440000e+00, 9.553977010000e+00, 9.559414860000e+00, 9.563220980000e+00, 
	9.569174770000e+00, 9.574504850000e+00, 9.578399660000e+00, 9.584256170000e+00, 9.591116910000e+00, 
	9.598020550000e+00, 9.610305790000e+00, 9.621101380000e+00, 9.634529110000e+00, 9.648221970000e+00, 
	9.666440960000e+00, 9.702377320000e+00, 9.746530530000e+00, 9.783995630000e+00, 9.802618980000e+00, 
	9.828001980000e+00, 9.862856860000e+00, 9.881646160000e+00, 9.907108310000e+00, 9.946329120000e+00, 
	9.967839240000e+00, 9.981049540000e+00, 1.000531390000e+01, 1.004641440000e+01, 1.010084920000e+01, 
	1.016767020000e+01, 1.021666620000e+01, 1.026289840000e+01, 1.033259300000e+01, 1.038038730000e+01, 
	1.044313240000e+01, 1.053596690000e+01, 1.059835240000e+01, 1.068100740000e+01, 1.075742440000e+01, 
	1.082897850000e+01, 1.094736860000e+01, 1.107897760000e+01, 1.123595050000e+01, 1.142445370000e+01, 
	1.161928460000e+01, 1.183067510000e+01, 1.210960670000e+01, 1.250237460000e+01, 1.311407180000e+01, 
	1.396833420000e+01, 1.489861680000e+01, 1.618000410000e+01, 2.028342060000e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTestsJeff, GetCrossSectionMatrixL0Resonant)
{	
    Eigen::MatrixXd mat = library_->getNuclide("U238")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrixNoInterp(9.00000000E+02, 2.11442700E+03).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {1.714953330000e-01, 1.256501530000e-01, 2.329198270000e-01, 
	1.679651740000e-01, 1.991391030000e-01, 1.790210010000e-01, 1.261545720000e-01, 1.775998920000e-01, 
	2.346422080000e-01, 1.746069040000e-01, 1.778437200000e-01, 1.772453780000e-01, 1.612012090000e-01, 
	3.447941540000e-01, 4.132089610000e-01, 2.934761050000e-01, 3.570864200000e-01, 7.522078160000e-01, 
	8.465766910000e-01, 9.551082850000e-01, 1.039344190000e+00, 1.406332020000e+00, 5.689839720000e-01, 
	1.572796820000e+00, 1.637369630000e+00, 1.591901780000e+00, 1.761971000000e+00, 5.319082140000e-01, 
	8.712260130000e-01, 1.689584140000e+00, 9.433490040000e-01, 3.477959930000e-01, 8.395215839568e-01, 
	3.044768959946e-01, 4.799215010089e-01, 5.004929742535e-01, 3.501241020033e-01, 1.062718990030e+00, 
	4.680335100081e-01, 1.650427960578e+00, 1.111939162674e+00, 3.048227090128e-01, 1.331705050095e+00, 
	3.933266069353e-01, 6.472386250543e-01, 5.266508080927e-01, 3.856091099617e-01, 1.301884970014e+00, 
	3.940256001263e-01, 2.750636100236e+00, 5.653172779650e-01, 1.245792999722e+00, 6.990754282380e-01, 
	2.035548980117e+00, 2.189010015344e+00, 6.056786161327e-01, 8.165425114713e-01, 4.599507899263e-01, 
	1.004461980005e+00, 2.382278508157e-01, 5.283170130282e-01, 5.261066109955e-01, 2.201680991427e-01, 
	2.962322146673e-01, 1.223034060132e+00, 1.746485756605e-01, 5.098957030390e-01, 1.496676980034e+00, 
	4.474387457571e-01, 1.290819980018e+00, 1.573147009989e+00, 1.956572624577e+00, 1.345167020064e+00, 
	1.035614040354e+01, 2.670838112045e-01, 5.931086536555e-01, 7.546890496862e-01, 9.090791380722e-01, 
	1.289159020083e+00, 1.664857943539e-01, 3.130514686281e-01, 4.680779040030e-01, 3.832071090072e-01, 
	6.451698160059e-01, 1.115158000046e+00, 8.981010957394e-01, 1.049905939899e+00, 1.998044916836e-01, 
	4.270338889411e-01, 1.093592030067e+00, 3.475806120125e-01, 2.202229258049e+00, 4.945990899863e-01, 
	3.445734969981e+00, 3.940769019977e-01, 3.691544060000e+00, 1.521695020000e+00, 3.862401010000e+00, 
	1.571372030000e+00, 5.960670110000e-01, 3.608184100000e+00, 2.589158060000e+00, 2.364090920000e+00, 
	2.269011020000e+00, 2.311465020000e+00, 2.239793060000e+00, 2.368463990000e+00, 1.104261990000e+00, 
	2.447671890000e+00, 3.261549000000e+00, 1.570878980000e+00, 2.430584910000e+00, 3.085074900000e+00, 
	2.314646010000e+00, 1.158069970000e+00, 2.256124970000e+00, 1.172628050000e+00, 1.350100990000e+00, 
	2.386495110000e+00, 2.093683960000e+00, 9.624384050000e-01, 1.614667060000e+00, 2.251632930000e+00, 
	9.930434820000e-01, 1.550125960000e+00, 2.152000900000e+00, 1.840703010000e+00, 1.894518970000e+00, 
	3.339015960000e+00, 7.758435010000e-01, 4.081398010000e+00, 7.028344270000e-01, 4.281672000000e+00, 
	1.814278010000e+00, 1.637771960000e+00, 1.266360040000e+00, 1.281605010000e+00, 3.582802060000e+00, 
	1.628558040000e+00, 9.642261860000e-01, 3.728686090000e+00, 1.756539940000e+00, 6.832870240000e-01, 
	2.459539890000e+00, 2.466727970000e+00, 2.623469110000e+00, 1.863749030000e+00, 2.045268060000e+00, 
	1.075942990000e+00, 2.968671080000e+00, 2.223947050000e+00, 1.075914030000e+00, 3.232173920000e+00, 
	1.924183960000e+00, 1.088912960000e+00, 3.085266110000e+00, 7.262828950000e-01, 2.866947890000e+00, 
	1.952267050000e+00, 1.914412020000e+00, 2.007472040000e+00, 1.858636980000e+00, 1.629487040000e+00, 
	1.891253950000e+00, 1.895133020000e+00, 1.873741030000e+00, 1.800083040000e+00, 1.343346950000e+00, 
	1.302953960000e+00, 1.682502030000e+00, 1.608219030000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}