#include "gtest/gtest.h"
#include "file_tools.h"
#include "network_tools.h"
#include "Library.h"
#include "additionalPrintFuncs.h"


class XSMatrixTests : public ::testing::Test 
{
 protected:
	static std::string* url_;
	static std::string* target_;
	static Library* library_;
	static std::vector<std::string>* nucVec_;
	static std::vector < std::shared_ptr<Nuclide> >* nuclides_;

  	static void SetUpTestSuite() 
	{
    	library_ = new Library;
		url_ = new std::string("http://merlin.polymtl.ca/downloads/libraries/ascii/draglibendfb7r0.gz");
    	target_ =  new std::string(File::getPrePath() + "draglibendfb7r0.gz");
		library_->downloadLibrary(*url_, *target_);
		library_->setXSLibraryPath(*target_);
		nucVec_ = new std::vector<std::string> {"Pu239", "H1_H2O"};
		nuclides_ = new std::vector < std::shared_ptr<Nuclide> > {library_->readNuclides(*nucVec_)};
  	}

	static void TearDownTestSuite() 
	{
    	delete library_;
		delete url_;
		delete target_;
		delete nucVec_;
		delete nuclides_;
    	library_ = nullptr;
		url_ = nullptr;
		target_ = nullptr;
		nucVec_ = nullptr;
		nuclides_ = nullptr;
  	}

	virtual void SetUp() {}
  	virtual void TearDown() {}
};

Library* XSMatrixTests::library_ = nullptr;
std::string* XSMatrixTests::url_ = nullptr;
std::string* XSMatrixTests::target_ = nullptr;
std::vector<std::string>* XSMatrixTests::nucVec_ = nullptr;
std::vector < std::shared_ptr<Nuclide> >* XSMatrixTests::nuclides_ = nullptr;

TEST_F(XSMatrixTests, GetCrossSectionMatrixSetL0NonResonant)
{	
    size_t size = library_->getNuclide("H1_H2O")->getXSMatrixSet(XSMatrixKind::SCAT00).getSize();	
    EXPECT_EQ(size, 6);
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixSetL1NonResonant)
{	
    size_t size = library_->getNuclide("H1_H2O")->getXSMatrixSet(XSMatrixKind::SCAT01).getSize();	
    EXPECT_EQ(size, 6);
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixSetL2NonResonant)
{	
    size_t size = library_->getNuclide("H1_H2O")->getXSMatrixSet(XSMatrixKind::SCAT02).getSize();	
    EXPECT_EQ(size, 6);
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixSetL3NonResonant)
{	
    size_t size = library_->getNuclide("H1_H2O")->getXSMatrixSet(XSMatrixKind::SCAT03).getSize();	
    EXPECT_EQ(size, 6);
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixSetL0Resonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getSize();	
    EXPECT_EQ(size, 95);
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixSetL1Resonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getSize();	
    EXPECT_EQ(size, 95);
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixL0NonResonant)
{	
    Eigen::MatrixXd mat = library_->getNuclide("H1_H2O")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrixNoInterp(5.00000000E+02, Numerics::DINF).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {6.883744900000e-02, 4.055498910000e-02, 1.013163030000e-01, 
	9.724315260000e-02, 1.468839050000e-01, 1.694681050000e-01, 1.044330000000e-01, 1.210964990000e-01, 
	2.497445940000e-01, 2.691532970000e-01, 3.088020980000e-01, 3.517333870000e-01, 2.088197020000e-01, 
	2.389791010000e-01, 4.829565880000e-01, 5.019624230000e-01, 2.942464950000e-01, 3.355380000000e-01, 
	3.541243970000e-01, 3.738617900000e-01, 3.937926890000e-01, 1.131834030000e+00, 4.220669870000e-01, 
	5.145782830000e-01, 5.423709750000e-01, 5.721907020000e-01, 1.642192010000e+00, 6.095988750000e-01, 
	7.393177750000e-01, 2.127753020000e+00, 2.694916010000e+00, 8.653280140000e-01, 2.991733070000e+00, 
	2.033988000000e+00, 2.305538890000e+00, 3.483594890000e+00, 1.296676990000e+00, 3.247550960000e+00, 
	9.743509890000e-01, 1.596794960000e+00, 5.506048200000e+00, 1.419201970000e+00, 4.571987150000e+00, 
	2.953299050000e+00, 3.150810000000e+00, 4.555425170000e+00, 1.612604020000e+00, 5.551917080000e+00, 
	8.185305000000e-01, 6.426856040000e+00, 1.574717040000e+00, 4.970698830000e+00, 8.513321280000e-01, 
	2.750081060000e+00, 3.410284040000e+00, 1.749835970000e+00, 3.503191950000e+00, 1.753152010000e+00, 
	6.381822110000e+00, 3.042315010000e+00, 3.348673110000e+00, 6.093376160000e+00, 4.564762120000e+00, 
	1.399132010000e+00, 6.459274770000e+00, 2.936254980000e+00, 1.908854010000e+00, 3.510272030000e+00, 
	1.338294030000e+00, 1.269850970000e+00, 1.120376940000e+00, 2.332988020000e+00, 1.388404970000e+00, 
	1.874202970000e+00, 1.851387980000e+00, 1.851552010000e+00, 1.851724030000e+00, 1.851899030000e+00, 
	2.710944890000e+00, 3.443108080000e+00, 2.582899090000e+00, 3.444736000000e+00, 2.180059910000e+00, 
	1.390841960000e+00, 1.877758030000e+00, 1.855164050000e+00, 3.534724950000e+00, 2.454298020000e+00, 
	1.083757040000e+00, 3.613332030000e+00, 5.825092200000e-01, 3.130494120000e+00, 4.670931990000e-01, 
	3.377502920000e+00, 3.440298140000e-01, 1.104313020000e+00, 4.746120870000e-01, 1.753255960000e+00, 
	2.030280110000e+00, 3.203321100000e-01, 1.019919040000e+00, 1.093894960000e+00, 1.129030940000e+00, 
	1.121286990000e+00, 1.180147050000e+00, 1.170711990000e+00, 1.376531960000e+00, 4.315727060000e-01, 
	6.759383080000e-01, 1.283457990000e+00, 6.171507840000e-01, 7.755128150000e-01, 1.312780020000e+00, 
	1.328408000000e+00, 4.620741010000e-01, 7.101570960000e-01, 3.707804980000e-01, 4.390471880000e-01, 
	7.721205950000e-01, 7.084571120000e-01, 3.207153980000e-01, 5.479075910000e-01, 7.576804760000e-01, 
	3.383274080000e-01, 5.445790890000e-01, 7.488527890000e-01, 6.535820960000e-01, 6.769745950000e-01, 
	1.531851050000e+00, 3.372462990000e-01, 2.042181020000e+00, 3.571211100000e-01, 2.703464030000e+00, 
	2.727325920000e+00, 3.209131960000e+00, 1.795128940000e+00, 8.516064880000e-01, 3.009614940000e+00, 
	1.953310970000e+00, 6.940763000000e-01, 3.164061070000e+00, 2.239815950000e+00, 5.641934280000e-01, 
	1.887099980000e+00, 2.154339080000e+00, 3.217237000000e+00, 2.993918900000e+00, 3.730993990000e+00, 
	1.468104960000e+00, 3.839663980000e+00, 3.727631090000e+00, 1.544978020000e+00, 5.099802970000e+00, 
	3.936886070000e+00, 1.885483980000e+00, 5.916197780000e+00, 1.421121000000e+00, 5.580854890000e+00, 
	4.663660050000e+00, 4.846532820000e+00, 5.532897000000e+00, 5.599832060000e+00, 4.998246190000e+00, 
	6.009489060000e+00, 6.709751130000e+00, 7.575026990000e+00, 8.632983210000e+00, 6.979266170000e+00, 
	6.306743140000e+00, 8.376496320000e+00, 1.071757030000e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixL1NonResonant)
{	
    Eigen::MatrixXd mat = library_->getNuclide("H1_H2O")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrixNoInterp(5.00000000E+02, Numerics::DINF).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {6.489767130000e-02, 3.876321020000e-02, 9.556920080000e-02, 
	9.081669150000e-02, 1.358737050000e-01, 1.553968940000e-01, 9.785878660000e-02, 1.154944000000e-01, 
	2.326238010000e-01, 2.456603050000e-01, 2.815468010000e-01, 3.204008940000e-01, 1.945832070000e-01, 
	2.276414040000e-01, 4.493596850000e-01, 4.564000960000e-01, 2.737650870000e-01, 3.195126060000e-01, 
	3.372046050000e-01, 3.559769990000e-01, 3.749485020000e-01, 1.029392000000e+00, 3.846805990000e-01, 
	4.901266100000e-01, 5.165830250000e-01, 5.450015070000e-01, 1.494078040000e+00, 5.555511710000e-01, 
	7.041962150000e-01, 1.935871010000e+00, 2.295732980000e+00, 7.726190090000e-01, 2.721762900000e+00, 
	1.809569950000e+00, 2.096081970000e+00, 3.096779110000e+00, 1.180439950000e+00, 2.998399020000e+00, 
	9.071367980000e-01, 1.532878040000e+00, 4.902916910000e+00, 1.264572020000e+00, 4.158977990000e+00, 
	2.624994040000e+00, 2.863401890000e+00, 4.048200130000e+00, 1.467093940000e+00, 4.995993140000e+00, 
	7.456237080000e-01, 5.792205810000e+00, 1.402308940000e+00, 4.521532060000e+00, 7.838571070000e-01, 
	2.619478940000e+00, 3.135011910000e+00, 1.627753970000e+00, 3.258752110000e+00, 1.630833980000e+00, 
	5.682460780000e+00, 2.646286960000e+00, 3.042926070000e+00, 5.300074100000e+00, 3.868566040000e+00, 
	1.273177030000e+00, 5.774487970000e+00, 2.558875080000e+00, 1.775517940000e+00, 3.258836030000e+00, 
	1.252423050000e+00, 1.226343990000e+00, 1.086379050000e+00, 2.230770110000e+00, 1.322211030000e+00, 
	1.795501950000e+00, 1.763005970000e+00, 1.763162020000e+00, 1.763326050000e+00, 1.763492940000e+00, 
	2.551148890000e+00, 3.165163990000e+00, 2.374397990000e+00, 3.166661020000e+00, 2.015911100000e+00, 
	1.324534060000e+00, 1.798908000000e+00, 1.766602990000e+00, 3.288079980000e+00, 2.260601040000e+00, 
	1.032209040000e+00, 3.395196910000e+00, 5.509179830000e-01, 2.982491970000e+00, 4.316520990000e-01, 
	3.104358910000e+00, 3.159787060000e-01, 1.050454020000e+00, 4.507187900000e-01, 1.644541030000e+00, 
	1.849128960000e+00, 2.973352970000e-01, 9.656671290000e-01, 1.021662000000e+00, 1.049039010000e+00, 
	1.039018990000e+00, 1.090407010000e+00, 1.078403000000e+00, 1.260686990000e+00, 3.994551000000e-01, 
	6.331264970000e-01, 1.184175010000e+00, 5.679115060000e-01, 7.187880280000e-01, 1.200641990000e+00, 
	1.199517010000e+00, 4.222078030000e-01, 6.571655870000e-01, 3.444632890000e-01, 4.121862050000e-01, 
	7.163565750000e-01, 6.494324210000e-01, 2.974832950000e-01, 5.122073890000e-01, 6.983166930000e-01, 
	3.127985000000e-01, 5.079330800000e-01, 6.892431970000e-01, 5.968534950000e-01, 6.176586750000e-01, 
	1.366598960000e+00, 3.022925850000e-01, 1.811092970000e+00, 3.153370920000e-01, 2.347152950000e+00, 
	2.230747940000e+00, 2.533950090000e+00, 1.414273980000e+00, 7.004591230000e-01, 2.405098920000e+00, 
	1.490949030000e+00, 5.562676190000e-01, 2.454881910000e+00, 1.617429020000e+00, 4.358280000000e-01, 
	1.518295050000e+00, 1.604060050000e+00, 2.196074010000e+00, 1.901736020000e+00, 2.220860960000e+00, 
	9.266765120000e-01, 2.433495040000e+00, 2.080807920000e+00, 9.429286720000e-01, 2.930336950000e+00, 
	1.931980970000e+00, 1.053738000000e+00, 3.088360070000e+00, 7.539879080000e-01, 3.020394090000e+00, 
	2.115374090000e+00, 2.135407920000e+00, 2.304400920000e+00, 2.191863060000e+00, 1.970873950000e+00, 
	2.330033060000e+00, 2.351171020000e+00, 2.312143090000e+00, 2.152879000000e+00, 1.566761020000e+00, 
	1.544770000000e+00, 1.962419990000e+00, 1.698181990000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixL2NonResonant)
{	
    Eigen::MatrixXd mat = library_->getNuclide("H1_H2O")->getXSMatrixSet(XSMatrixKind::SCAT02).getXSMatrixNoInterp(5.00000000E+02, Numerics::DINF).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {5.742473160000e-02, 3.532680120000e-02, 8.466509730000e-02, 
	7.872983810000e-02, 1.153284010000e-01, 1.293434950000e-01, 8.546549830000e-02, 1.047471990000e-01, 
	2.004785980000e-01, 2.022978070000e-01, 2.312747990000e-01, 2.626420860000e-01, 1.678453980000e-01, 
	2.059078960000e-01, 3.863210980000e-01, 3.725081980000e-01, 2.353359010000e-01, 2.887994950000e-01, 
	3.047777120000e-01, 3.217019140000e-01, 3.388352990000e-01, 8.413115740000e-01, 3.159514960000e-01, 
	4.432567060000e-01, 4.671527150000e-01, 4.928844870000e-01, 1.222090960000e+00, 4.561955030000e-01, 
	6.368734840000e-01, 1.583508970000e+00, 1.601079940000e+00, 6.056641940000e-01, 2.226025100000e+00, 
	1.404332040000e+00, 1.710443020000e+00, 2.398650880000e+00, 9.669064880000e-01, 2.534306050000e+00, 
	7.812039850000e-01, 1.409543040000e+00, 3.818542960000e+00, 9.864494200000e-01, 3.400625940000e+00, 
	2.032511950000e+00, 2.334378000000e+00, 3.132941960000e+00, 1.199893950000e+00, 3.986005070000e+00, 
	6.121646170000e-01, 4.642941000000e+00, 1.092321990000e+00, 3.696800950000e+00, 6.589919920000e-01, 
	2.369520900000e+00, 2.623395920000e+00, 1.398720030000e+00, 2.800168040000e+00, 1.401357050000e+00, 
	4.425111770000e+00, 1.945721980000e+00, 2.480180030000e+00, 3.896758080000e+00, 2.661705970000e+00, 
	1.042111990000e+00, 4.540266990000e+00, 1.890362980000e+00, 1.525305990000e+00, 2.787844900000e+00, 
	1.090608950000e+00, 1.141939040000e+00, 1.020190000000e+00, 2.034315110000e+00, 1.195391060000e+00, 
	1.643895030000e+00, 1.593618040000e+00, 1.593758940000e+00, 1.593907000000e+00, 1.594058040000e+00, 
	2.248115060000e+00, 2.648585080000e+00, 1.986883040000e+00, 2.649840120000e+00, 1.709375980000e+00, 
	1.197492960000e+00, 1.647014980000e+00, 1.596871970000e+00, 2.825360060000e+00, 1.900024060000e+00, 
	9.335107210000e-01, 2.982980970000e+00, 4.909692110000e-01, 2.699573040000e+00, 3.666614890000e-01, 
	2.607275010000e+00, 2.650215030000e-01, 9.493482110000e-01, 4.059545100000e-01, 1.443240050000e+00, 
	1.522397990000e+00, 2.553246020000e-01, 8.649523850000e-01, 8.890966180000e-01, 9.030323030000e-01, 
	8.894112710000e-01, 9.277920130000e-01, 9.118500950000e-01, 1.053087950000e+00, 3.415628970000e-01, 
	5.553364160000e-01, 1.006144050000e+00, 4.799130860000e-01, 6.170759800000e-01, 1.001896980000e+00, 
	9.739711880000e-01, 3.520385030000e-01, 5.632650260000e-01, 2.977904980000e-01, 3.642486930000e-01, 
	6.178399920000e-01, 5.460023280000e-01, 2.565797870000e-01, 4.490149920000e-01, 5.944569110000e-01, 
	2.680411930000e-01, 4.434008000000e-01, 5.853204730000e-01, 4.985862080000e-01, 5.154523850000e-01, 
	1.086809040000e+00, 2.431910930000e-01, 1.425366040000e+00, 2.460640070000e-01, 1.767223000000e+00, 
	1.465482000000e+00, 1.538359050000e+00, 8.624116780000e-01, 4.770500960000e-01, 1.542896030000e+00, 
	8.634809260000e-01, 3.659895960000e-01, 1.515228990000e+00, 8.490782980000e-01, 2.737593950000e-01, 
	1.044180990000e+00, 9.430363180000e-01, 1.074728010000e+00, 8.052434920000e-01, 8.412641290000e-01, 
	4.362784030000e-01, 1.193354010000e+00, 8.005855080000e-01, 4.648694100000e-01, 1.329293010000e+00, 
	6.499325040000e-01, 4.913814070000e-01, 1.315160990000e+00, 3.421317930000e-01, 1.440196990000e+00, 
	7.457516190000e-01, 7.382631900000e-01, 7.380623820000e-01, 6.420704130000e-01, 6.183050270000e-01, 
	7.443885210000e-01, 6.443386080000e-01, 5.005297060000e-01, 2.994430070000e-01, 2.159259020000e-01, 
	3.773635030000e-01, 5.339012150000e-01, 3.447180090000e-01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixL3NonResonant)
{	
    Eigen::MatrixXd mat = library_->getNuclide("H1_H2O")->getXSMatrixSet(XSMatrixKind::SCAT03).getXSMatrixNoInterp(5.00000000E+02, Numerics::DINF).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {4.717973990000e-02, 3.052468040000e-02, 6.970927120000e-02, 
	6.240085140000e-02, 8.795432750000e-02, 9.510169920000e-02, 6.865470110000e-02, 8.972281220000e-02, 
	1.571857040000e-01, 1.456252040000e-01, 1.656540930000e-01, 1.873272060000e-01, 1.318154040000e-01, 
	1.755664940000e-01, 3.015193940000e-01, 2.633483110000e-01, 1.836404060000e-01, 2.459374070000e-01, 
	2.595250010000e-01, 2.738732100000e-01, 2.884423140000e-01, 5.977874990000e-01, 2.267519980000e-01, 
	3.778289850000e-01, 3.981530070000e-01, 4.201320110000e-01, 8.698028920000e-01, 3.272542950000e-01, 
	5.428935290000e-01, 1.127107980000e+00, 7.854257820000e-01, 3.967905040000e-01, 1.583956000000e+00, 
	8.950874810000e-01, 1.208708050000e+00, 1.522166970000e+00, 6.901329160000e-01, 1.917899010000e+00, 
	6.122097970000e-01, 1.235402940000e+00, 2.466047050000e+00, 6.392961140000e-01, 2.418530940000e+00, 
	1.288766030000e+00, 1.646407960000e+00, 1.984292980000e+00, 8.538153170000e-01, 2.702500100000e+00, 
	4.402407110000e-01, 3.190666910000e+00, 7.056564090000e-01, 2.628777980000e+00, 4.950234000000e-01, 
	2.021497010000e+00, 1.946560030000e+00, 1.090685960000e+00, 2.183413030000e+00, 1.092728020000e+00, 
	2.856949090000e+00, 1.097617980000e+00, 1.748432040000e+00, 2.197945120000e+00, 1.254891990000e+00, 
	7.433406110000e-01, 2.993935110000e+00, 1.078966980000e+00, 1.188642980000e+00, 2.156094070000e+00, 
	8.712862130000e-01, 1.021657940000e+00, 9.253007170000e-01, 1.758820060000e+00, 1.018504020000e+00, 
	1.430449960000e+00, 1.357220050000e+00, 1.357339980000e+00, 1.357465980000e+00, 1.357594970000e+00, 
	1.832857010000e+00, 1.965188030000e+00, 1.474228020000e+00, 1.966122030000e+00, 1.300444010000e+00, 
	1.020298960000e+00, 1.433166980000e+00, 1.359995010000e+00, 2.203042030000e+00, 1.421659950000e+00, 
	7.959907050000e-01, 2.421508070000e+00, 4.087171850000e-01, 2.306467060000e+00, 2.824977040000e-01, 
	1.971725940000e+00, 2.000855060000e-01, 8.129240870000e-01, 3.457544150000e-01, 1.177940960000e+00, 
	1.111073020000e+00, 2.012148950000e-01, 7.314813730000e-01, 7.168297770000e-01, 7.150861020000e-01, 
	6.980484130000e-01, 7.212088110000e-01, 7.017862800000e-01, 7.942795160000e-01, 2.686085100000e-01, 
	4.558899100000e-01, 7.836514120000e-01, 3.705526890000e-01, 4.898676870000e-01, 7.583938840000e-01, 
	7.036470170000e-01, 2.670058010000e-01, 4.479408860000e-01, 2.403583970000e-01, 3.046652970000e-01, 
	4.973143040000e-01, 4.213702980000e-01, 2.068424970000e-01, 3.715400100000e-01, 4.694659110000e-01, 
	2.141027000000e-01, 3.650254910000e-01, 4.613058870000e-01, 3.826147020000e-01, 3.952980940000e-01, 
	7.686275840000e-01, 1.760427950000e-01, 9.964718820000e-01, 1.699301000000e-01, 1.150742050000e+00, 
	7.268849020000e-01, 6.485952140000e-01, 3.813400860000e-01, 2.733407910000e-01, 8.020215030000e-01, 
	3.677645920000e-01, 2.090408060000e-01, 7.880682950000e-01, 3.195028900000e-01, 1.552255000000e-01, 
	6.838238240000e-01, 4.888857010000e-01, 4.007253940000e-01, 2.194383000000e-01, 1.764983980000e-01, 
	1.853511040000e-01, 5.508363840000e-01, 2.295127060000e-01, 2.270417060000e-01, 5.780513880000e-01, 
	1.401122060000e-01, 2.254666980000e-01, 5.265929100000e-01, 1.539034990000e-01, 6.907625200000e-01, 
	1.936780960000e-01, 1.847193990000e-01, 1.494196950000e-01, 9.553685780000e-02, 1.356823000000e-01, 
	1.878943000000e-01, 1.066090990000e-01, 9.836249980000e-03, -9.808535870000e-02, -5.547484010000e-02, 
	8.671393990000e-02, 1.701948940000e-01, 9.301538020000e-02};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixL0Resonant)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrixNoInterp(9.00000000E+02, 1.00279404E+02).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	// PrintFuncs::createCppVector(vec, "%13.12e");

	std::vector<double> ref {1.451736240000e-01, 1.019773860000e-01, 2.006407530000e-01, 
	1.530127230000e-01, 1.883632240000e-01, 1.683332030000e-01, 1.067039070000e-01, 1.456258150000e-01, 
	1.831201170000e-01, 1.309466660000e-01, 1.325839160000e-01, 1.484079510000e-01, 1.570227300000e-01, 
	3.052425380000e-01, 3.803117280000e-01, 2.731451090000e-01, 2.205147300000e-01, 4.098471110000e-01, 
	4.338147640000e-01, 4.634223580000e-01, 5.066210030000e-01, 6.166875360000e-01, 2.598617370000e-01, 
	7.314467430000e-01, 7.240201230000e-01, 7.070741650000e-01, 9.906740780000e-01, 3.402704300000e-01, 
	6.418282990000e-01, 1.101453780000e+00, 6.361072060000e-01, 3.044146300000e-01, 1.082320930050e+00, 
	4.160464857085e-01, 6.794727865973e-01, 7.387049116589e-01, 4.109378044857e-01, 1.251477942009e+00, 
	4.668288522535e-01, 1.407369021203e+00, 1.336716380045e+00, 3.137534322565e-01, 1.003702063044e+00, 
	3.468578359757e-01, 5.211984085654e-01, 5.370580953918e-01, 3.710700863374e-01, 1.126370046571e+00, 
	3.086158166506e-01, 2.182332438231e+00, 2.613180024247e-01, 9.533169029532e-01, 3.329705022863e-01, 
	2.246829407797e+00, 6.534346687780e-01, 4.999054855306e-01, 1.113491025181e+00, 6.348532247388e-01, 
	1.011013944086e+00, 2.804108086407e-01, 4.894569095359e-01, 5.428485006685e-01, 3.733891924942e-01, 
	3.085561106321e-01, 1.412099069066e+00, 3.651988832845e-01, 1.145112108369e+00, 1.013470008180e+00, 
	4.795928653673e-01, 8.103617115635e-01, 1.206263154570e+00, 1.880917921481e+00, 5.361135184885e-01, 
	9.004436156095e-01, 7.715686234405e-01, 8.340833673759e-01, 8.848580907189e-01, 1.017427055240e+00, 
	1.009576013075e+00, 7.005351047309e-01, 4.517436831852e-01, 6.954935622111e-01, 2.885444515477e-01, 
	8.230389948224e-01, 9.081821892253e-01, 7.826422107711e-01, 5.089578180853e-01, 3.633573180148e-01, 
	5.030046912936e-01, 1.234764823078e+00, 3.709621106520e-01, 2.351159597981e+00, 5.183678828239e-01, 
	3.645426832971e+00, 4.156201918042e-01, 3.870400910000e+00, 1.615419980000e+00, 4.089980130000e+00, 
	1.651711940000e+00, 6.341552140000e-01, 3.855832100000e+00, 2.766374110000e+00, 2.509978060000e+00, 
	2.433695080000e+00, 2.483650920000e+00, 2.406210900000e+00, 2.558996920000e+00, 1.192617060000e+00, 
	2.664026020000e+00, 3.540606020000e+00, 1.715270040000e+00, 2.653043030000e+00, 3.363480090000e+00, 
	2.541544910000e+00, 1.275097010000e+00, 2.494185920000e+00, 1.304685950000e+00, 1.504909990000e+00, 
	2.662411930000e+00, 2.337883950000e+00, 1.076972960000e+00, 1.813207030000e+00, 2.521511080000e+00, 
	1.118790030000e+00, 1.750404000000e+00, 2.432555910000e+00, 2.081724880000e+00, 2.152854920000e+00, 
	3.798012020000e+00, 8.869063850000e-01, 4.691595080000e+00, 8.055304290000e-01, 4.995463850000e+00, 
	2.052026990000e+00, 1.893211960000e+00, 1.545416950000e+00, 1.665307040000e+00, 4.801681040000e+00, 
	2.298609020000e+00, 1.484688040000e+00, 6.024712090000e+00, 3.096613880000e+00, 1.272531030000e+00, 
	4.458773140000e+00, 4.129217150000e+00, 3.467207910000e+00, 1.537727950000e+00, 1.343158010000e+00, 
	7.206603880000e-01, 2.055751090000e+00, 1.589846010000e+00, 8.017141220000e-01, 2.462730880000e+00, 
	1.505851980000e+00, 8.718969230000e-01, 2.495007990000e+00, 5.958036180000e-01, 2.369786980000e+00, 
	1.625079990000e+00, 1.607900980000e+00, 1.698585990000e+00, 1.583173990000e+00, 1.396373030000e+00, 
	1.627766970000e+00, 1.636700030000e+00, 1.623535990000e+00, 1.564512970000e+00, 1.171394940000e+00, 
	1.139394040000e+00, 1.473531960000e+00, 1.409037950000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixTests, GetCrossSectionMatrixL1Resonant)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrixNoInterp(9.00000000E+02, 1.00279404E+02).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	// PrintFuncs::createCppVector(vec, "%13.12e");

	std::vector<double> ref {5.518682670000e-02, 3.594385090000e-02, 6.433157620000e-02, 
	4.009336610000e-02, 3.918724130000e-02, 2.814282100000e-02, 1.758809200000e-02, 2.552001920000e-02, 
	3.354626150000e-02, 2.366414110000e-02, 2.222497200000e-02, 1.915073390000e-02, 1.226634440000e-02, 
	1.581882500000e-02, 1.400793440000e-02, 7.254477590000e-03, 3.868573810000e-03, 5.558215550000e-03, 
	9.505683560000e-03, 1.438424270000e-02, 1.915855520000e-02, 3.012711370000e-02, 1.569265500000e-02, 
	4.804251720000e-02, 3.929188850000e-02, 2.813378350000e-02, 2.884934280000e-02, -1.744213860000e-03, 
	-4.957551140000e-02, -2.713896890000e-02, -1.126980040000e-02, -3.220964600000e-02, -1.469738438500e-01, 
	-5.963118010000e-02, -9.926181848000e-02, -1.091014075300e-01, -7.832333001000e-02, -2.324890991000e-01, 
	-1.076018094200e-01, -4.001964680000e-01, -2.700890434000e-01, -7.279444673000e-02, -2.931626086000e-01, 
	-1.019013652200e-01, -1.538463821000e-01, -1.573451976000e-01, -1.080789183000e-01, -3.261948604000e-01, 
	-9.046374290000e-02, -6.429629397000e-01, -7.558054200000e-02, -2.843421532000e-01, -9.559595030000e-02, 
	-5.915112650000e-01, -1.809258683000e-01, -1.355457305000e-01, -3.074934780000e-01, -1.566669570000e-01, 
	-2.709394540000e-01, -6.182240670000e-02, -1.309241315000e-01, -1.322422902000e-01, -7.388672630000e-02, 
	-7.406140900000e-02, -3.319916430000e-01, -7.029927160000e-02, -1.886592210000e-01, -2.153754983000e-01, 
	-7.244694990000e-02, -1.387589120000e-01, -2.320300043000e-01, -4.498614672000e-01, -1.188792935100e-01, 
	-2.940456620600e-01, -2.389705906700e-01, -2.562559122900e-01, -2.824879657000e-01, -2.348762560000e-01, 
	-2.203991120000e-01, -1.811456680800e-01, -8.491420750000e-02, -6.831857940000e-02, -2.458485900000e-02, 
	-1.166961568000e-01, -2.645284813000e-01, -2.151153234000e-01, -2.806534600000e-02, -9.696932710000e-02, 
	-1.456031406000e-01, -3.578677809000e-01, -1.061623453000e-01, -6.678296180000e-01, -7.233757990000e-02, 
	-5.095177590000e-01, -4.095524270000e-02, -3.866418900000e-01, -1.529067010000e-01, -5.440143940000e-01, 
	-3.854624030000e-01, -6.014151130000e-02, -9.990709280000e-02, -3.732270000000e-01, -3.970383110000e-01, 
	-4.030098920000e-01, -4.109733100000e-01, -4.005039040000e-01, -4.420089130000e-01, -7.671771200000e-02, 
	1.389966010000e-01, -2.736246880000e-01, -1.126085970000e-01, -7.772113200000e-03, -2.940747140000e-01, 
	-3.678140940000e-01, -3.694618120000e-02, 1.670649050000e-01, 1.383713930000e-01, 2.594357130000e-01, 
	2.871530060000e-01, 1.052600000000e-01, 1.316640970000e-01, 3.096651140000e-01, 2.416004990000e-01, 
	1.343978940000e-01, 3.015537860000e-01, 2.544155120000e-01, 1.432067010000e-01, 1.745263930000e-01, 
	-1.400800940000e-01, 1.479243020000e-02, -9.002155070000e-02, -1.358378030000e-02, -2.451359930000e-01, 
	-4.154787960000e-01, -3.851478100000e-01, -2.696813050000e-01, -7.198078190000e-02, -3.726347090000e-01, 
	-3.487651050000e-01, -3.724806010000e-03, -2.294269060000e-01, -4.373485150000e-01, 1.951167920000e-02, 
	4.631780980000e-01, -8.374138180000e-02, -4.013685880000e-01, -2.493301030000e-01, -2.067680950000e-01, 
	-2.817790020000e-02, -4.164253920000e-02, -1.461952030000e-01, 1.101872980000e-02, -2.659079990000e-02, 
	-1.328690050000e-01, 1.991955940000e-02, -1.544716950000e-02, 1.845045950000e-02, 1.339323970000e-01, 
	-6.523542850000e-02, -5.249124020000e-02, -6.311765310000e-02, -6.479769950000e-02, -1.590156000000e-02, 
	1.067129990000e-02, -2.055820080000e-02, -5.781238150000e-02, -9.999395910000e-02, -6.598231940000e-02, 
	5.770838820000e-03, 3.010321040000e-02, -6.031832100000e-02};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}
