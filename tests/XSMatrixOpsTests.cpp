#include <iostream>

#include "gtest/gtest.h"
#include "file_tools.h"
#include "Library.h"
#include "Interpolation.h"
#include "additionalPrintFuncs.h"

class XSMatrixOpsTests : public ::testing::Test 
{
 protected:
	static std::string* url_;
	static std::string* target_;
	static Library* library_;
	static std::vector<std::string>* nucVec_;
	static std::vector < std::shared_ptr<Nuclide> >* nuclides_;

	static void SetUpTestSuite() 
	{
    	library_ = new Library;
		url_ = new std::string("https://www.polymtl.ca/merlin/downloads/libraries/ascii/draglibendfb7r0.gz");
    	target_ =  new std::string(File::getPrePath() + "draglibendfb7r0.gz");
		library_->downloadLibrary(*url_, *target_);
		library_->setXSLibraryPath(*target_);
		nucVec_ = new std::vector<std::string> {"Pu239", "La139"};
		nuclides_ = new std::vector < std::shared_ptr<Nuclide> > {library_->readNuclides(*nucVec_)};
  	}

	static void TearDownTestSuite() 
	{
    	delete library_;
		delete url_;
		delete target_;
		delete nucVec_;
		delete nuclides_;
    	library_ = nullptr;
		url_ = nullptr;
		target_ = nullptr;
		nucVec_ = nullptr;
		nuclides_ = nullptr;
  	}

	virtual void SetUp() {}
  	virtual void TearDown() {}
};

Library* XSMatrixOpsTests::library_ = nullptr;
std::string* XSMatrixOpsTests::url_ = nullptr;
std::string* XSMatrixOpsTests::target_ = nullptr;
std::vector<std::string>* XSMatrixOpsTests::nucVec_ = nullptr;
std::vector < std::shared_ptr<Nuclide> >* XSMatrixOpsTests::nuclides_ = nullptr;

TEST_F(XSMatrixOpsTests, LinLin)
{	
    CrossSectionSet xsSet = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, LinLin(), 1222.5, LinLin()).getValues();

    std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007868923804e+01, 1.926060699441e+01, 2.107419971728e+01, 
	2.041138137349e+01, 2.286544892476e+01, 2.327005098013e+01, 2.879879871397e+01, 2.318670451133e+01, 
	2.152621586997e+01, 3.494699472633e+01, 2.486693703178e+01, 3.535084450762e+01, 5.035057328151e+01, 
	4.428947774795e+01, 4.700928512136e+01, 5.514913822343e+01, 9.911876292216e+01, 1.365133953956e+02, 
	1.280455458235e+02, 1.574484654216e+02, 9.463940266088e+01, 4.894104585493e+01, 1.452115374613e+02, 
	9.291325980372e+00, 1.665552925622e+01, 1.846594543093e+01, 1.129212757670e+01, 8.527055515403e+01, 
	2.721035571720e+01, 1.104958514151e+02, 1.071672478638e+02, 2.925748649244e+02, 1.523677769401e+02, 
	3.318610919350e+02, 1.640211426613e+01, 1.728821924831e+01, 3.831341740404e+02, 2.500240974455e+01, 
	1.690870597098e+01, 1.690422869579e+01, 1.750438941818e+01, 1.825583526907e+01, 1.910818918652e+01, 
	2.001870359543e+01, 2.114906138930e+01, 2.234666567672e+01, 2.277924112149e+01, 2.323703713076e+01, 
	2.397529163596e+01, 2.547122086450e+01, 2.652706692161e+01, 2.704837956145e+01, 2.790400221539e+01, 
	2.892412571053e+01, 3.004226229182e+01, 3.127391191576e+01, 3.263396920199e+01, 3.423921239526e+01, 
	3.545196916794e+01, 3.614352690129e+01, 3.748793229141e+01, 3.891883778679e+01, 4.000701673459e+01, 
	4.178743686491e+01, 4.438229891924e+01, 4.629922689374e+01, 4.749237383015e+01, 4.856021719031e+01, 
	4.928928857858e+01, 5.044812343360e+01, 5.208779829596e+01, 5.330483153344e+01, 5.419718123015e+01, 
	5.568032218027e+01, 5.704764479559e+01, 5.806295057421e+01, 5.973145596847e+01, 6.171270051539e+01, 
	6.391519412219e+01, 6.812641405961e+01, 7.235638614327e+01, 7.815912608677e+01, 8.479575401392e+01, 
	9.527105250825e+01, 1.249686802098e+02, 1.847495502055e+02, 2.691809139684e+02, 3.346779350607e+02, 
	4.703400691173e+02, 7.791389801694e+02, 1.053644413568e+03, 1.703052197877e+03, 3.381259659974e+03, 
	4.541564353902e+03, 5.054881963012e+03, 5.300769656166e+03, 3.995784801468e+03, 2.405982317952e+03, 
	1.514106398246e+03, 1.138256262769e+03, 1.023551068771e+03, 8.753735331471e+02, 8.129405012015e+02, 
	7.661194083729e+02, 7.100438123606e+02, 7.161518806005e+02, 6.747820675754e+02, 6.823508898246e+02, 
	6.187689064442e+02, 6.977148776354e+02, 6.357872723998e+02, 8.152199517540e+02, 8.681055361393e+02, 
	7.605397052812e+02, 9.915166325016e+02, 1.081190359144e+03, 1.209724551928e+03, 1.413149691977e+03, 
	1.699604457475e+03, 2.011877656381e+03, 2.439950388705e+03, 3.768327941973e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, SqrtLogLin)
{	
    CrossSectionSet xsSet = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, Sqrt(), 1222.5, LogLin()).getValues();

    std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007869200049e+01, 1.926054909993e+01, 2.107428661190e+01, 
	2.040811600260e+01, 2.286634942750e+01, 2.327009835948e+01, 2.879889729887e+01, 2.318670673911e+01, 
	2.152622702558e+01, 3.494694522502e+01, 2.486705898611e+01, 3.535080838971e+01, 5.034856427919e+01, 
	4.429248190031e+01, 4.698606220792e+01, 5.515386710760e+01, 9.912614752808e+01, 1.364993153703e+02, 
	1.280230120910e+02, 1.575073570512e+02, 9.464364501982e+01, 4.893694414141e+01, 1.452107912658e+02, 
	9.291405757789e+00, 1.665558216046e+01, 1.846589752248e+01, 1.129338181775e+01, 8.526913593462e+01, 
	2.723763593890e+01, 1.104773717995e+02, 1.071704394395e+02, 2.925694803762e+02, 1.524016673463e+02, 
	3.318081933164e+02, 1.640344308773e+01, 1.729125017303e+01, 3.831069845229e+02, 2.501343109812e+01, 
	1.690879669182e+01, 1.690427713890e+01, 1.750443955997e+01, 1.825588317752e+01, 1.910823369203e+01, 
	2.001872526617e+01, 2.114908869077e+01, 2.234670073086e+01, 2.277927957300e+01, 2.323707951988e+01, 
	2.397534188358e+01, 2.547129044369e+01, 2.652715265222e+01, 2.704846358780e+01, 2.790406956123e+01, 
	2.892418870662e+01, 3.004233867131e+01, 3.127400603396e+01, 3.263408180521e+01, 3.423932436356e+01, 
	3.545207433594e+01, 3.614366090105e+01, 3.748809275976e+01, 3.891903010400e+01, 4.000723634287e+01, 
	4.178770148939e+01, 4.438263107686e+01, 4.629962361946e+01, 4.749287168863e+01, 4.856075095334e+01, 
	4.928987633940e+01, 5.044880588867e+01, 5.208864404774e+01, 5.330583717378e+01, 5.419834112615e+01, 
	5.568174874728e+01, 5.704932786575e+01, 5.806495914443e+01, 5.973351962419e+01, 6.171578969254e+01, 
	6.391782609263e+01, 6.813043464761e+01, 7.235947095325e+01, 7.816384919329e+01, 8.480275655374e+01, 
	9.528597363048e+01, 1.249814686118e+02, 1.847712511983e+02, 2.692443107197e+02, 3.347571971327e+02, 
	4.705098174881e+02, 7.795588762076e+02, 1.054293090139e+03, 1.704167037329e+03, 3.381503699507e+03, 
	4.538902175875e+03, 5.050222490831e+03, 5.295989124531e+03, 3.996728961085e+03, 2.407853229531e+03, 
	1.514943758800e+03, 1.139107321035e+03, 1.023869951674e+03, 8.755775686349e+02, 8.130938216722e+02, 
	7.662348740262e+02, 7.102741133207e+02, 7.162222798089e+02, 6.750533861979e+02, 6.826029374599e+02, 
	6.192652806426e+02, 6.979907124808e+02, 6.361850939879e+02, 8.152535624300e+02, 8.681364591529e+02, 
	7.612205913179e+02, 9.915454799155e+02, 1.081219019264e+03, 1.209753369040e+03, 1.413180705625e+03, 
	1.699638566936e+03, 2.011917094811e+03, 2.439996990375e+03, 3.768402069756e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixLinLin)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrix(300.0, LinLin(), 1222.5, LinLin()).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {5.518682670000e-02, 3.594385090000e-02, 6.433157620000e-02, 
	4.009336610000e-02, 3.918724130000e-02, 2.814282100000e-02, 1.758809200000e-02, 2.552001920000e-02, 
	3.354626150000e-02, 2.366414110000e-02, 2.222497200000e-02, 1.915073390000e-02, 1.226634440000e-02, 
	1.581882500000e-02, 1.400793440000e-02, 7.254477590000e-03, 3.868573810000e-03, 5.558215550000e-03, 
	9.505683560000e-03, 1.438424270000e-02, 1.915855520000e-02, 3.012711370000e-02, 1.569265500000e-02, 
	4.804251720000e-02, 3.929188850000e-02, 2.813378350000e-02, 2.884934280000e-02, -1.744213860000e-03, 
	-4.957551140000e-02, -2.713896890000e-02, -1.126980040000e-02, -3.220964600000e-02, -1.493796464253e-01, 
	-6.103229423318e-02, -1.020840503660e-01, -1.127544376457e-01, -8.157550867286e-02, -2.427833558884e-01, 
	-1.131897421263e-01, -4.215301906959e-01, -2.852310867838e-01, -7.773236974827e-02, -3.140070202260e-01, 
	-1.101889362147e-01, -1.661554606682e-01, -1.724239089152e-01, -1.200578145761e-01, -3.640431616036e-01, 
	-9.993105327468e-02, -7.119921606948e-01, -8.540504368733e-02, -3.059904331544e-01, -1.098676136378e-01, 
	-6.944267323154e-01, -1.963441217292e-01, -1.574625462476e-01, -4.093273428232e-01, -2.537990910400e-01, 
	-3.309511741959e-01, -1.078792814296e-01, -1.593994039604e-01, -1.489662357328e-01, -1.164709339630e-01, 
	-1.009174047233e-01, -4.526691528801e-01, -9.729289348015e-02, -2.868547533387e-01, -2.726918697463e-01, 
	-1.471893144076e-01, -1.854049410898e-01, -3.074765580755e-01, -4.885614630022e-01, -1.248374516714e-01, 
	-2.955211914065e-01, -2.430103195741e-01, -2.580848108946e-01, -2.934970659863e-01, -2.544843778662e-01, 
	-3.730334419886e-01, -1.869554801626e-01, -1.459030645651e-01, -1.153772596064e-01, -1.235200515903e-01, 
	-1.447415601195e-01, -2.910156750722e-01, -2.631212901968e-01, -1.109618003321e-01, -1.104921378061e-01, 
	-1.639077047282e-01, -4.033819410508e-01, -1.214672859596e-01, -7.666749074506e-01, -1.027737988892e-01, 
	-7.258506257702e-01, -6.512969816785e-02, -6.891575002630e-01, -2.585187362842e-01, -7.202560142235e-01, 
	-3.465470728523e-01, -7.683378134075e-02, -4.279578651704e-01, -5.156937286668e-01, -4.951409386019e-01, 
	-5.149847824004e-01, -5.147590828087e-01, -5.054360188240e-01, -5.188539554886e-01, -1.580447979593e-01, 
	-1.196861551415e-01, -5.779804378953e-01, -2.615242509292e-01, -3.174164933464e-01, -5.851946758431e-01, 
	-4.905538854081e-01, -1.369795605669e-01, -8.634986916257e-02, 4.495614632252e-02, 2.227336681224e-01, 
	1.006542050779e-01, -1.251346451332e-01, 7.005207937277e-02, 2.584761245509e-01, 3.355380940357e-02, 
	5.838889532710e-02, 2.535007822223e-01, 6.086228262117e-02, -7.018680307970e-02, -2.458141624741e-02, 
	-4.944163696249e-01, -5.517609818096e-02, -4.201203000664e-01, -7.031483710184e-02, -5.064629963657e-01, 
	-3.676801967240e-01, -3.188435670645e-01, -2.728561548975e-01, -2.171147051704e-01, -6.600506332918e-01, 
	-4.009757190066e-01, -1.386744383692e-01, -6.500232058832e-01, -5.291545085221e-01, -8.776468147363e-02, 
	8.521066142678e-02, -5.281290427088e-01, -5.740532438959e-01, -2.549878121571e-01, -2.179152225717e-01, 
	-7.568874853359e-02, -2.197647385154e-01, -2.305069447847e-01, -5.377064864958e-02, -2.126348262643e-01, 
	-2.109902047266e-01, -5.366543864124e-02, -2.187502715736e-01, -2.791486139824e-02, -7.713999445158e-02, 
	-2.004307683824e-01, -1.911781725505e-01, -2.048771539521e-01, -1.930582776244e-01, -1.448554571041e-01, 
	-1.488297640611e-01, -1.708159715036e-01, -1.894511989193e-01, -1.990912360279e-01, -1.443416028516e-01, 
	-1.020578410436e-01, -1.132971335133e-01, -1.494549534211e-01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixSqrtLogLin)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin()).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {5.518682670000e-02, 3.594385090000e-02, 6.433157620000e-02, 
	4.009336610000e-02, 3.918724130000e-02, 2.814282100000e-02, 1.758809200000e-02, 2.552001920000e-02, 
	3.354626150000e-02, 2.366414110000e-02, 2.222497200000e-02, 1.915073390000e-02, 1.226634440000e-02, 
	1.581882500000e-02, 1.400793440000e-02, 7.254477590000e-03, 3.868573810000e-03, 5.558215550000e-03, 
	9.505683560000e-03, 1.438424270000e-02, 1.915855520000e-02, 3.012711370000e-02, 1.569265500000e-02, 
	4.804251720000e-02, 3.929188850000e-02, 2.813378350000e-02, 2.884934280000e-02, -1.744213860000e-03, 
	-4.957551140000e-02, -2.713896890000e-02, -1.126980040000e-02, -3.220964600000e-02, -1.493801798783e-01, 
	-6.103260658895e-02, -1.020846818778e-01, -1.127552582639e-01, -8.157624356217e-02, -2.427856866906e-01, 
	-1.131913499002e-01, -4.215365938988e-01, -2.852357249102e-01, -7.773406830441e-02, -3.140142220876e-01, 
	-1.101921761627e-01, -1.661603400470e-01, -1.724307967713e-01, -1.200643483882e-01, -3.640648670949e-01, 
	-9.993638215383e-02, -7.120330567195e-01, -8.541123883272e-02, -3.060045214187e-01, -1.098731972778e-01, 
	-6.945144020504e-01, -1.963482343317e-01, -1.574768774877e-01, -4.094749012362e-01, -2.540388129000e-01, 
	-3.310489579847e-01, -1.079177326159e-01, -1.594103359888e-01, -1.490859079629e-01, -1.165514739141e-01, 
	-1.009252106453e-01, -4.526860834436e-01, -9.732983913814e-02, -2.870166823022e-01, -2.727101023813e-01, 
	-1.471036023503e-01, -1.885267921255e-01, -3.074948989263e-01, -4.886073113157e-01, -1.248204201095e-01, 
	-2.955208639274e-01, -2.430107341508e-01, -2.580847503700e-01, -2.935088615550e-01, -2.544812437624e-01, 
	-3.731709376531e-01, -1.869570511967e-01, -1.459170608668e-01, -1.153705951056e-01, -1.235672114098e-01, 
	-1.447424166063e-01, -2.910203137322e-01, -2.631418713173e-01, -1.108803959551e-01, -1.104949107722e-01, 
	-1.639117349194e-01, -4.033920103956e-01, -1.214708043979e-01, -7.666977316239e-01, -1.021029762982e-01, 
	-7.209763289644e-01, -6.458863761737e-02, -6.786258238939e-01, -2.551583002154e-01, -7.138189276561e-01, 
	-3.477950483729e-01, -7.628295791060e-02, -4.153661132009e-01, -5.118584801016e-01, -4.930174211280e-01, 
	-5.123074737292e-01, -5.124902325486e-01, -5.030573544695e-01, -5.176957849078e-01, -1.552846987972e-01, 
	-1.077314411879e-01, -5.673156566434e-01, -2.560513269662e-01, -3.041062173699e-01, -5.750990043489e-01, 
	-4.876463571173e-01, -1.332750839684e-01, -7.419482195345e-02, 4.967748715798e-02, 2.253473688946e-01, 
	1.101053716895e-01, -1.147530384623e-01, 7.325472588640e-02, 2.619834776371e-01, 4.391307066416e-02, 
	6.239516017115e-02, 2.568510476884e-01, 7.071066000219e-02, -5.992105269589e-02, -1.488042706964e-02, 
	-4.810282228233e-01, -5.236293954333e-02, -4.080133768108e-01, -6.819810645324e-02, -4.972143277728e-01, 
	-3.701397676460e-01, -3.216266896812e-01, -2.734279651721e-01, -2.118679059974e-01, -6.506585573844e-01, 
	-4.006741666553e-01, -1.333653002806e-01, -6.351968110174e-01, -5.281545127746e-01, -8.346122111736e-02, 
	1.043624794510e-01, -5.108611906234e-01, -5.702824862666e-01, -2.560992918328e-01, -2.185517603169e-01, 
	-7.402652572257e-02, -2.132977734423e-01, -2.284927625993e-01, -5.126879361397e-02, -2.060198577404e-01, 
	-2.091438309705e-01, -5.075454961936e-02, -2.113240619469e-01, -2.607418543757e-02, -6.804376175394e-02, 
	-1.959976170961e-01, -1.865021977473e-01, -2.002265039576e-01, -1.889649127127e-01, -1.402046315492e-01, 
	-1.427417124925e-01, -1.654711612458e-01, -1.852587365452e-01, -1.965540939174e-01, -1.422535703742e-01, 
	-9.809912691696e-02, -1.077953096924e-01, -1.470118396788e-01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSSum)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSection xs3 = xs1 + xs2;

	std::vector<double> ref {1.069214392000e+01, 1.081081629000e+01, 1.080597305000e+01, 
	1.072463608000e+01, 1.066183472000e+01, 1.067996502000e+01, 1.087947607000e+01, 1.118123817000e+01, 
	1.152264023000e+01, 1.216241980000e+01, 1.293947172000e+01, 1.345663595000e+01, 1.378556299000e+01, 
	1.393800497000e+01, 1.399548388000e+01, 1.403996802000e+01, 1.401208067000e+01, 1.393005323000e+01, 
	1.385387802000e+01, 1.379544496000e+01, 1.378044892000e+01, 1.383725118000e+01, 1.407018996000e+01, 
	1.434107352000e+01, 1.448926306000e+01, 1.464472961000e+01, 1.479826307000e+01, 1.510437631000e+01, 
	1.540665390000e+01, 1.554771428000e+01, 1.580632355000e+01, 1.623384090000e+01, 1.654887964000e+01, 
	1.685868551000e+01, 1.738228843000e+01, 1.783207273000e+01, 1.842493201000e+01, 1.891927389000e+01, 
	1.935688492000e+01, 1.980752371000e+01, 2.002894593000e+01, 2.014212494553e+01, 1.949477073969e+01, 
	2.012832933156e+01, 2.042180527117e+01, 2.220083742051e+01, 2.257552812117e+01, 2.206735691883e+01, 
	2.647500451451e+01, 2.618001795459e+01, 3.157587290692e+01, 4.193291991775e+01, 2.343221871697e+01, 
	2.307576197185e+01, 2.617803830242e+01, 3.933243684745e+01, 3.153601473984e+01, 2.608783854747e+01, 
	2.448893716378e+01, 3.812377471633e+01, 2.781061805793e+01, 3.844483652377e+01, 5.367246530151e+01, 
	4.794420405059e+01, 5.090514541256e+01, 5.943219647133e+01, 1.044130099487e+02, 2.513533103489e+02, 
	1.328551922763e+02, 1.626351202149e+02, 9.999585745885e+01, 5.444228809283e+01, 1.509208818128e+02, 
	1.522540373131e+01, 2.278454406828e+01, 2.481680178034e+01, 1.786385115429e+01, 9.206144610127e+01, 
	3.421803647541e+01, 1.177699675049e+02, 1.148031925720e+02, 3.005578827905e+02, 1.606789772989e+02, 
	3.404604338556e+02, 2.516989530457e+01, 2.619751199893e+01, 3.921989918614e+02, 3.428734942291e+01, 
	2.642929824254e+01, 2.655505602509e+01, 2.731447296117e+01, 2.820309584176e+01, 2.916831953944e+01, 
	3.018451717908e+01, 3.142068503094e+01, 3.271814114987e+01, 3.318270472188e+01, 3.367270060391e+01, 
	3.445942615659e+01, 3.604391918862e+01, 3.715682155819e+01, 3.770362833655e+01, 3.859942026248e+01, 
	3.966416582960e+01, 4.082766155836e+01, 4.210528243833e+01, 4.351196985880e+01, 4.516828218281e+01, 
	4.641639030296e+01, 4.712784194681e+01, 4.850718501865e+01, 4.997298054477e+01, 5.108625033459e+01, 
	5.290528141238e+01, 5.555168398617e+01, 5.750413008168e+01, 5.871765238306e+01, 5.980345591522e+01, 
	6.054482863422e+01, 6.172215514722e+01, 6.338709025705e+01, 6.462295332176e+01, 6.552852652470e+01, 
	6.703236571179e+01, 6.841885165707e+01, 6.944857140767e+01, 7.113935027586e+01, 7.314941186792e+01, 
	7.538083171130e+01, 7.965651228957e+01, 8.395711697751e+01, 8.994300899688e+01, 9.698223474660e+01, 
	1.085589245347e+02, 1.371457269227e+02, 1.967038210670e+02, 2.812240022761e+02, 3.467759856420e+02, 
	4.825169188924e+02, 7.914268433044e+02, 1.065993768671e+03, 1.715485035079e+03, 3.393822178231e+03, 
	4.554198454250e+03, 5.067560148558e+03, 5.313528956919e+03, 4.008681733526e+03, 2.419061894112e+03, 
	1.527410276537e+03, 1.151724906389e+03, 1.037175234999e+03, 8.892323540249e+02, 8.269613883513e+02, 
	7.803521848764e+02, 7.245893472563e+02, 7.309084864203e+02, 6.898168489155e+02, 6.976428006312e+02, 
	6.343013024788e+02, 7.136449549759e+02, 6.521588638465e+02, 8.321174998054e+02, 8.856336347599e+02, 
	7.787184691586e+02, 1.010400078849e+03, 1.101001773248e+03, 1.230839199327e+03, 1.436286136226e+03, 
	1.725550342274e+03, 2.040864696991e+03, 2.473094612564e+03, 3.814449682375e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs3.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSDifference)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSection xs3 = xs1 - xs2;

	std::vector<double> ref {1.609936240000e+00, 1.201712130000e+00, 9.835290900000e-01, 
	8.682699200000e-01, 1.030075080000e+00, 1.542323120000e+00, 2.275392050000e+00, 2.740880010000e+00, 
	2.985444070000e+00, 3.136541840000e+00, 2.949741840000e+00, 2.357453830000e+00, 1.608123310000e+00, 
	1.020533090000e+00, 6.389699000000e-01, 1.718840600000e-01, -2.190289500000e-01, -2.743592300000e-01, 
	-1.626358000000e-01, 3.494120000000e-02, 2.920713400000e-01, 6.394610400000e-01, 1.368336200000e+00, 
	2.068901540000e+00, 2.419703000000e+00, 2.778739930000e+00, 3.151289470000e+00, 3.914474010000e+00, 
	4.670265700000e+00, 5.028646520000e+00, 5.680897250000e+00, 6.622518500000e+00, 7.147979760000e+00, 
	7.438593890000e+00, 7.658372370000e+00, 7.821426870000e+00, 8.028007990000e+00, 8.190625710000e+00, 
	8.326455080000e+00, 8.489955890000e+00, 8.542814270000e+00, 9.294415654475e+00, 1.085258986031e+01, 
	1.100549026844e+01, 1.148105532883e+01, 1.075850177949e+01, 1.167273227883e+01, 1.340080188117e+01, 
	1.005809568549e+01, 9.366021645409e+00, 8.581505569173e+00, -3.411705928938e+00, 1.871618071759e+01, 
	1.774700077512e+01, 1.955285954709e+01, 7.207665112817e+00, 2.606158268809e+01, 2.028557047518e+01, 
	1.856349457615e+01, 3.177021473633e+01, 2.192325600563e+01, 3.225685249147e+01, 4.702868126151e+01, 
	4.063475144530e+01, 4.311342483015e+01, 5.086607997553e+01, 9.382451589567e+01, 2.167348044227e+01, 
	1.232358993707e+02, 1.522618106284e+02, 8.928294786290e+01, 4.343980361703e+01, 1.395021931097e+02, 
	3.357248229438e+00, 1.052651444416e+01, 1.211508908151e+01, 4.720403999114e+00, 7.847966420679e+01, 
	2.020267495899e+01, 1.032217353252e+02, 9.953130315562e+01, 2.845918470582e+02, 1.440565765814e+02, 
	3.232617500144e+02, 7.634333227684e+00, 8.378926497688e+00, 3.740693562195e+02, 1.571747006618e+01, 
	7.388113699428e+00, 7.253401366491e+00, 7.694305875180e+00, 8.308574696387e+00, 9.048058833603e+00, 
	9.852890011769e+00, 1.087743774767e+01, 1.197519020357e+01, 1.237577752110e+01, 1.280137365761e+01, 
	1.349115711534e+01, 1.489852254037e+01, 1.589731228504e+01, 1.639313078635e+01, 1.720858416831e+01, 
	1.818408559146e+01, 1.925686302528e+01, 2.044254139319e+01, 2.175596854518e+01, 2.331014260771e+01, 
	2.448754803292e+01, 2.515921185576e+01, 2.646867956417e+01, 2.786469502882e+01, 2.892778313459e+01, 
	3.066959231744e+01, 3.321291385231e+01, 3.509432370580e+01, 3.626709527723e+01, 3.731697846541e+01, 
	3.803374852294e+01, 3.917409171998e+01, 4.078850633487e+01, 4.198670974511e+01, 4.286583593560e+01, 
	4.432827864876e+01, 4.567643793411e+01, 4.667732974074e+01, 4.832356166107e+01, 5.027598916286e+01, 
	5.244955653309e+01, 5.659631582965e+01, 6.075565530903e+01, 6.637524317665e+01, 7.260927328123e+01, 
	8.198318048179e+01, 1.127916334970e+02, 1.727952793441e+02, 2.571378256606e+02, 3.225798844793e+02, 
	4.581632193422e+02, 7.668511170344e+02, 1.041295058464e+03, 1.690619360676e+03, 3.368697141717e+03, 
	4.528930253554e+03, 5.042203777465e+03, 5.288010355414e+03, 3.982887869409e+03, 2.392902741791e+03, 
	1.500802519955e+03, 1.124787619150e+03, 1.009926902544e+03, 8.615147122692e+02, 7.989196140517e+02, 
	7.518866318694e+02, 6.954982774649e+02, 7.013952747806e+02, 6.597472862353e+02, 6.670589790180e+02, 
	6.032365104096e+02, 6.817848002949e+02, 6.194156809531e+02, 7.983224037027e+02, 8.505774375187e+02, 
	7.423609414037e+02, 9.726331861545e+02, 1.061378945040e+03, 1.188609904530e+03, 1.390013247728e+03, 
	1.673658572676e+03, 1.982890615771e+03, 2.406806164846e+03, 3.722206201570e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs3.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSSumEqual)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	xs1 += xs2;

	std::vector<double> ref {1.069214392000e+01, 1.081081629000e+01, 1.080597305000e+01, 
	1.072463608000e+01, 1.066183472000e+01, 1.067996502000e+01, 1.087947607000e+01, 1.118123817000e+01, 
	1.152264023000e+01, 1.216241980000e+01, 1.293947172000e+01, 1.345663595000e+01, 1.378556299000e+01, 
	1.393800497000e+01, 1.399548388000e+01, 1.403996802000e+01, 1.401208067000e+01, 1.393005323000e+01, 
	1.385387802000e+01, 1.379544496000e+01, 1.378044892000e+01, 1.383725118000e+01, 1.407018996000e+01, 
	1.434107352000e+01, 1.448926306000e+01, 1.464472961000e+01, 1.479826307000e+01, 1.510437631000e+01, 
	1.540665390000e+01, 1.554771428000e+01, 1.580632355000e+01, 1.623384090000e+01, 1.654887964000e+01, 
	1.685868551000e+01, 1.738228843000e+01, 1.783207273000e+01, 1.842493201000e+01, 1.891927389000e+01, 
	1.935688492000e+01, 1.980752371000e+01, 2.002894593000e+01, 2.014212494553e+01, 1.949477073969e+01, 
	2.012832933156e+01, 2.042180527117e+01, 2.220083742051e+01, 2.257552812117e+01, 2.206735691883e+01, 
	2.647500451451e+01, 2.618001795459e+01, 3.157587290692e+01, 4.193291991775e+01, 2.343221871697e+01, 
	2.307576197185e+01, 2.617803830242e+01, 3.933243684745e+01, 3.153601473984e+01, 2.608783854747e+01, 
	2.448893716378e+01, 3.812377471633e+01, 2.781061805793e+01, 3.844483652377e+01, 5.367246530151e+01, 
	4.794420405059e+01, 5.090514541256e+01, 5.943219647133e+01, 1.044130099487e+02, 2.513533103489e+02, 
	1.328551922763e+02, 1.626351202149e+02, 9.999585745885e+01, 5.444228809283e+01, 1.509208818128e+02, 
	1.522540373131e+01, 2.278454406828e+01, 2.481680178034e+01, 1.786385115429e+01, 9.206144610127e+01, 
	3.421803647541e+01, 1.177699675049e+02, 1.148031925720e+02, 3.005578827905e+02, 1.606789772989e+02, 
	3.404604338556e+02, 2.516989530457e+01, 2.619751199893e+01, 3.921989918614e+02, 3.428734942291e+01, 
	2.642929824254e+01, 2.655505602509e+01, 2.731447296117e+01, 2.820309584176e+01, 2.916831953944e+01, 
	3.018451717908e+01, 3.142068503094e+01, 3.271814114987e+01, 3.318270472188e+01, 3.367270060391e+01, 
	3.445942615659e+01, 3.604391918862e+01, 3.715682155819e+01, 3.770362833655e+01, 3.859942026248e+01, 
	3.966416582960e+01, 4.082766155836e+01, 4.210528243833e+01, 4.351196985880e+01, 4.516828218281e+01, 
	4.641639030296e+01, 4.712784194681e+01, 4.850718501865e+01, 4.997298054477e+01, 5.108625033459e+01, 
	5.290528141238e+01, 5.555168398617e+01, 5.750413008168e+01, 5.871765238306e+01, 5.980345591522e+01, 
	6.054482863422e+01, 6.172215514722e+01, 6.338709025705e+01, 6.462295332176e+01, 6.552852652470e+01, 
	6.703236571179e+01, 6.841885165707e+01, 6.944857140767e+01, 7.113935027586e+01, 7.314941186792e+01, 
	7.538083171130e+01, 7.965651228957e+01, 8.395711697751e+01, 8.994300899688e+01, 9.698223474660e+01, 
	1.085589245347e+02, 1.371457269227e+02, 1.967038210670e+02, 2.812240022761e+02, 3.467759856420e+02, 
	4.825169188924e+02, 7.914268433044e+02, 1.065993768671e+03, 1.715485035079e+03, 3.393822178231e+03, 
	4.554198454250e+03, 5.067560148558e+03, 5.313528956919e+03, 4.008681733526e+03, 2.419061894112e+03, 
	1.527410276537e+03, 1.151724906389e+03, 1.037175234999e+03, 8.892323540249e+02, 8.269613883513e+02, 
	7.803521848764e+02, 7.245893472563e+02, 7.309084864203e+02, 6.898168489155e+02, 6.976428006312e+02, 
	6.343013024788e+02, 7.136449549759e+02, 6.521588638465e+02, 8.321174998054e+02, 8.856336347599e+02, 
	7.787184691586e+02, 1.010400078849e+03, 1.101001773248e+03, 1.230839199327e+03, 1.436286136226e+03, 
	1.725550342274e+03, 2.040864696991e+03, 2.473094612564e+03, 3.814449682375e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs1.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSDifferenceEqual)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	xs1 -= xs2;

	std::vector<double> ref {1.609936240000e+00, 1.201712130000e+00, 9.835290900000e-01, 
	8.682699200000e-01, 1.030075080000e+00, 1.542323120000e+00, 2.275392050000e+00, 2.740880010000e+00, 
	2.985444070000e+00, 3.136541840000e+00, 2.949741840000e+00, 2.357453830000e+00, 1.608123310000e+00, 
	1.020533090000e+00, 6.389699000000e-01, 1.718840600000e-01, -2.190289500000e-01, -2.743592300000e-01, 
	-1.626358000000e-01, 3.494120000000e-02, 2.920713400000e-01, 6.394610400000e-01, 1.368336200000e+00, 
	2.068901540000e+00, 2.419703000000e+00, 2.778739930000e+00, 3.151289470000e+00, 3.914474010000e+00, 
	4.670265700000e+00, 5.028646520000e+00, 5.680897250000e+00, 6.622518500000e+00, 7.147979760000e+00, 
	7.438593890000e+00, 7.658372370000e+00, 7.821426870000e+00, 8.028007990000e+00, 8.190625710000e+00, 
	8.326455080000e+00, 8.489955890000e+00, 8.542814270000e+00, 9.294415654475e+00, 1.085258986031e+01, 
	1.100549026844e+01, 1.148105532883e+01, 1.075850177949e+01, 1.167273227883e+01, 1.340080188117e+01, 
	1.005809568549e+01, 9.366021645409e+00, 8.581505569173e+00, -3.411705928938e+00, 1.871618071759e+01, 
	1.774700077512e+01, 1.955285954709e+01, 7.207665112817e+00, 2.606158268809e+01, 2.028557047518e+01, 
	1.856349457615e+01, 3.177021473633e+01, 2.192325600563e+01, 3.225685249147e+01, 4.702868126151e+01, 
	4.063475144530e+01, 4.311342483015e+01, 5.086607997553e+01, 9.382451589567e+01, 2.167348044227e+01, 
	1.232358993707e+02, 1.522618106284e+02, 8.928294786290e+01, 4.343980361703e+01, 1.395021931097e+02, 
	3.357248229438e+00, 1.052651444416e+01, 1.211508908151e+01, 4.720403999114e+00, 7.847966420679e+01, 
	2.020267495899e+01, 1.032217353252e+02, 9.953130315562e+01, 2.845918470582e+02, 1.440565765814e+02, 
	3.232617500144e+02, 7.634333227684e+00, 8.378926497688e+00, 3.740693562195e+02, 1.571747006618e+01, 
	7.388113699428e+00, 7.253401366491e+00, 7.694305875180e+00, 8.308574696387e+00, 9.048058833603e+00, 
	9.852890011769e+00, 1.087743774767e+01, 1.197519020357e+01, 1.237577752110e+01, 1.280137365761e+01, 
	1.349115711534e+01, 1.489852254037e+01, 1.589731228504e+01, 1.639313078635e+01, 1.720858416831e+01, 
	1.818408559146e+01, 1.925686302528e+01, 2.044254139319e+01, 2.175596854518e+01, 2.331014260771e+01, 
	2.448754803292e+01, 2.515921185576e+01, 2.646867956417e+01, 2.786469502882e+01, 2.892778313459e+01, 
	3.066959231744e+01, 3.321291385231e+01, 3.509432370580e+01, 3.626709527723e+01, 3.731697846541e+01, 
	3.803374852294e+01, 3.917409171998e+01, 4.078850633487e+01, 4.198670974511e+01, 4.286583593560e+01, 
	4.432827864876e+01, 4.567643793411e+01, 4.667732974074e+01, 4.832356166107e+01, 5.027598916286e+01, 
	5.244955653309e+01, 5.659631582965e+01, 6.075565530903e+01, 6.637524317665e+01, 7.260927328123e+01, 
	8.198318048179e+01, 1.127916334970e+02, 1.727952793441e+02, 2.571378256606e+02, 3.225798844793e+02, 
	4.581632193422e+02, 7.668511170344e+02, 1.041295058464e+03, 1.690619360676e+03, 3.368697141717e+03, 
	4.528930253554e+03, 5.042203777465e+03, 5.288010355414e+03, 3.982887869409e+03, 2.392902741791e+03, 
	1.500802519955e+03, 1.124787619150e+03, 1.009926902544e+03, 8.615147122692e+02, 7.989196140517e+02, 
	7.518866318694e+02, 6.954982774649e+02, 7.013952747806e+02, 6.597472862353e+02, 6.670589790180e+02, 
	6.032365104096e+02, 6.817848002949e+02, 6.194156809531e+02, 7.983224037027e+02, 8.505774375187e+02, 
	7.423609414037e+02, 9.726331861545e+02, 1.061378945040e+03, 1.188609904530e+03, 1.390013247728e+03, 
	1.673658572676e+03, 1.982890615771e+03, 2.406806164846e+03, 3.722206201570e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs1.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixSum)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());

	CrossSectionMatrix mat3 = mat1 + mat2;
	std::vector<double> vec3 = Numerics::eigenVecTOStdVec(mat3.getValues().diagonal(0)); 

	std::vector<double> ref {9.394885070000e+00, 9.426134110000e+00, 9.337042330000e+00, 
	9.072159530000e+00, 8.343547590000e+00, 7.782719610000e+00, 7.973369840000e+00, 8.136422400000e+00, 
	8.419189460000e+00, 9.059902660000e+00, 9.795231340000e+00, 1.022897387000e+01, 1.046437884000e+01, 
	1.044608856000e+01, 1.048041558000e+01, 1.073670268000e+01, 1.081697989000e+01, 1.069879365000e+01, 
	1.070913601000e+01, 1.070034456000e+01, 1.074039745000e+01, 1.083957815000e+01, 1.154867315000e+01, 
	1.142340565000e+01, 1.162905645000e+01, 1.180840492000e+01, 1.196104955000e+01, 1.279423380000e+01, 
	1.253373098000e+01, 1.268136406000e+01, 1.345432568000e+01, 1.397940493000e+01, 1.351367323533e+01, 
	1.451153564123e+01, 1.479845758159e+01, 1.517325635224e+01, 1.590759888502e+01, 1.557701562902e+01, 
	1.640195193440e+01, 1.581717366030e+01, 1.644430832623e+01, 1.709643988583e+01, 1.547291261590e+01, 
	1.659944652939e+01, 1.650573195987e+01, 1.786436293928e+01, 1.823965678566e+01, 1.652107442097e+01, 
	2.125156500174e+01, 1.929970666473e+01, 2.468103222014e+01, 3.396673315569e+01, 1.525538158501e+01, 
	1.286100510324e+01, 1.543101329966e+01, 2.848569962276e+01, 1.631824646987e+01, 1.513826914325e+01, 
	1.416467072129e+01, 1.802753402593e+01, 1.428327817916e+01, 1.707890675115e+01, 1.856632432759e+01, 
	1.673972270469e+01, 1.528960891272e+01, 1.731036510056e+01, 2.157261964093e+01, 6.265023318260e+01, 
	1.569668352877e+01, 2.477083976954e+01, 1.575010601318e+01, 1.302884187470e+01, 1.939916615829e+01, 
	1.232116666727e+01, 1.374127446627e+01, 1.447306517349e+01, 1.545247744088e+01, 1.617833871917e+01, 
	1.677512205125e+01, 1.620962340095e+01, 1.810009841646e+01, 1.814956977411e+01, 1.765339258080e+01, 
	1.429048843938e+01, 1.497302336369e+01, 1.647775386027e+01, 1.732015798409e+01, 1.575239210389e+01, 
	1.675667603501e+01, 1.635441942190e+01, 1.752393808928e+01, 1.580262943141e+01, 1.759662119894e+01, 
	1.398409030463e+01, 1.790022524553e+01, 1.346830182746e+01, 1.603103651697e+01, 1.353446539428e+01, 
	1.726134873222e+01, 1.773531409177e+01, 1.263689620433e+01, 1.551997094704e+01, 1.614651240085e+01, 
	1.677329036795e+01, 1.730090749409e+01, 1.743697030970e+01, 1.739592934989e+01, 1.783567608021e+01, 
	1.408992310347e+01, 1.522274372544e+01, 1.733156485171e+01, 1.518922219748e+01, 1.565578453311e+01, 
	1.742687316204e+01, 1.754973830910e+01, 1.423090831592e+01, 1.504257409165e+01, 1.327534984585e+01, 
	1.319057683733e+01, 1.502496069328e+01, 1.508726271399e+01, 1.292210971524e+01, 1.371544966793e+01, 
	1.506019601187e+01, 1.300872302308e+01, 1.367868343237e+01, 1.493285514035e+01, 1.461220648460e+01, 
	1.471488576394e+01, 1.765525091376e+01, 1.315025351324e+01, 1.849106668116e+01, 1.391921968865e+01, 
	2.036866676851e+01, 2.206742037908e+01, 2.418505733221e+01, 2.373243325280e+01, 2.080006997191e+01, 
	2.422017294301e+01, 2.502559547000e+01, 2.228425260704e+01, 2.628964377137e+01, 2.798605663620e+01, 
	2.011743783099e+01, 2.177736402683e+01, 2.211864723991e+01, 2.082428225529e+01, 1.993780046685e+01, 
	2.118741377620e+01, 2.016578914236e+01, 2.236040025453e+01, 2.324558306451e+01, 2.192162455818e+01, 
	2.554760031079e+01, 2.628719093681e+01, 2.450446129706e+01, 2.771597412375e+01, 2.546521840273e+01, 
	2.908446545728e+01, 3.004768569547e+01, 3.049643000129e+01, 3.221540557710e+01, 2.327112860783e+01, 
	1.595157012878e+01, 1.618277796228e+01, 1.646282348669e+01, 1.681426547493e+01, 1.727876523649e+01, 
	1.660767661010e+01, 1.586630828538e+01, 1.657525121204e+01, 1.873219868082e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec3, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixDifference)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());

	CrossSectionMatrix mat3 = mat1 - mat2;
	std::vector<double> vec3 = Numerics::eigenVecTOStdVec(mat3.getValues().diagonal(0)); 

	std::vector<double> ref {-3.069738390000e+00, -3.297632210000e+00, -3.440834530000e+00, 
	-3.205633410000e+00, -2.491718530000e+00, -1.436530110000e+00, -6.302068200000e-01, -3.033073000000e-01, 
	-1.170730600000e-01, 3.567362000000e-02, -1.909957000000e-01, -8.633198700000e-01, -1.702603820000e+00, 
	-2.458420040000e+00, -2.861345060000e+00, -3.113877540000e+00, -3.394208430000e+00, -3.485735650000e+00, 
	-3.288172730000e+00, -3.042146200000e+00, -2.730944630000e+00, -2.341927050000e+00, -1.137879850000e+00, 
	-8.339843700000e-01, -4.257874500000e-01, -4.284954000000e-02, 3.289561300000e-01, 1.619859220000e+00, 
	1.813893800000e+00, 2.179540640000e+00, 3.348462100000e+00, 4.395349030000e+00, 4.144854955331e+00, 
	5.128154761227e+00, 5.116806461591e+00, 5.210126352239e+00, 5.566167265016e+00, 4.911551229024e+00, 
	5.442524094396e+00, 4.578473740304e+00, 5.041967446233e+00, 6.329136025574e+00, 6.889142414996e+00, 
	7.566912908684e+00, 7.685990104567e+00, 6.746389413826e+00, 7.563339158772e+00, 8.082264927608e+00, 
	5.059183650683e+00, 2.846005962739e+00, 2.030788583348e+00, -1.011528690566e+01, 1.074898716846e+01, 
	7.559646907513e+00, 9.132507611298e+00, -2.876095669964e+00, 1.140080524720e+01, 9.895547583252e+00, 
	8.801759669429e+00, 1.217913568795e+01, 8.397984699158e+00, 1.093330967938e+01, 1.196000666962e+01, 
	9.442137149485e+00, 7.515916998576e+00, 8.780522537022e+00, 1.125235231199e+01, -3.403551114935e+01, 
	6.351807239639e+00, 1.453522485610e+01, 5.171410151060e+00, 2.163138202933e+00, 8.126701440606e+00, 
	6.137309169185e-01, 1.659715503631e+00, 1.968585673235e+00, 2.529832587244e+00, 2.843572801033e+00, 
	3.035550769578e+00, 1.976918180761e+00, 3.205961345592e+00, 2.631007721633e+00, 1.556519957718e+00, 
	-2.303435852391e+00, -1.905456796118e+00, -6.355855150323e-01, -4.676531056882e-02, -1.963204847166e+00, 
	-1.318182760806e+00, -1.911275865177e+00, -9.647368380541e-01, -2.871450417790e+00, -1.221334994053e+00, 
	-4.964007615696e+00, -1.170064726307e+00, -5.712957314280e+00, -3.183830656023e+00, -5.714139509320e+00, 
	-2.035972689068e+00, -1.647380247140e+00, -6.798091647050e+00, -3.937682372387e+00, -3.346145679796e+00, 
	-2.756617659701e+00, -2.265376878327e+00, -2.164813069083e+00, -2.240437637832e+00, -1.836568002552e+00, 
	-5.606453983092e+00, -4.486394255266e+00, -2.399962935366e+00, -4.564029716602e+00, -4.112422041228e+00, 
	-2.363368745421e+00, -2.268433262413e+00, -5.605458924532e+00, -4.803950706490e+00, -6.579798929003e+00, 
	-6.670212405566e+00, -4.844284850519e+00, -4.793250529100e+00, -6.966201747142e+00, -6.178305986025e+00, 
	-4.842044440413e+00, -6.900893944320e+00, -6.236173811421e+00, -4.989870841131e+00, -5.319691241319e+00, 
	-5.225746884162e+00, -2.300812539039e+00, -6.818875440718e+00, -1.493625125529e+00, -6.080745292709e+00, 
	3.496223251652e-01, 2.013862357870e+00, 4.094492811042e+00, 3.614089136535e+00, 6.693889698521e-01, 
	4.074064803709e+00, 4.860215732368e+00, 2.109326096950e+00, 6.103029040565e+00, 7.783038728282e+00, 
	-9.376718637599e-02, 1.561448103351e+00, 1.894559801577e+00, 5.877291209990e-01, -3.132050813277e-01, 
	9.214569185760e-01, -1.097612329502e-01, 2.076921547640e+00, 2.951525995427e+00, 1.621010328461e+00, 
	5.239383112451e+00, 5.969004889722e+00, 4.180246297174e+00, 7.384578438722e+00, 5.127613670114e+00, 
	8.741500334828e+00, 9.696364216482e+00, 1.013641775097e+01, 1.184551224474e+01, 2.889700030824e+00, 
	-4.441724422377e+00, -4.223586030173e+00, -3.961423081968e+00, -3.636831785069e+00, -3.218927355755e+00, 
	-3.965286534983e+00, -4.802939151981e+00, -4.253013025282e+00, -2.897125607370e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec3, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixSumEqual)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());

	mat1 += mat2;

	std::vector<double> vec1 = Numerics::eigenVecTOStdVec(mat1.getValues().diagonal(0)); 

	std::vector<double> ref {9.394885070000e+00, 9.426134110000e+00, 9.337042330000e+00, 
	9.072159530000e+00, 8.343547590000e+00, 7.782719610000e+00, 7.973369840000e+00, 8.136422400000e+00, 
	8.419189460000e+00, 9.059902660000e+00, 9.795231340000e+00, 1.022897387000e+01, 1.046437884000e+01, 
	1.044608856000e+01, 1.048041558000e+01, 1.073670268000e+01, 1.081697989000e+01, 1.069879365000e+01, 
	1.070913601000e+01, 1.070034456000e+01, 1.074039745000e+01, 1.083957815000e+01, 1.154867315000e+01, 
	1.142340565000e+01, 1.162905645000e+01, 1.180840492000e+01, 1.196104955000e+01, 1.279423380000e+01, 
	1.253373098000e+01, 1.268136406000e+01, 1.345432568000e+01, 1.397940493000e+01, 1.351367323533e+01, 
	1.451153564123e+01, 1.479845758159e+01, 1.517325635224e+01, 1.590759888502e+01, 1.557701562902e+01, 
	1.640195193440e+01, 1.581717366030e+01, 1.644430832623e+01, 1.709643988583e+01, 1.547291261590e+01, 
	1.659944652939e+01, 1.650573195987e+01, 1.786436293928e+01, 1.823965678566e+01, 1.652107442097e+01, 
	2.125156500174e+01, 1.929970666473e+01, 2.468103222014e+01, 3.396673315569e+01, 1.525538158501e+01, 
	1.286100510324e+01, 1.543101329966e+01, 2.848569962276e+01, 1.631824646987e+01, 1.513826914325e+01, 
	1.416467072129e+01, 1.802753402593e+01, 1.428327817916e+01, 1.707890675115e+01, 1.856632432759e+01, 
	1.673972270469e+01, 1.528960891272e+01, 1.731036510056e+01, 2.157261964093e+01, 6.265023318260e+01, 
	1.569668352877e+01, 2.477083976954e+01, 1.575010601318e+01, 1.302884187470e+01, 1.939916615829e+01, 
	1.232116666727e+01, 1.374127446627e+01, 1.447306517349e+01, 1.545247744088e+01, 1.617833871917e+01, 
	1.677512205125e+01, 1.620962340095e+01, 1.810009841646e+01, 1.814956977411e+01, 1.765339258080e+01, 
	1.429048843938e+01, 1.497302336369e+01, 1.647775386027e+01, 1.732015798409e+01, 1.575239210389e+01, 
	1.675667603501e+01, 1.635441942190e+01, 1.752393808928e+01, 1.580262943141e+01, 1.759662119894e+01, 
	1.398409030463e+01, 1.790022524553e+01, 1.346830182746e+01, 1.603103651697e+01, 1.353446539428e+01, 
	1.726134873222e+01, 1.773531409177e+01, 1.263689620433e+01, 1.551997094704e+01, 1.614651240085e+01, 
	1.677329036795e+01, 1.730090749409e+01, 1.743697030970e+01, 1.739592934989e+01, 1.783567608021e+01, 
	1.408992310347e+01, 1.522274372544e+01, 1.733156485171e+01, 1.518922219748e+01, 1.565578453311e+01, 
	1.742687316204e+01, 1.754973830910e+01, 1.423090831592e+01, 1.504257409165e+01, 1.327534984585e+01, 
	1.319057683733e+01, 1.502496069328e+01, 1.508726271399e+01, 1.292210971524e+01, 1.371544966793e+01, 
	1.506019601187e+01, 1.300872302308e+01, 1.367868343237e+01, 1.493285514035e+01, 1.461220648460e+01, 
	1.471488576394e+01, 1.765525091376e+01, 1.315025351324e+01, 1.849106668116e+01, 1.391921968865e+01, 
	2.036866676851e+01, 2.206742037908e+01, 2.418505733221e+01, 2.373243325280e+01, 2.080006997191e+01, 
	2.422017294301e+01, 2.502559547000e+01, 2.228425260704e+01, 2.628964377137e+01, 2.798605663620e+01, 
	2.011743783099e+01, 2.177736402683e+01, 2.211864723991e+01, 2.082428225529e+01, 1.993780046685e+01, 
	2.118741377620e+01, 2.016578914236e+01, 2.236040025453e+01, 2.324558306451e+01, 2.192162455818e+01, 
	2.554760031079e+01, 2.628719093681e+01, 2.450446129706e+01, 2.771597412375e+01, 2.546521840273e+01, 
	2.908446545728e+01, 3.004768569547e+01, 3.049643000129e+01, 3.221540557710e+01, 2.327112860783e+01, 
	1.595157012878e+01, 1.618277796228e+01, 1.646282348669e+01, 1.681426547493e+01, 1.727876523649e+01, 
	1.660767661010e+01, 1.586630828538e+01, 1.657525121204e+01, 1.873219868082e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec1, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixDifferenceEqual)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	std::vector<double> vec2 = Numerics::eigenVecTOStdVec(mat2.getValues().diagonal(0)); 

	mat1 -= mat2;
	std::vector<double> vec1 = Numerics::eigenVecTOStdVec(mat1.getValues().diagonal(0)); 

	// PrintFuncs::createCppVector(vec1, "%13.12e");

	// std::cout << std::scientific << std::endl;
	// for(size_t i = 0; i < vec1.size(); i ++)
	// std::cout << vec0[i] << " " << vec2[i] << " " << vec1[i] << std::endl;

	std::vector<double> ref {-3.069738390000e+00, -3.297632210000e+00, -3.440834530000e+00, 
	-3.205633410000e+00, -2.491718530000e+00, -1.436530110000e+00, -6.302068200000e-01, -3.033073000000e-01, 
	-1.170730600000e-01, 3.567362000000e-02, -1.909957000000e-01, -8.633198700000e-01, -1.702603820000e+00, 
	-2.458420040000e+00, -2.861345060000e+00, -3.113877540000e+00, -3.394208430000e+00, -3.485735650000e+00, 
	-3.288172730000e+00, -3.042146200000e+00, -2.730944630000e+00, -2.341927050000e+00, -1.137879850000e+00, 
	-8.339843700000e-01, -4.257874500000e-01, -4.284954000000e-02, 3.289561300000e-01, 1.619859220000e+00, 
	1.813893800000e+00, 2.179540640000e+00, 3.348462100000e+00, 4.395349030000e+00, 4.144854955331e+00, 
	5.128154761227e+00, 5.116806461591e+00, 5.210126352239e+00, 5.566167265016e+00, 4.911551229024e+00, 
	5.442524094396e+00, 4.578473740304e+00, 5.041967446233e+00, 6.329136025574e+00, 6.889142414996e+00, 
	7.566912908684e+00, 7.685990104567e+00, 6.746389413826e+00, 7.563339158772e+00, 8.082264927608e+00, 
	5.059183650683e+00, 2.846005962739e+00, 2.030788583348e+00, -1.011528690566e+01, 1.074898716846e+01, 
	7.559646907513e+00, 9.132507611298e+00, -2.876095669964e+00, 1.140080524720e+01, 9.895547583252e+00, 
	8.801759669429e+00, 1.217913568795e+01, 8.397984699158e+00, 1.093330967938e+01, 1.196000666962e+01, 
	9.442137149485e+00, 7.515916998576e+00, 8.780522537022e+00, 1.125235231199e+01, -3.403551114935e+01, 
	6.351807239639e+00, 1.453522485610e+01, 5.171410151060e+00, 2.163138202933e+00, 8.126701440606e+00, 
	6.137309169185e-01, 1.659715503631e+00, 1.968585673235e+00, 2.529832587244e+00, 2.843572801033e+00, 
	3.035550769578e+00, 1.976918180761e+00, 3.205961345592e+00, 2.631007721633e+00, 1.556519957718e+00, 
	-2.303435852391e+00, -1.905456796118e+00, -6.355855150323e-01, -4.676531056882e-02, -1.963204847166e+00, 
	-1.318182760806e+00, -1.911275865177e+00, -9.647368380541e-01, -2.871450417790e+00, -1.221334994053e+00, 
	-4.964007615696e+00, -1.170064726307e+00, -5.712957314280e+00, -3.183830656023e+00, -5.714139509320e+00, 
	-2.035972689068e+00, -1.647380247140e+00, -6.798091647050e+00, -3.937682372387e+00, -3.346145679796e+00, 
	-2.756617659701e+00, -2.265376878327e+00, -2.164813069083e+00, -2.240437637832e+00, -1.836568002552e+00, 
	-5.606453983092e+00, -4.486394255266e+00, -2.399962935366e+00, -4.564029716602e+00, -4.112422041228e+00, 
	-2.363368745421e+00, -2.268433262413e+00, -5.605458924532e+00, -4.803950706490e+00, -6.579798929003e+00, 
	-6.670212405566e+00, -4.844284850519e+00, -4.793250529100e+00, -6.966201747142e+00, -6.178305986025e+00, 
	-4.842044440413e+00, -6.900893944320e+00, -6.236173811421e+00, -4.989870841131e+00, -5.319691241319e+00, 
	-5.225746884162e+00, -2.300812539039e+00, -6.818875440718e+00, -1.493625125529e+00, -6.080745292709e+00, 
	3.496223251652e-01, 2.013862357870e+00, 4.094492811042e+00, 3.614089136535e+00, 6.693889698521e-01, 
	4.074064803709e+00, 4.860215732368e+00, 2.109326096950e+00, 6.103029040565e+00, 7.783038728282e+00, 
	-9.376718637599e-02, 1.561448103351e+00, 1.894559801577e+00, 5.877291209990e-01, -3.132050813277e-01, 
	9.214569185760e-01, -1.097612329502e-01, 2.076921547640e+00, 2.951525995427e+00, 1.621010328461e+00, 
	5.239383112451e+00, 5.969004889722e+00, 4.180246297174e+00, 7.384578438722e+00, 5.127613670114e+00, 
	8.741500334828e+00, 9.696364216482e+00, 1.013641775097e+01, 1.184551224474e+01, 2.889700030824e+00, 
	-4.441724422377e+00, -4.223586030173e+00, -3.961423081968e+00, -3.636831785069e+00, -3.218927355755e+00, 
	-3.965286534983e+00, -4.802939151981e+00, -4.253013025282e+00, -2.897125607370e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec1, ref, 1.0E-9));
}