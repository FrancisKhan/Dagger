#include <iostream>

#include "gtest/gtest.h"
#include "file_tools.h"
#include "Library.h"
#include "Interpolation.h"
#include "additionalPrintFuncs.h"

class XSMatrixOpsTests : public ::testing::Test 
{
 protected:
	static std::string* url_;
	static std::string* target_;
	static Library* library_;
	static std::vector<std::string>* nucVec_;
	static std::vector < std::shared_ptr<Nuclide> >* nuclides_;

	static void SetUpTestSuite() 
	{
    	library_ = new Library;
		url_ = new std::string("https://www.polymtl.ca/merlin/downloads/libraries/ascii/draglibendfb7r0.gz");
    	target_ =  new std::string(File::getPrePath() + "draglibendfb7r0.gz");
		library_->downloadLibrary(*url_, *target_);
		library_->setXSLibraryPath(*target_);
		nucVec_ = new std::vector<std::string> {"Pu239", "La139"};
		nuclides_ = new std::vector < std::shared_ptr<Nuclide> > {library_->readNuclides(*nucVec_)};
  	}

	static void TearDownTestSuite() 
	{
    	delete library_;
		delete url_;
		delete target_;
		delete nucVec_;
		delete nuclides_;
    	library_ = nullptr;
		url_ = nullptr;
		target_ = nullptr;
		nucVec_ = nullptr;
		nuclides_ = nullptr;
  	}

	virtual void SetUp() {}
  	virtual void TearDown() {}
};

Library* XSMatrixOpsTests::library_ = nullptr;
std::string* XSMatrixOpsTests::url_ = nullptr;
std::string* XSMatrixOpsTests::target_ = nullptr;
std::vector<std::string>* XSMatrixOpsTests::nucVec_ = nullptr;
std::vector < std::shared_ptr<Nuclide> >* XSMatrixOpsTests::nuclides_ = nullptr;

TEST_F(XSMatrixOpsTests, LinLin)
{	
    CrossSectionSet xsSet = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, LinLin(), 1222.5, LinLin()).getValues();

	std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007867185097e+01, 1.926097138677e+01, 2.107365279572e+01, 
	2.043193387393e+01, 2.285978108988e+01, 2.326975277082e+01, 2.879817821284e+01, 2.318669048949e+01, 
	2.152614565564e+01, 3.494730629144e+01, 2.486616944163e+01, 3.535107183658e+01, 5.036321809961e+01, 
	4.427056937743e+01, 4.715545195953e+01, 5.511937425564e+01, 9.907228363346e+01, 1.366020161790e+02, 
	1.281873749027e+02, 1.570777968872e+02, 9.461270092101e+01, 4.896686236148e+01, 1.452162340739e+02, 
	9.290823855058e+00, 1.665519627276e+01, 1.846624697043e+01, 1.128423328521e+01, 8.527948783230e+01, 
	2.703865186265e+01, 1.106121635642e+02, 1.071471598366e+02, 2.926087556926e+02, 1.521544680661e+02, 
	3.321940399883e+02, 1.639375055875e+01, 1.726914237043e+01, 3.833053069961e+02, 2.493304048093e+01, 
	1.690813496693e+01, 1.690392379105e+01, 1.750407382179e+01, 1.825553372957e+01, 1.910790906537e+01, 
	2.001856719805e+01, 2.114888955175e+01, 2.234644504319e+01, 2.277899910467e+01, 2.323677033035e+01, 
	2.397497537354e+01, 2.547078292763e+01, 2.652652732646e+01, 2.704785069300e+01, 2.790357833541e+01, 
	2.892372920817e+01, 3.004178155331e+01, 3.127331952840e+01, 3.263326046848e+01, 3.423850765798e+01, 
	3.545130723230e+01, 3.614424794867e+01, 3.748903092675e+01, 3.892043508376e+01, 4.000905107237e+01, 
	4.179002055827e+01, 4.438517336752e+01, 4.630228982327e+01, 4.749550331715e+01, 4.856355114700e+01, 
	4.929349289068e+01, 5.045309392224e+01, 5.209309090580e+01, 5.331067007048e+01, 5.420428620060e+01, 
	5.568901236533e+01, 5.705783597518e+01, 5.807484734159e+01, 5.974170482143e+01, 6.173097134265e+01, 
	6.392999017083e+01, 6.814968103952e+01, 7.237137237388e+01, 7.818800749169e+01, 8.482249666213e+01, 
	9.532838901093e+01, 1.249671115458e+02, 1.846646800210e+02, 2.690594576647e+02, 3.342887843461e+02, 
	4.695591990281e+02, 7.771210741202e+02, 1.050193970152e+03, 1.696611554224e+03, 3.380539673907e+03, 
	4.560546376369e+03, 5.088578159905e+03, 5.333705073143e+03, 3.995195693015e+03, 2.396519340269e+03, 
	1.509391212284e+03, 1.137734286607e+03, 1.021546786149e+03, 8.741483467518e+02, 8.120321196164e+02, 
	7.653950793689e+02, 7.106562812906e+02, 7.157961164074e+02, 6.767528547300e+02, 6.839973721584e+02, 
	6.250541848433e+02, 7.005332913427e+02, 6.455900730048e+02, 8.150292562350e+02, 8.679323640251e+02, 
	7.704009082192e+02, 9.914110294938e+02, 1.081030206782e+03, 1.209562843116e+03, 1.412975793050e+03, 
	1.699413458492e+03, 2.011656168267e+03, 2.439687274639e+03, 3.767896290835e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, SqrtLogLin)
{	
    CrossSectionSet xsSet = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, Sqrt(), 1222.5, LogLin()).getValues();

	std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007867209151e+01, 1.926096634566e+01, 2.107366036200e+01, 
	2.043164954453e+01, 2.285985950040e+01, 2.326975689633e+01, 2.879818679704e+01, 2.318669068348e+01, 
	2.152614662701e+01, 3.494730198116e+01, 2.486618006070e+01, 3.535106869164e+01, 5.036304316744e+01, 
	4.427083096145e+01, 4.715342984403e+01, 5.511978601922e+01, 9.907292664176e+01, 1.366007901727e+02, 
	1.281854127971e+02, 1.570829248259e+02, 9.461307032082e+01, 4.896650520825e+01, 1.452161690996e+02, 
	9.290830801609e+00, 1.665520087935e+01, 1.846624279884e+01, 1.128434249719e+01, 8.527936425497e+01, 
	2.704102726483e+01, 1.106105544673e+02, 1.071474377403e+02, 2.926082868376e+02, 1.521574190445e+02, 
	3.321894338859e+02, 1.639386626477e+01, 1.726940628563e+01, 3.833029394919e+02, 2.493400015596e+01, 
	1.690814286637e+01, 1.690392800919e+01, 1.750407818784e+01, 1.825553790116e+01, 1.910791294065e+01, 
	2.001856908502e+01, 2.114889192900e+01, 2.234644809550e+01, 2.277900245280e+01, 2.323677402135e+01, 
	2.397497974881e+01, 2.547078898618e+01, 2.652653479138e+01, 2.704785800952e+01, 2.790358419949e+01, 
	2.892373469350e+01, 3.004178820399e+01, 3.127332772367e+01, 3.263327027331e+01, 3.423851740752e+01, 
	3.545131638971e+01, 3.614448653289e+01, 3.748935074688e+01, 3.892085908122e+01, 4.000956575158e+01, 
	4.179065993506e+01, 4.438592245006e+01, 4.630313081221e+01, 4.749645509270e+01, 4.856456848444e+01, 
	4.929469046678e+01, 5.045449732282e+01, 5.209470432522e+01, 5.331252256258e+01, 5.420647663844e+01, 
	5.569169940194e+01, 5.706099722700e+01, 5.807858148078e+01, 5.974525502405e+01, 6.173671061554e+01, 
	6.393476823707e+01, 6.815707639123e+01, 7.237663086463e+01, 7.819691970730e+01, 8.483337809465e+01, 
	9.535162651753e+01, 1.249796724206e+02, 1.846740710011e+02, 2.691052377625e+02, 3.343116019758e+02, 
	4.696156859424e+02, 7.772482825767e+02, 1.050342176476e+03, 1.696792209243e+03, 3.380679282918e+03, 
	4.560637449542e+03, 5.088806159262e+03, 5.333701665571e+03, 3.996054405281e+03, 2.397017692380e+03, 
	1.509544657758e+03, 1.138509634737e+03, 1.021574957483e+03, 8.741746748368e+02, 8.120536837006e+02, 
	7.654054845786e+02, 7.109754179277e+02, 7.158149137281e+02, 6.773100265648e+02, 6.844882341492e+02, 
	6.264622084891e+02, 7.012179235612e+02, 6.474097437439e+02, 8.150352074418e+02, 8.679381692551e+02, 
	7.725121143848e+02, 9.914245596985e+02, 1.081035637571e+03, 1.209568205141e+03, 1.412981583493e+03, 
	1.699419864468e+03, 2.011663480909e+03, 2.439695712877e+03, 3.767907809694e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixLinLin)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrix(300.0, LinLin(), 1222.5, LinLin()).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {5.518682670000e-02, 3.594385090000e-02, 6.433157620000e-02, 
	4.009336610000e-02, 3.918724130000e-02, 2.814282100000e-02, 1.758809200000e-02, 2.552001920000e-02, 
	3.354626150000e-02, 2.366414110000e-02, 2.222497200000e-02, 1.915073390000e-02, 1.226634440000e-02, 
	1.581882500000e-02, 1.400793440000e-02, 7.254477590000e-03, 3.868573810000e-03, 5.558215550000e-03, 
	9.505683560000e-03, 1.438424270000e-02, 1.915855520000e-02, 3.012711370000e-02, 1.569265500000e-02, 
	4.804251720000e-02, 3.929188850000e-02, 2.813378350000e-02, 2.884934280000e-02, -1.744213860000e-03, 
	-4.957551140000e-02, -2.713896890000e-02, -1.126980040000e-02, -3.220964600000e-02, -1.494182066091e-01, 
	-6.105487259496e-02, -1.021296986431e-01, -1.128137553036e-01, -8.162862949875e-02, -2.429518358724e-01, 
	-1.132789092824e-01, -4.218755868410e-01, -2.854766316255e-01, -7.781290503604e-02, -3.143480633669e-01, 
	-1.103251885491e-01, -1.663581231892e-01, -1.726746242829e-01, -1.202584280377e-01, -3.646795012656e-01, 
	-1.000909409635e-01, -7.131603014903e-01, -8.558092418295e-02, -3.063545977111e-01, -1.101223599983e-01, 
	-6.960900415138e-01, -1.966192620979e-01, -1.578406152632e-01, -4.112902658683e-01, -2.560098712461e-01, 
	-3.317099214237e-01, -1.091642372147e-01, -1.599146631740e-01, -1.486963644285e-01, -1.174254917086e-01, 
	-1.015085816730e-01, -4.560331783001e-01, -9.763326922396e-02, -2.881500637595e-01, -2.737100698431e-01, 
	-1.501764478431e-01, -1.672552605969e-01, -3.088011684010e-01, -4.889456368326e-01, -1.250144252277e-01, 
	-2.955417703081e-01, -2.430704768204e-01, -2.581116566260e-01, -2.935927123081e-01, -2.548254165902e-01, 
	-3.756561967330e-01, -1.870418174966e-01, -1.473133130095e-01, -1.165068703492e-01, -1.283638625807e-01, 
	-1.452605483973e-01, -2.914449514086e-01, -2.638922247664e-01, -1.145273569531e-01, -1.107173952196e-01, 
	-1.642084904985e-01, -4.041307827410e-01, -1.217219920740e-01, -7.683242336785e-01, -1.072941093161e-01, 
	-7.586362995598e-01, -6.878236496175e-02, -7.554446971673e-01, -2.796695844086e-01, -7.607715418405e-01, 
	-3.386922170661e-01, -8.030070720272e-02, -5.072113394436e-01, -5.398330838755e-01, -5.085065240973e-01, 
	-5.318359731167e-01, -5.290394042568e-01, -5.204075187938e-01, -5.261435719416e-01, -1.754170785175e-01, 
	-1.949300621899e-01, -6.451054073696e-01, -2.959712635097e-01, -4.011924140623e-01, -6.487376238755e-01, 
	-5.088540964630e-01, -1.602958267630e-01, -1.628546894300e-01, 1.523965688210e-02, 2.062828305097e-01, 
	4.116782131518e-02, -1.904772915894e-01, 4.989437108171e-02, 2.364005691984e-01, -3.164819328794e-02, 
	3.317315024903e-02, 2.324139486693e-01, -1.124176871595e-03, -1.348002409802e-01, -8.564020283152e-02, 
	-5.786824154202e-01, -7.288233923891e-02, -4.963222243969e-01, -8.363770578677e-02, -5.646748417198e-01, 
	-3.521994644747e-01, -3.013263750778e-01, -2.692571361907e-01, -2.501384705914e-01, -7.191650955292e-01, 
	-4.028737131518e-01, -1.720905698128e-01, -7.433416977743e-01, -5.354485601712e-01, -1.148509984101e-01, 
	-3.533238300000e-02, -6.368142577860e-01, -5.977866880973e-01, -2.479920719222e-01, -2.139088040895e-01, 
	-8.615090924864e-02, -2.604683237899e-01, -2.431843654008e-01, -6.951752042568e-02, -2.542699568638e-01, 
	-2.226114259300e-01, -7.198680240117e-02, -2.654914172879e-01, -3.950022023058e-02, -1.343923963280e-01, 
	-2.283333702023e-01, -2.206091246265e-01, -2.341487096965e-01, -2.188222373580e-01, -1.741281178389e-01, 
	-1.871484380257e-01, -2.044566263774e-01, -2.158388858521e-01, -2.150602074202e-01, -1.574838429961e-01, 
	-1.269742981774e-01, -1.479260440658e-01, -1.648321028911e-01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixSqrtLogLin)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin()).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {5.518682670000e-02, 3.594385090000e-02, 6.433157620000e-02, 
	4.009336610000e-02, 3.918724130000e-02, 2.814282100000e-02, 1.758809200000e-02, 2.552001920000e-02, 
	3.354626150000e-02, 2.366414110000e-02, 2.222497200000e-02, 1.915073390000e-02, 1.226634440000e-02, 
	1.581882500000e-02, 1.400793440000e-02, 7.254477590000e-03, 3.868573810000e-03, 5.558215550000e-03, 
	9.505683560000e-03, 1.438424270000e-02, 1.915855520000e-02, 3.012711370000e-02, 1.569265500000e-02, 
	4.804251720000e-02, 3.929188850000e-02, 2.813378350000e-02, 2.884934280000e-02, -1.744213860000e-03, 
	-4.957551140000e-02, -2.713896890000e-02, -1.126980040000e-02, -3.220964600000e-02, -1.494243330316e-01, 
	-6.105845983367e-02, -1.021369512183e-01, -1.128231796631e-01, -8.163706930874e-02, -2.429786038872e-01, 
	-1.132934503240e-01, -4.219320880961e-01, -2.855168848519e-01, -7.782628484891e-02, -3.144047318984e-01, 
	-1.103481912439e-01, -1.663923977934e-01, -1.727178771991e-01, -1.202940598689e-01, -3.647935047689e-01, 
	-1.001194607841e-01, -7.133706307275e-01, -8.561262994959e-02, -3.064215062955e-01, -1.101648933745e-01, 
	-6.964189662602e-01, -1.966632824896e-01, -1.579097835984e-01, -4.117225368423e-01, -2.565702561580e-01, 
	-3.319177578541e-01, -1.093890650667e-01, -1.600003310768e-01, -1.487768931220e-01, -1.176444856766e-01, 
	-1.016021349725e-01, -4.565380445954e-01, -9.771958474898e-02, -2.884998712790e-01, -2.738759875124e-01, 
	-1.505240051453e-01, -1.677445876387e-01, -3.090116376183e-01, -4.890472077152e-01, -1.250230628303e-01, 
	-2.955444276998e-01, -2.430796169167e-01, -2.581154899459e-01, -2.936183809165e-01, -2.548717485156e-01, 
	-3.761741103777e-01, -1.870559113464e-01, -1.475318590755e-01, -1.166640504619e-01, -1.291135939225e-01, 
	-1.453366816414e-01, -2.915118545397e-01, -2.640246262439e-01, -1.149631194408e-01, -1.107528406917e-01, 
	-1.642561482212e-01, -4.042494679768e-01, -1.217624544110e-01, -7.685862847004e-01, -1.072789360443e-01, 
	-7.585174072878e-01, -6.877110618823e-02, -7.545276603728e-01, -2.793769772858e-01, -7.602110379829e-01, 
	-3.388008834770e-01, -8.025274471935e-02, -5.061149233121e-01, -5.394991328570e-01, -5.083216206129e-01, 
	-5.316028487332e-01, -5.288418460432e-01, -5.202003986110e-01, -5.260427252198e-01, -1.751767452221e-01, 
	-1.938891156037e-01, -6.441767805803e-01, -2.954947132938e-01, -4.000334330618e-01, -6.478585518360e-01, 
	-5.086009259012e-01, -1.599732626027e-01, -1.617962989954e-01, 1.565076363411e-02, 2.065104162894e-01, 
	4.199077363822e-02, -1.895733219867e-01, 5.017323881271e-02, 2.367059689960e-01, -3.074616939293e-02, 
	3.352199236510e-02, 2.327056701954e-01, -2.666377574327e-04, -1.339063594655e-01, -8.479549742024e-02, 
	-5.775166538837e-01, -7.263738583463e-02, -4.952680243148e-01, -8.345339325943e-02, -5.638695217402e-01, 
	-3.524136295283e-01, -3.015687131210e-01, -2.693069260857e-01, -2.496816100000e-01, -7.183472884791e-01, 
	-4.028474557363e-01, -1.716282811132e-01, -7.420507020064e-01, -5.353614863890e-01, -1.144762782467e-01, 
	-3.366475467630e-02, -6.353106741998e-01, -5.974583525723e-01, -2.480888530730e-01, -2.139642300742e-01, 
	-8.600617260607e-02, -2.599052182868e-01, -2.430089821940e-01, -6.929967351872e-02, -2.536939640856e-01, 
	-2.224506544999e-01, -7.173333920650e-02, -2.648447863782e-01, -3.933994493124e-02, -1.336003495747e-01, 
	-2.279473573111e-01, -2.202019680833e-01, -2.337437582896e-01, -2.184658110773e-01, -1.737231511452e-01, 
	-1.866183260948e-01, -2.039912315538e-01, -2.154738307439e-01, -2.148392879211e-01, -1.573020293377e-01, 
	-1.266295964998e-01, -1.474469774192e-01, -1.646193708324e-01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSSum)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSection xs3 = xs1 + xs2;

	std::vector<double> ref {1.069214392000e+01, 1.081081629000e+01, 1.080597305000e+01, 
	1.072463608000e+01, 1.066183472000e+01, 1.067996502000e+01, 1.087947607000e+01, 1.118123817000e+01, 
	1.152264023000e+01, 1.216241980000e+01, 1.293947172000e+01, 1.345663595000e+01, 1.378556299000e+01, 
	1.393800497000e+01, 1.399548388000e+01, 1.403996802000e+01, 1.401208067000e+01, 1.393005323000e+01, 
	1.385387802000e+01, 1.379544496000e+01, 1.378044892000e+01, 1.383725118000e+01, 1.407018996000e+01, 
	1.434107352000e+01, 1.448926306000e+01, 1.464472961000e+01, 1.479826307000e+01, 1.510437631000e+01, 
	1.540665390000e+01, 1.554771428000e+01, 1.580632355000e+01, 1.623384090000e+01, 1.654887964000e+01, 
	1.685868551000e+01, 1.738228843000e+01, 1.783207273000e+01, 1.842493201000e+01, 1.891927389000e+01, 
	1.935688492000e+01, 1.980752371000e+01, 2.002894593000e+01, 2.014212494553e+01, 1.949477073969e+01, 
	2.012832933156e+01, 2.042180527117e+01, 2.220083742051e+01, 2.257552812117e+01, 2.206735691883e+01, 
	2.647500451451e+01, 2.618001795459e+01, 3.157585551984e+01, 4.193328431012e+01, 2.343167179541e+01, 
	2.309631447230e+01, 2.617237046755e+01, 3.933213863813e+01, 3.153539423872e+01, 2.608782452564e+01, 
	2.448886694946e+01, 3.812408628144e+01, 2.780985046778e+01, 3.844506385272e+01, 5.368511011961e+01, 
	4.792529568008e+01, 5.105131225074e+01, 5.940243250354e+01, 1.043665306600e+02, 2.514419311323e+02, 
	1.329970213555e+02, 1.622644516804e+02, 9.996915571899e+01, 5.446810459938e+01, 1.509255784254e+02, 
	1.522490160599e+01, 2.278421108482e+01, 2.481710331984e+01, 1.785595686280e+01, 9.207037877953e+01, 
	3.404633262086e+01, 1.178862796541e+02, 1.147831045448e+02, 3.005917735587e+02, 1.604656684249e+02, 
	3.407933819089e+02, 2.516153159720e+01, 2.617843512105e+01, 3.923701248171e+02, 3.421798015930e+01, 
	2.642872723848e+01, 2.655475112035e+01, 2.731415736479e+01, 2.820279430226e+01, 2.916803941829e+01, 
	3.018438078171e+01, 3.142051319339e+01, 3.271792051634e+01, 3.318246270506e+01, 3.367243380350e+01, 
	3.445910989416e+01, 3.604348125175e+01, 3.715628196304e+01, 3.770309946809e+01, 3.859899638249e+01, 
	3.966376932724e+01, 4.082718081984e+01, 4.210469005097e+01, 4.351126112529e+01, 4.516757744553e+01, 
	4.641572836732e+01, 4.712856299419e+01, 4.850828365399e+01, 4.997457784174e+01, 5.108828467237e+01, 
	5.290786510574e+01, 5.555455843444e+01, 5.750719301121e+01, 5.872078187007e+01, 5.980678987190e+01, 
	6.054903294632e+01, 6.172712563586e+01, 6.339238286689e+01, 6.462879185881e+01, 6.553563149515e+01, 
	6.704105589684e+01, 6.842904283666e+01, 6.946046817505e+01, 7.114959912882e+01, 7.316768269518e+01, 
	7.539562775994e+01, 7.967977926948e+01, 8.397210320812e+01, 8.997189040181e+01, 9.700897739481e+01, 
	1.086162610374e+02, 1.371441582586e+02, 1.966189508825e+02, 2.811025459725e+02, 3.463868349274e+02, 
	4.817360488032e+02, 7.894089372552e+02, 1.062543325255e+03, 1.709044391425e+03, 3.393102192164e+03, 
	4.573180476717e+03, 5.101256345452e+03, 5.346464373895e+03, 4.008092625074e+03, 2.409598916430e+03, 
	1.522695090575e+03, 1.151202930227e+03, 1.035170952376e+03, 8.880071676296e+02, 8.260530067662e+02, 
	7.796278558724e+02, 7.252018161864e+02, 7.305527222272e+02, 6.917876360700e+02, 6.992892829651e+02, 
	6.405865808779e+02, 7.164633686832e+02, 6.619616644515e+02, 8.319268042864e+02, 8.854604626457e+02, 
	7.885796720966e+02, 1.010294475841e+03, 1.100841620886e+03, 1.230677490514e+03, 1.436112237299e+03, 
	1.725359343291e+03, 2.040643208876e+03, 2.472831498498e+03, 3.814018031238e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs3.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSDifference)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSection xs3 = xs1 - xs2;

	std::vector<double> ref {1.609936240000e+00, 1.201712130000e+00, 9.835290900000e-01, 
	8.682699200000e-01, 1.030075080000e+00, 1.542323120000e+00, 2.275392050000e+00, 2.740880010000e+00, 
	2.985444070000e+00, 3.136541840000e+00, 2.949741840000e+00, 2.357453830000e+00, 1.608123310000e+00, 
	1.020533090000e+00, 6.389699000000e-01, 1.718840600000e-01, -2.190289500000e-01, -2.743592300000e-01, 
	-1.626358000000e-01, 3.494120000000e-02, 2.920713400000e-01, 6.394610400000e-01, 1.368336200000e+00, 
	2.068901540000e+00, 2.419703000000e+00, 2.778739930000e+00, 3.151289470000e+00, 3.914474010000e+00, 
	4.670265700000e+00, 5.028646520000e+00, 5.680897250000e+00, 6.622518500000e+00, 7.147979760000e+00, 
	7.438593890000e+00, 7.658372370000e+00, 7.821426870000e+00, 8.028007990000e+00, 8.190625710000e+00, 
	8.326455080000e+00, 8.489955890000e+00, 8.542814270000e+00, 9.294415654475e+00, 1.085258986031e+01, 
	1.100549026844e+01, 1.148105532883e+01, 1.075850177949e+01, 1.167273227883e+01, 1.340080188117e+01, 
	1.005809568549e+01, 9.366021645409e+00, 8.581488182101e+00, -3.411341536576e+00, 1.871563379603e+01, 
	1.776755327556e+01, 1.954719171222e+01, 7.207366903502e+00, 2.606096218696e+01, 2.028555645335e+01, 
	1.856342436183e+01, 3.177052630144e+01, 2.192248841549e+01, 3.225707982043e+01, 4.704132607961e+01, 
	4.061584307479e+01, 4.325959166833e+01, 5.083631600774e+01, 9.377803660696e+01, 2.176210122568e+01, 
	1.233777284499e+02, 1.518911420939e+02, 8.925624612304e+01, 4.346562012358e+01, 1.395068897224e+02, 
	3.356746104125e+00, 1.052618146070e+01, 1.211539062101e+01, 4.712509707626e+00, 7.848859688506e+01, 
	2.003097110444e+01, 1.033380474743e+02, 9.951121512837e+01, 2.846257378265e+02, 1.438432677074e+02, 
	3.235946980677e+02, 7.625969520311e+00, 8.359849619805e+00, 3.742404891751e+02, 1.564810080257e+01, 
	7.387542695370e+00, 7.253096461751e+00, 7.693990278794e+00, 8.308273156887e+00, 9.047778712451e+00, 
	9.852753614397e+00, 1.087726591012e+01, 1.197496957004e+01, 1.237553550428e+01, 1.280110685720e+01, 
	1.349084085292e+01, 1.489808460350e+01, 1.589677268988e+01, 1.639260191790e+01, 1.720816028833e+01, 
	1.818368908911e+01, 1.925638228677e+01, 2.044194900584e+01, 2.175525981167e+01, 2.330943787043e+01, 
	2.448688609728e+01, 2.515993290314e+01, 2.646977819952e+01, 2.786629232579e+01, 2.892981747237e+01, 
	3.067217601080e+01, 3.321578830059e+01, 3.509738663534e+01, 3.627022476423e+01, 3.732031242210e+01, 
	3.803795283504e+01, 3.917906220862e+01, 4.079379894471e+01, 4.199254828215e+01, 4.287294090604e+01, 
	4.433696883381e+01, 4.568662911370e+01, 4.668922650813e+01, 4.833381051404e+01, 5.029425999012e+01, 
	5.246435258173e+01, 5.661958280956e+01, 6.077064153963e+01, 6.640412458158e+01, 7.263601592944e+01, 
	8.204051698448e+01, 1.127900648329e+02, 1.727104091596e+02, 2.570163693569e+02, 3.221907337648e+02, 
	4.573823492530e+02, 7.648332109852e+02, 1.037844615048e+03, 1.684178717023e+03, 3.367977155650e+03, 
	4.547912276021e+03, 5.075899974358e+03, 5.320945772391e+03, 3.982298760956e+03, 2.383439764109e+03, 
	1.496087333993e+03, 1.124265642988e+03, 1.007922619921e+03, 8.602895258740e+02, 7.980112324666e+02, 
	7.511623028654e+02, 6.961107463949e+02, 7.010395105875e+02, 6.617180733899e+02, 6.687054613518e+02, 
	6.095217888086e+02, 6.846032140022e+02, 6.292184815581e+02, 7.981317081837e+02, 8.504042654044e+02, 
	7.522221443417e+02, 9.725275831467e+02, 1.061218792678e+03, 1.188448195718e+03, 1.389839348801e+03, 
	1.673467573693e+03, 1.982669127657e+03, 2.406543050779e+03, 3.721774550432e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs3.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSSumEqual)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	xs1 += xs2;

	std::vector<double> ref {1.069214392000e+01, 1.081081629000e+01, 1.080597305000e+01, 
	1.072463608000e+01, 1.066183472000e+01, 1.067996502000e+01, 1.087947607000e+01, 1.118123817000e+01, 
	1.152264023000e+01, 1.216241980000e+01, 1.293947172000e+01, 1.345663595000e+01, 1.378556299000e+01, 
	1.393800497000e+01, 1.399548388000e+01, 1.403996802000e+01, 1.401208067000e+01, 1.393005323000e+01, 
	1.385387802000e+01, 1.379544496000e+01, 1.378044892000e+01, 1.383725118000e+01, 1.407018996000e+01, 
	1.434107352000e+01, 1.448926306000e+01, 1.464472961000e+01, 1.479826307000e+01, 1.510437631000e+01, 
	1.540665390000e+01, 1.554771428000e+01, 1.580632355000e+01, 1.623384090000e+01, 1.654887964000e+01, 
	1.685868551000e+01, 1.738228843000e+01, 1.783207273000e+01, 1.842493201000e+01, 1.891927389000e+01, 
	1.935688492000e+01, 1.980752371000e+01, 2.002894593000e+01, 2.014212494553e+01, 1.949477073969e+01, 
	2.012832933156e+01, 2.042180527117e+01, 2.220083742051e+01, 2.257552812117e+01, 2.206735691883e+01, 
	2.647500451451e+01, 2.618001795459e+01, 3.157585551984e+01, 4.193328431012e+01, 2.343167179541e+01, 
	2.309631447230e+01, 2.617237046755e+01, 3.933213863813e+01, 3.153539423872e+01, 2.608782452564e+01, 
	2.448886694946e+01, 3.812408628144e+01, 2.780985046778e+01, 3.844506385272e+01, 5.368511011961e+01, 
	4.792529568008e+01, 5.105131225074e+01, 5.940243250354e+01, 1.043665306600e+02, 2.514419311323e+02, 
	1.329970213555e+02, 1.622644516804e+02, 9.996915571899e+01, 5.446810459938e+01, 1.509255784254e+02, 
	1.522490160599e+01, 2.278421108482e+01, 2.481710331984e+01, 1.785595686280e+01, 9.207037877953e+01, 
	3.404633262086e+01, 1.178862796541e+02, 1.147831045448e+02, 3.005917735587e+02, 1.604656684249e+02, 
	3.407933819089e+02, 2.516153159720e+01, 2.617843512105e+01, 3.923701248171e+02, 3.421798015930e+01, 
	2.642872723848e+01, 2.655475112035e+01, 2.731415736479e+01, 2.820279430226e+01, 2.916803941829e+01, 
	3.018438078171e+01, 3.142051319339e+01, 3.271792051634e+01, 3.318246270506e+01, 3.367243380350e+01, 
	3.445910989416e+01, 3.604348125175e+01, 3.715628196304e+01, 3.770309946809e+01, 3.859899638249e+01, 
	3.966376932724e+01, 4.082718081984e+01, 4.210469005097e+01, 4.351126112529e+01, 4.516757744553e+01, 
	4.641572836732e+01, 4.712856299419e+01, 4.850828365399e+01, 4.997457784174e+01, 5.108828467237e+01, 
	5.290786510574e+01, 5.555455843444e+01, 5.750719301121e+01, 5.872078187007e+01, 5.980678987190e+01, 
	6.054903294632e+01, 6.172712563586e+01, 6.339238286689e+01, 6.462879185881e+01, 6.553563149515e+01, 
	6.704105589684e+01, 6.842904283666e+01, 6.946046817505e+01, 7.114959912882e+01, 7.316768269518e+01, 
	7.539562775994e+01, 7.967977926948e+01, 8.397210320812e+01, 8.997189040181e+01, 9.700897739481e+01, 
	1.086162610374e+02, 1.371441582586e+02, 1.966189508825e+02, 2.811025459725e+02, 3.463868349274e+02, 
	4.817360488032e+02, 7.894089372552e+02, 1.062543325255e+03, 1.709044391425e+03, 3.393102192164e+03, 
	4.573180476717e+03, 5.101256345452e+03, 5.346464373895e+03, 4.008092625074e+03, 2.409598916430e+03, 
	1.522695090575e+03, 1.151202930227e+03, 1.035170952376e+03, 8.880071676296e+02, 8.260530067662e+02, 
	7.796278558724e+02, 7.252018161864e+02, 7.305527222272e+02, 6.917876360700e+02, 6.992892829651e+02, 
	6.405865808779e+02, 7.164633686832e+02, 6.619616644515e+02, 8.319268042864e+02, 8.854604626457e+02, 
	7.885796720966e+02, 1.010294475841e+03, 1.100841620886e+03, 1.230677490514e+03, 1.436112237299e+03, 
	1.725359343291e+03, 2.040643208876e+03, 2.472831498498e+03, 3.814018031238e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs1.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSDifferenceEqual)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	xs1 -= xs2;

	std::vector<double> ref {1.609936240000e+00, 1.201712130000e+00, 9.835290900000e-01, 
	8.682699200000e-01, 1.030075080000e+00, 1.542323120000e+00, 2.275392050000e+00, 2.740880010000e+00, 
	2.985444070000e+00, 3.136541840000e+00, 2.949741840000e+00, 2.357453830000e+00, 1.608123310000e+00, 
	1.020533090000e+00, 6.389699000000e-01, 1.718840600000e-01, -2.190289500000e-01, -2.743592300000e-01, 
	-1.626358000000e-01, 3.494120000000e-02, 2.920713400000e-01, 6.394610400000e-01, 1.368336200000e+00, 
	2.068901540000e+00, 2.419703000000e+00, 2.778739930000e+00, 3.151289470000e+00, 3.914474010000e+00, 
	4.670265700000e+00, 5.028646520000e+00, 5.680897250000e+00, 6.622518500000e+00, 7.147979760000e+00, 
	7.438593890000e+00, 7.658372370000e+00, 7.821426870000e+00, 8.028007990000e+00, 8.190625710000e+00, 
	8.326455080000e+00, 8.489955890000e+00, 8.542814270000e+00, 9.294415654475e+00, 1.085258986031e+01, 
	1.100549026844e+01, 1.148105532883e+01, 1.075850177949e+01, 1.167273227883e+01, 1.340080188117e+01, 
	1.005809568549e+01, 9.366021645409e+00, 8.581488182101e+00, -3.411341536576e+00, 1.871563379603e+01, 
	1.776755327556e+01, 1.954719171222e+01, 7.207366903502e+00, 2.606096218696e+01, 2.028555645335e+01, 
	1.856342436183e+01, 3.177052630144e+01, 2.192248841549e+01, 3.225707982043e+01, 4.704132607961e+01, 
	4.061584307479e+01, 4.325959166833e+01, 5.083631600774e+01, 9.377803660696e+01, 2.176210122568e+01, 
	1.233777284499e+02, 1.518911420939e+02, 8.925624612304e+01, 4.346562012358e+01, 1.395068897224e+02, 
	3.356746104125e+00, 1.052618146070e+01, 1.211539062101e+01, 4.712509707626e+00, 7.848859688506e+01, 
	2.003097110444e+01, 1.033380474743e+02, 9.951121512837e+01, 2.846257378265e+02, 1.438432677074e+02, 
	3.235946980677e+02, 7.625969520311e+00, 8.359849619805e+00, 3.742404891751e+02, 1.564810080257e+01, 
	7.387542695370e+00, 7.253096461751e+00, 7.693990278794e+00, 8.308273156887e+00, 9.047778712451e+00, 
	9.852753614397e+00, 1.087726591012e+01, 1.197496957004e+01, 1.237553550428e+01, 1.280110685720e+01, 
	1.349084085292e+01, 1.489808460350e+01, 1.589677268988e+01, 1.639260191790e+01, 1.720816028833e+01, 
	1.818368908911e+01, 1.925638228677e+01, 2.044194900584e+01, 2.175525981167e+01, 2.330943787043e+01, 
	2.448688609728e+01, 2.515993290314e+01, 2.646977819952e+01, 2.786629232579e+01, 2.892981747237e+01, 
	3.067217601080e+01, 3.321578830059e+01, 3.509738663534e+01, 3.627022476423e+01, 3.732031242210e+01, 
	3.803795283504e+01, 3.917906220862e+01, 4.079379894471e+01, 4.199254828215e+01, 4.287294090604e+01, 
	4.433696883381e+01, 4.568662911370e+01, 4.668922650813e+01, 4.833381051404e+01, 5.029425999012e+01, 
	5.246435258173e+01, 5.661958280956e+01, 6.077064153963e+01, 6.640412458158e+01, 7.263601592944e+01, 
	8.204051698448e+01, 1.127900648329e+02, 1.727104091596e+02, 2.570163693569e+02, 3.221907337648e+02, 
	4.573823492530e+02, 7.648332109852e+02, 1.037844615048e+03, 1.684178717023e+03, 3.367977155650e+03, 
	4.547912276021e+03, 5.075899974358e+03, 5.320945772391e+03, 3.982298760956e+03, 2.383439764109e+03, 
	1.496087333993e+03, 1.124265642988e+03, 1.007922619921e+03, 8.602895258740e+02, 7.980112324666e+02, 
	7.511623028654e+02, 6.961107463949e+02, 7.010395105875e+02, 6.617180733899e+02, 6.687054613518e+02, 
	6.095217888086e+02, 6.846032140022e+02, 6.292184815581e+02, 7.981317081837e+02, 8.504042654044e+02, 
	7.522221443417e+02, 9.725275831467e+02, 1.061218792678e+03, 1.188448195718e+03, 1.389839348801e+03, 
	1.673467573693e+03, 1.982669127657e+03, 2.406543050779e+03, 3.721774550432e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs1.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixSum)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());

	CrossSectionMatrix mat3 = mat1 + mat2;
	std::vector<double> vec3 = Numerics::eigenVecTOStdVec(mat3.getValues().diagonal(0)); 

	std::vector<double> ref {9.394885070000e+00, 9.426134110000e+00, 9.337042330000e+00, 
	9.072159530000e+00, 8.343547590000e+00, 7.782719610000e+00, 7.973369840000e+00, 8.136422400000e+00, 
	8.419189460000e+00, 9.059902660000e+00, 9.795231340000e+00, 1.022897387000e+01, 1.046437884000e+01, 
	1.044608856000e+01, 1.048041558000e+01, 1.073670268000e+01, 1.081697989000e+01, 1.069879365000e+01, 
	1.070913601000e+01, 1.070034456000e+01, 1.074039745000e+01, 1.083957815000e+01, 1.154867315000e+01, 
	1.142340565000e+01, 1.162905645000e+01, 1.180840492000e+01, 1.196104955000e+01, 1.279423380000e+01, 
	1.253373098000e+01, 1.268136406000e+01, 1.345432568000e+01, 1.397940493000e+01, 1.351489598771e+01, 
	1.451332551405e+01, 1.480080705088e+01, 1.517611319944e+01, 1.591123072346e+01, 1.558096696237e+01, 
	1.640658866339e+01, 1.582177017925e+01, 1.644937404404e+01, 1.710267178966e+01, 1.547957678024e+01, 
	1.660732761443e+01, 1.651435829210e+01, 1.787405427302e+01, 1.825107741567e+01, 1.653310903050e+01, 
	2.126580812653e+01, 1.931120206409e+01, 2.469974306378e+01, 3.398227044148e+01, 1.527675737530e+01, 
	1.287486820061e+01, 1.545258696557e+01, 2.851109193398e+01, 1.636362044925e+01, 1.516399510334e+01, 
	1.418462092680e+01, 1.810174331185e+01, 1.430859655099e+01, 1.713030738202e+01, 1.866146539414e+01, 
	1.683234986675e+01, 1.534863352932e+01, 1.740683272874e+01, 2.183429300720e+01, 6.310067735332e+01, 
	1.588367091782e+01, 2.527846487987e+01, 1.591069317546e+01, 1.307713370301e+01, 1.970763070845e+01, 
	1.232381767663e+01, 1.375098381025e+01, 1.448507333405e+01, 1.545401432592e+01, 1.627763201688e+01, 
	1.679235112183e+01, 1.634894242275e+01, 1.822753855081e+01, 1.848835759609e+01, 1.780902743973e+01, 
	1.453367793244e+01, 1.498243095640e+01, 1.648661798455e+01, 1.761587447119e+01, 1.577140699833e+01, 
	1.676657587541e+01, 1.636337019825e+01, 1.753463352719e+01, 1.581152337693e+01, 1.765046283795e+01, 
	1.415427095284e+01, 1.796377489205e+01, 1.369155931765e+01, 1.622111946389e+01, 1.372789685154e+01, 
	1.739872046681e+01, 1.784537370795e+01, 1.281247979208e+01, 1.574886041961e+01, 1.638723008127e+01, 
	1.740004087068e+01, 1.755425094182e+01, 1.769230333918e+01, 1.765758023827e+01, 1.807667837078e+01, 
	1.431707056812e+01, 1.551696596307e+01, 1.760417940035e+01, 1.548432113682e+01, 1.595934470197e+01, 
	1.771121600833e+01, 1.783276778065e+01, 1.450326839885e+01, 1.534282010520e+01, 1.348352038491e+01, 
	1.337965399126e+01, 1.532713686267e+01, 1.539166302587e+01, 1.310869701802e+01, 1.395497800336e+01, 
	1.537817132410e+01, 1.320526603764e+01, 1.392095086657e+01, 1.525004485855e+01, 1.490001928201e+01, 
	1.501803643391e+01, 1.797926999920e+01, 1.334798223619e+01, 1.879595438582e+01, 1.453937642849e+01, 
	2.061901119688e+01, 2.310457000751e+01, 2.479956525131e+01, 2.413551504449e+01, 2.120429766205e+01, 
	2.337146271475e+01, 2.552036783454e+01, 2.269215753052e+01, 2.437022115830e+01, 2.903558934706e+01, 
	1.809059332524e+01, 2.279085972820e+01, 2.260267758015e+01, 2.105094883371e+01, 2.053598145840e+01, 
	2.176843143812e+01, 2.078656850354e+01, 2.259838046582e+01, 2.388735467423e+01, 2.253223704391e+01, 
	2.619834619167e+01, 2.656047710456e+01, 2.473411502573e+01, 2.839425357034e+01, 2.604853073150e+01, 
	2.979061896537e+01, 3.075805637574e+01, 2.518933167002e+01, 3.293156614288e+01, 1.716676172981e+01, 
	1.626293139584e+01, 1.650063929558e+01, 1.678555245798e+01, 1.713824034717e+01, 1.759545607411e+01, 
	1.693453116020e+01, 1.617526960882e+01, 1.690118408461e+01, 1.897564895346e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec3, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixDifference)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());

	CrossSectionMatrix mat3 = mat1 - mat2;
	std::vector<double> vec3 = Numerics::eigenVecTOStdVec(mat3.getValues().diagonal(0)); 

	std::vector<double> ref {-3.069738390000e+00, -3.297632210000e+00, -3.440834530000e+00, 
	-3.205633410000e+00, -2.491718530000e+00, -1.436530110000e+00, -6.302068200000e-01, -3.033073000000e-01, 
	-1.170730600000e-01, 3.567362000000e-02, -1.909957000000e-01, -8.633198700000e-01, -1.702603820000e+00, 
	-2.458420040000e+00, -2.861345060000e+00, -3.113877540000e+00, -3.394208430000e+00, -3.485735650000e+00, 
	-3.288172730000e+00, -3.042146200000e+00, -2.730944630000e+00, -2.341927050000e+00, -1.137879850000e+00, 
	-8.339843700000e-01, -4.257874500000e-01, -4.284954000000e-02, 3.289561300000e-01, 1.619859220000e+00, 
	1.813893800000e+00, 2.179540640000e+00, 3.348462100000e+00, 4.395349030000e+00, 4.146077707711e+00, 
	5.129944634052e+00, 5.119155930883e+00, 5.212983199436e+00, 5.569799103460e+00, 4.915502562372e+00, 
	5.447160823388e+00, 4.583070259252e+00, 5.047033164039e+00, 6.335367929406e+00, 6.895806579337e+00, 
	7.574793993723e+00, 7.694616436791e+00, 6.756080747559e+00, 7.574759788784e+00, 8.094299537133e+00, 
	5.073426775465e+00, 2.857501362101e+00, 2.049499426995e+00, -1.009974961987e+01, 1.077036295874e+01, 
	7.573510004889e+00, 9.154081277206e+00, -2.850703358741e+00, 1.144617922658e+01, 9.921273543343e+00, 
	8.821709874931e+00, 1.225334497387e+01, 8.423303070987e+00, 1.098471031025e+01, 1.205514773617e+01, 
	9.534764311542e+00, 7.574941615175e+00, 8.876990165202e+00, 1.151402567826e+01, -3.358506697863e+01, 
	6.538794628692e+00, 1.504284996642e+01, 5.331997313339e+00, 2.211430031238e+00, 8.435165990765e+00, 
	6.163819262719e-01, 1.669424847608e+00, 1.980593833796e+00, 2.531369472289e+00, 2.942866098743e+00, 
	3.052779840155e+00, 2.116237202555e+00, 3.333401479946e+00, 2.969795543617e+00, 1.712154816643e+00, 
	-2.060246359330e+00, -1.896049203406e+00, -6.267213907572e-01, 2.489511765227e-01, -1.944189952726e+00, 
	-1.308282920413e+00, -1.902325088819e+00, -9.540414001368e-01, -2.862556472267e+00, -1.167493355037e+00, 
	-4.793826967479e+00, -1.106515079785e+00, -5.489699824090e+00, -2.993747709098e+00, -5.520708052062e+00, 
	-1.898600954476e+00, -1.537320630957e+00, -6.622508059299e+00, -3.708792899808e+00, -3.105427999378e+00, 
	-2.129867156974e+00, -2.012033430588e+00, -1.909480039595e+00, -1.978786749444e+00, -1.595565711982e+00, 
	-5.379306518438e+00, -4.192172017635e+00, -2.127348386731e+00, -4.268930777266e+00, -3.808861872377e+00, 
	-2.079025899129e+00, -1.985403790863e+00, -5.333098841601e+00, -4.503704692934e+00, -6.371628389950e+00, 
	-6.481135251637e+00, -4.542108681120e+00, -4.488850217217e+00, -6.779614444358e+00, -5.938777650597e+00, 
	-4.524069128189e+00, -6.704350929753e+00, -5.993906377225e+00, -4.672681122931e+00, -5.031878443910e+00, 
	-4.922596214194e+00, -1.976793453602e+00, -6.621146717761e+00, -1.188737420868e+00, -5.460588552867e+00, 
	5.999667535309e-01, 3.051011986292e+00, 4.709000730151e+00, 4.017170928225e+00, 1.073616659993e+00, 
	3.225354575447e+00, 5.354988096905e+00, 2.517231020424e+00, 4.183606427489e+00, 8.832571439141e+00, 
	-2.120611692124e+00, 2.574943804719e+00, 2.378590141819e+00, 8.143956994192e-01, 2.849759102212e-01, 
	1.502474580496e+00, 5.110181282272e-01, 2.314901758936e+00, 3.593297605145e+00, 2.231622814190e+00, 
	5.890128993335e+00, 6.242291057466e+00, 4.409900025842e+00, 8.062857885314e+00, 5.710925998880e+00, 
	9.447653842919e+00, 1.040673489675e+01, 4.829319419702e+00, 1.256167281052e+01, -3.214666847200e+00, 
	-4.130363155315e+00, -3.905724696877e+00, -3.638694110678e+00, -3.312856912827e+00, -2.902236518137e+00, 
	-3.638431984876e+00, -4.493977828541e+00, -3.927080152718e+00, -2.653675334729e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec3, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixSumEqual)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());

	mat1 += mat2;

	std::vector<double> vec1 = Numerics::eigenVecTOStdVec(mat1.getValues().diagonal(0)); 

	std::vector<double> ref {9.394885070000e+00, 9.426134110000e+00, 9.337042330000e+00, 
	9.072159530000e+00, 8.343547590000e+00, 7.782719610000e+00, 7.973369840000e+00, 8.136422400000e+00, 
	8.419189460000e+00, 9.059902660000e+00, 9.795231340000e+00, 1.022897387000e+01, 1.046437884000e+01, 
	1.044608856000e+01, 1.048041558000e+01, 1.073670268000e+01, 1.081697989000e+01, 1.069879365000e+01, 
	1.070913601000e+01, 1.070034456000e+01, 1.074039745000e+01, 1.083957815000e+01, 1.154867315000e+01, 
	1.142340565000e+01, 1.162905645000e+01, 1.180840492000e+01, 1.196104955000e+01, 1.279423380000e+01, 
	1.253373098000e+01, 1.268136406000e+01, 1.345432568000e+01, 1.397940493000e+01, 1.351489598771e+01, 
	1.451332551405e+01, 1.480080705088e+01, 1.517611319944e+01, 1.591123072346e+01, 1.558096696237e+01, 
	1.640658866339e+01, 1.582177017925e+01, 1.644937404404e+01, 1.710267178966e+01, 1.547957678024e+01, 
	1.660732761443e+01, 1.651435829210e+01, 1.787405427302e+01, 1.825107741567e+01, 1.653310903050e+01, 
	2.126580812653e+01, 1.931120206409e+01, 2.469974306378e+01, 3.398227044148e+01, 1.527675737530e+01, 
	1.287486820061e+01, 1.545258696557e+01, 2.851109193398e+01, 1.636362044925e+01, 1.516399510334e+01, 
	1.418462092680e+01, 1.810174331185e+01, 1.430859655099e+01, 1.713030738202e+01, 1.866146539414e+01, 
	1.683234986675e+01, 1.534863352932e+01, 1.740683272874e+01, 2.183429300720e+01, 6.310067735332e+01, 
	1.588367091782e+01, 2.527846487987e+01, 1.591069317546e+01, 1.307713370301e+01, 1.970763070845e+01, 
	1.232381767663e+01, 1.375098381025e+01, 1.448507333405e+01, 1.545401432592e+01, 1.627763201688e+01, 
	1.679235112183e+01, 1.634894242275e+01, 1.822753855081e+01, 1.848835759609e+01, 1.780902743973e+01, 
	1.453367793244e+01, 1.498243095640e+01, 1.648661798455e+01, 1.761587447119e+01, 1.577140699833e+01, 
	1.676657587541e+01, 1.636337019825e+01, 1.753463352719e+01, 1.581152337693e+01, 1.765046283795e+01, 
	1.415427095284e+01, 1.796377489205e+01, 1.369155931765e+01, 1.622111946389e+01, 1.372789685154e+01, 
	1.739872046681e+01, 1.784537370795e+01, 1.281247979208e+01, 1.574886041961e+01, 1.638723008127e+01, 
	1.740004087068e+01, 1.755425094182e+01, 1.769230333918e+01, 1.765758023827e+01, 1.807667837078e+01, 
	1.431707056812e+01, 1.551696596307e+01, 1.760417940035e+01, 1.548432113682e+01, 1.595934470197e+01, 
	1.771121600833e+01, 1.783276778065e+01, 1.450326839885e+01, 1.534282010520e+01, 1.348352038491e+01, 
	1.337965399126e+01, 1.532713686267e+01, 1.539166302587e+01, 1.310869701802e+01, 1.395497800336e+01, 
	1.537817132410e+01, 1.320526603764e+01, 1.392095086657e+01, 1.525004485855e+01, 1.490001928201e+01, 
	1.501803643391e+01, 1.797926999920e+01, 1.334798223619e+01, 1.879595438582e+01, 1.453937642849e+01, 
	2.061901119688e+01, 2.310457000751e+01, 2.479956525131e+01, 2.413551504449e+01, 2.120429766205e+01, 
	2.337146271475e+01, 2.552036783454e+01, 2.269215753052e+01, 2.437022115830e+01, 2.903558934706e+01, 
	1.809059332524e+01, 2.279085972820e+01, 2.260267758015e+01, 2.105094883371e+01, 2.053598145840e+01, 
	2.176843143812e+01, 2.078656850354e+01, 2.259838046582e+01, 2.388735467423e+01, 2.253223704391e+01, 
	2.619834619167e+01, 2.656047710456e+01, 2.473411502573e+01, 2.839425357034e+01, 2.604853073150e+01, 
	2.979061896537e+01, 3.075805637574e+01, 2.518933167002e+01, 3.293156614288e+01, 1.716676172981e+01, 
	1.626293139584e+01, 1.650063929558e+01, 1.678555245798e+01, 1.713824034717e+01, 1.759545607411e+01, 
	1.693453116020e+01, 1.617526960882e+01, 1.690118408461e+01, 1.897564895346e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec1, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixDifferenceEqual)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	std::vector<double> vec2 = Numerics::eigenVecTOStdVec(mat2.getValues().diagonal(0)); 

	mat1 -= mat2;
	std::vector<double> vec1 = Numerics::eigenVecTOStdVec(mat1.getValues().diagonal(0)); 

	// PrintFuncs::createCppVector(vec1, "%13.12e");

	// std::cout << std::scientific << std::endl;
	// for(size_t i = 0; i < vec1.size(); i ++)
	// std::cout << vec0[i] << " " << vec2[i] << " " << vec1[i] << std::endl;

	std::vector<double> ref {-3.069738390000e+00, -3.297632210000e+00, -3.440834530000e+00, 
	-3.205633410000e+00, -2.491718530000e+00, -1.436530110000e+00, -6.302068200000e-01, -3.033073000000e-01, 
	-1.170730600000e-01, 3.567362000000e-02, -1.909957000000e-01, -8.633198700000e-01, -1.702603820000e+00, 
	-2.458420040000e+00, -2.861345060000e+00, -3.113877540000e+00, -3.394208430000e+00, -3.485735650000e+00, 
	-3.288172730000e+00, -3.042146200000e+00, -2.730944630000e+00, -2.341927050000e+00, -1.137879850000e+00, 
	-8.339843700000e-01, -4.257874500000e-01, -4.284954000000e-02, 3.289561300000e-01, 1.619859220000e+00, 
	1.813893800000e+00, 2.179540640000e+00, 3.348462100000e+00, 4.395349030000e+00, 4.146077707711e+00, 
	5.129944634052e+00, 5.119155930883e+00, 5.212983199436e+00, 5.569799103460e+00, 4.915502562372e+00, 
	5.447160823388e+00, 4.583070259252e+00, 5.047033164039e+00, 6.335367929406e+00, 6.895806579337e+00, 
	7.574793993723e+00, 7.694616436791e+00, 6.756080747559e+00, 7.574759788784e+00, 8.094299537133e+00, 
	5.073426775465e+00, 2.857501362101e+00, 2.049499426995e+00, -1.009974961987e+01, 1.077036295874e+01, 
	7.573510004889e+00, 9.154081277206e+00, -2.850703358741e+00, 1.144617922658e+01, 9.921273543343e+00, 
	8.821709874931e+00, 1.225334497387e+01, 8.423303070987e+00, 1.098471031025e+01, 1.205514773617e+01, 
	9.534764311542e+00, 7.574941615175e+00, 8.876990165202e+00, 1.151402567826e+01, -3.358506697863e+01, 
	6.538794628692e+00, 1.504284996642e+01, 5.331997313339e+00, 2.211430031238e+00, 8.435165990765e+00, 
	6.163819262719e-01, 1.669424847608e+00, 1.980593833796e+00, 2.531369472289e+00, 2.942866098743e+00, 
	3.052779840155e+00, 2.116237202555e+00, 3.333401479946e+00, 2.969795543617e+00, 1.712154816643e+00, 
	-2.060246359330e+00, -1.896049203406e+00, -6.267213907572e-01, 2.489511765227e-01, -1.944189952726e+00, 
	-1.308282920413e+00, -1.902325088819e+00, -9.540414001368e-01, -2.862556472267e+00, -1.167493355037e+00, 
	-4.793826967479e+00, -1.106515079785e+00, -5.489699824090e+00, -2.993747709098e+00, -5.520708052062e+00, 
	-1.898600954476e+00, -1.537320630957e+00, -6.622508059299e+00, -3.708792899808e+00, -3.105427999378e+00, 
	-2.129867156974e+00, -2.012033430588e+00, -1.909480039595e+00, -1.978786749444e+00, -1.595565711982e+00, 
	-5.379306518438e+00, -4.192172017635e+00, -2.127348386731e+00, -4.268930777266e+00, -3.808861872377e+00, 
	-2.079025899129e+00, -1.985403790863e+00, -5.333098841601e+00, -4.503704692934e+00, -6.371628389950e+00, 
	-6.481135251637e+00, -4.542108681120e+00, -4.488850217217e+00, -6.779614444358e+00, -5.938777650597e+00, 
	-4.524069128189e+00, -6.704350929753e+00, -5.993906377225e+00, -4.672681122931e+00, -5.031878443910e+00, 
	-4.922596214194e+00, -1.976793453602e+00, -6.621146717761e+00, -1.188737420868e+00, -5.460588552867e+00, 
	5.999667535309e-01, 3.051011986292e+00, 4.709000730151e+00, 4.017170928225e+00, 1.073616659993e+00, 
	3.225354575447e+00, 5.354988096905e+00, 2.517231020424e+00, 4.183606427489e+00, 8.832571439141e+00, 
	-2.120611692124e+00, 2.574943804719e+00, 2.378590141819e+00, 8.143956994192e-01, 2.849759102212e-01, 
	1.502474580496e+00, 5.110181282272e-01, 2.314901758936e+00, 3.593297605145e+00, 2.231622814190e+00, 
	5.890128993335e+00, 6.242291057466e+00, 4.409900025842e+00, 8.062857885314e+00, 5.710925998880e+00, 
	9.447653842919e+00, 1.040673489675e+01, 4.829319419702e+00, 1.256167281052e+01, -3.214666847200e+00, 
	-4.130363155315e+00, -3.905724696877e+00, -3.638694110678e+00, -3.312856912827e+00, -2.902236518137e+00, 
	-3.638431984876e+00, -4.493977828541e+00, -3.927080152718e+00, -2.653675334729e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec1, ref, 1.0E-9));
}