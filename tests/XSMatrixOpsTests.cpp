#include <iostream>

#include "gtest/gtest.h"
#include "file_tools.h"
#include "Library.h"
#include "Interpolation.h"
#include "additionalPrintFuncs.h"

class XSMatrixOpsTests : public ::testing::Test 
{
 protected:
	static std::string* url_;
	static std::string* target_;
	static Library* library_;
	static std::vector<std::string>* nucVec_;
	static std::vector < std::shared_ptr<Nuclide> >* nuclides_;

	static void SetUpTestSuite() 
	{
    	library_ = new Library;
		url_ = new std::string("http://merlin.polymtl.ca/downloads/libraries/ascii/draglibendfb7r0.gz");
    	target_ =  new std::string(File::getPrePath() + "draglibendfb7r0.gz");
		library_->downloadLibrary(*url_, *target_);
		library_->setXSLibraryPath(*target_);
		nucVec_ = new std::vector<std::string> {"Pu239", "La139", "U238"};
		nuclides_ = new std::vector < std::shared_ptr<Nuclide> > {library_->readNuclides(*nucVec_)};
  	}

	static void TearDownTestSuite() 
	{
    	delete library_;
		delete url_;
		delete target_;
		delete nucVec_;
		delete nuclides_;
    	library_ = nullptr;
		url_ = nullptr;
		target_ = nullptr;
		nucVec_ = nullptr;
		nuclides_ = nullptr;
  	}

	virtual void SetUp() {}
  	virtual void TearDown() {}
};

Library* XSMatrixOpsTests::library_ = nullptr;
std::string* XSMatrixOpsTests::url_ = nullptr;
std::string* XSMatrixOpsTests::target_ = nullptr;
std::vector<std::string>* XSMatrixOpsTests::nucVec_ = nullptr;
std::vector < std::shared_ptr<Nuclide> >* XSMatrixOpsTests::nuclides_ = nullptr;

TEST_F(XSMatrixOpsTests, LinLin)
{	
    CrossSectionSet xsSet = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, LinLin(), 1222.5, LinLin()).getValues();

	std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842969986e+01, 
	1.214862347811e+01, 1.252033040111e+01, 1.282673979853e+01, 1.322645377667e+01, 1.355494357709e+01, 
	1.384198435488e+01, 1.414926669622e+01, 1.428577587066e+01, 1.471716731946e+01, 1.517126849558e+01, 
	1.556258208305e+01, 1.594398271245e+01, 1.646766594750e+01, 1.710363858986e+01, 1.770598208429e+01, 
	1.822542182699e+01, 1.772944818500e+01, 1.999358115401e+01, 1.919842339636e+01, 2.094168223359e+01, 
	2.037907766557e+01, 2.271351966357e+01, 2.305063528382e+01, 2.820330744148e+01, 2.289984294751e+01, 
	2.138712284855e+01, 3.366245479644e+01, 2.441577187045e+01, 3.393379846429e+01, 4.703850843390e+01, 
	3.998362539282e+01, 4.426935462047e+01, 5.006062915134e+01, 8.381218233040e+01, 9.274132635313e+01, 
	1.138656329744e+02, 1.027989070040e+02, 7.929044639796e+01, 4.663980668392e+01, 1.042615245384e+02, 
	9.290879165062e+00, 1.638365579364e+01, 1.824814862665e+01, 1.128390413545e+01, 7.164639792391e+01, 
	2.685254599259e+01, 7.777263832985e+01, 7.795466192802e+01, 2.260977977825e+02, 1.158409701379e+02, 
	2.424530305612e+02, 1.639170824766e+01, 1.726348806473e+01, 2.784349938802e+02, 2.482757616372e+01, 
	1.690811259560e+01, 1.690392389740e+01, 1.750399541842e+01, 1.825552373963e+01, 1.910774578308e+01, 
	2.001855730676e+01, 2.114858883576e+01, 2.234644504319e+01, 2.277899910467e+01, 2.323677033035e+01, 
	2.397497537354e+01, 2.547078292763e+01, 2.652652732646e+01, 2.704785069300e+01, 2.790357833541e+01, 
	2.892372920817e+01, 3.004178155331e+01, 3.127331952840e+01, 3.263326046848e+01, 3.423850765798e+01, 
	3.545130723230e+01, 3.615391019572e+01, 3.750205285331e+01, 3.893779017782e+01, 4.003017263541e+01, 
	4.181628796809e+01, 4.441585724008e+01, 4.633666893813e+01, 4.753411781634e+01, 4.860481913813e+01, 
	4.934237599183e+01, 5.051058365525e+01, 5.215905631012e+01, 5.338639647626e+01, 5.429407816342e+01, 
	5.579945194008e+01, 5.718800861012e+01, 5.822900012646e+01, 5.988783068405e+01, 6.196965849767e+01, 
	6.412725468794e+01, 6.845910006848e+01, 7.258739834319e+01, 7.856030918833e+01, 8.527740456654e+01, 
	9.633172878521e+01, 1.254852634942e+02, 1.849928779650e+02, 2.709817146654e+02, 3.350163948638e+02, 
	4.715252578911e+02, 7.816608862724e+02, 1.055344403268e+03, 1.700650726226e+03, 3.387096760156e+03, 
	4.580225056965e+03, 5.137953256226e+03, 5.357048148288e+03, 4.055939480467e+03, 2.416130688677e+03, 
	1.513170126732e+03, 1.185907509183e+03, 1.021563893035e+03, 8.745307675953e+02, 8.123932741479e+02, 
	7.654099179805e+02, 7.277898838872e+02, 7.163461116615e+02, 7.137466743191e+02, 7.173031370973e+02, 
	7.259742356148e+02, 7.462691911868e+02, 7.751680210428e+02, 8.151577431440e+02, 8.680647164125e+02, 
	9.261863066031e+02, 9.918862977899e+02, 1.081154881323e+03, 1.209684011128e+03, 1.413107075019e+03, 
	1.699559504436e+03, 2.011821121440e+03, 2.439873672646e+03, 3.768111965019e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, SqrtLogLin)
{	
    CrossSectionSet xsSet = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, Sqrt(), 1222.5, LogLin()).getValues();

	std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842969989e+01, 
	1.214862403502e+01, 1.252033040102e+01, 1.282673979858e+01, 1.322645433368e+01, 1.355494413409e+01, 
	1.384197762499e+01, 1.414926327289e+01, 1.428578846737e+01, 1.471720388232e+01, 1.517133632802e+01, 
	1.556269766694e+01, 1.594417653805e+01, 1.646797546116e+01, 1.710415950420e+01, 1.770669114771e+01, 
	1.822644959654e+01, 1.773053153998e+01, 1.999567318345e+01, 1.919996849663e+01, 2.094487662259e+01, 
	2.038010463371e+01, 2.271712498219e+01, 2.305590575656e+01, 2.821714932729e+01, 2.290650450807e+01, 
	2.139051071889e+01, 3.369061062791e+01, 2.442620567992e+01, 3.396590879999e+01, 4.710865896240e+01, 
	4.006279077504e+01, 4.433116010388e+01, 5.015553807822e+01, 8.407125594271e+01, 9.333762759962e+01, 
	1.141228254192e+02, 1.035619220221e+02, 7.957148744113e+01, 4.669130185822e+01, 1.049152340457e+02, 
	9.290884830698e+00, 1.639011602363e+01, 1.825329811200e+01, 1.128402085294e+01, 7.190126949612e+01, 
	2.685919938006e+01, 7.827854917765e+01, 7.839061762689e+01, 2.270322108307e+02, 1.163969629770e+02, 
	2.438358822865e+02, 1.639187225020e+01, 1.726388402091e+01, 2.800107272660e+02, 2.483094327093e+01, 
	1.690812158518e+01, 1.690392815164e+01, 1.750400150389e+01, 1.825552791037e+01, 1.910775360570e+01, 
	2.001855922979e+01, 2.114859846518e+01, 2.234644809550e+01, 2.277900245280e+01, 2.323677402135e+01, 
	2.397497974881e+01, 2.547078898618e+01, 2.652653479138e+01, 2.704785800952e+01, 2.790358419949e+01, 
	2.892373469350e+01, 3.004178820399e+01, 3.127332772367e+01, 3.263327027331e+01, 3.423851740752e+01, 
	3.545131638971e+01, 3.615392013003e+01, 3.750206448933e+01, 3.893780381234e+01, 4.003018797164e+01, 
	4.181630630135e+01, 4.441588066052e+01, 4.633669661357e+01, 4.753414822984e+01, 4.860485154965e+01, 
	4.934240914290e+01, 5.051061995126e+01, 5.215910091293e+01, 5.338644709107e+01, 5.429412966618e+01, 
	5.579950664354e+01, 5.718806791969e+01, 5.822906330258e+01, 5.988790029795e+01, 6.196973671371e+01, 
	6.412734233879e+01, 6.845920895699e+01, 7.258752939417e+01, 7.856047742375e+01, 8.527761916177e+01, 
	9.633203354725e+01, 1.254859011718e+02, 1.849945142193e+02, 2.709856204435e+02, 3.350225741715e+02, 
	4.715378022395e+02, 7.816927700783e+02, 1.055396637776e+03, 1.700743809019e+03, 3.387112380329e+03, 
	4.579981104035e+03, 5.137522765894e+03, 5.356620989600e+03, 4.055982128374e+03, 2.416277713311e+03, 
	1.513241017719e+03, 1.185948376382e+03, 1.021591656591e+03, 8.745481234588e+02, 8.124063952393e+02, 
	7.654199710981e+02, 7.277971916669e+02, 7.163522701015e+02, 7.137518527223e+02, 7.173076317569e+02, 
	7.259783203221e+02, 7.462727712300e+02, 7.751712145183e+02, 8.151606498023e+02, 8.680673930806e+02, 
	9.261888761204e+02, 9.918888092968e+02, 1.081157354644e+03, 1.209686498659e+03, 1.413109751974e+03, 
	1.699562448358e+03, 2.011824525973e+03, 2.439877697001e+03, 3.768118380981e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixLinLin)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrix(300.0, LinLin(), 1222.5, LinLin()).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {5.518682670000e-02, 3.594385090000e-02, 6.433157620000e-02, 
	4.009336610000e-02, 3.918724130000e-02, 2.814282100000e-02, 1.758809200000e-02, 2.552001920000e-02, 
	3.354626150000e-02, 2.366414110000e-02, 2.222497200000e-02, 1.915073390000e-02, 1.226634440000e-02, 
	1.581882500000e-02, 1.400793440000e-02, 7.254477590000e-03, 3.868573810000e-03, 5.558215550000e-03, 
	9.505683560000e-03, 1.438424270000e-02, 1.915855520000e-02, 3.012711370000e-02, 1.569265500000e-02, 
	4.804251720000e-02, 3.929188850000e-02, 2.813378350000e-02, 2.884934280000e-02, -1.744213860000e-03, 
	-4.957551140000e-02, -2.713896890000e-02, -1.126980040000e-02, -3.220964600000e-02, -1.494182066091e-01, 
	-6.105487259496e-02, -1.021296986431e-01, -1.128137553036e-01, -8.162862949875e-02, -2.429518358724e-01, 
	-1.132789092824e-01, -4.218755868410e-01, -2.854766316255e-01, -7.781290503604e-02, -3.143480633669e-01, 
	-1.103251885491e-01, -1.663581231892e-01, -1.726746242829e-01, -1.202584280377e-01, -3.646795012656e-01, 
	-1.000909409635e-01, -7.131603014903e-01, -8.558092418295e-02, -3.063545977111e-01, -1.101223599983e-01, 
	-6.960900415138e-01, -1.966192620979e-01, -1.578406152632e-01, -4.112902658683e-01, -2.560098712461e-01, 
	-3.317099214237e-01, -1.091642372147e-01, -1.599146631740e-01, -1.486963644285e-01, -1.174254917086e-01, 
	-1.015085816730e-01, -4.560331783001e-01, -9.763326922396e-02, -2.881500637595e-01, -2.737100698431e-01, 
	-1.501764478431e-01, -1.672552605969e-01, -3.088011684010e-01, -4.889456368326e-01, -1.250144252277e-01, 
	-2.955417703081e-01, -2.430704768204e-01, -2.581116566260e-01, -2.935927123081e-01, -2.548254165902e-01, 
	-3.756561967330e-01, -1.870418174966e-01, -1.473133130095e-01, -1.165068703492e-01, -1.283638625807e-01, 
	-1.452605483973e-01, -2.914449514086e-01, -2.638922247664e-01, -1.145273569531e-01, -1.107173952196e-01, 
	-1.642084904985e-01, -4.041307827410e-01, -1.217219920740e-01, -7.683242336785e-01, -1.072941093161e-01, 
	-7.586362995598e-01, -6.878236496175e-02, -7.554446971673e-01, -2.796695844086e-01, -7.607715418405e-01, 
	-3.386922170661e-01, -8.030070720272e-02, -5.072113394436e-01, -5.398330838755e-01, -5.085065240973e-01, 
	-5.318359731167e-01, -5.290394042568e-01, -5.204075187938e-01, -5.261435719416e-01, -1.754170785175e-01, 
	-1.949300621899e-01, -6.451054073696e-01, -2.959712635097e-01, -4.011924140623e-01, -6.487376238755e-01, 
	-5.088540964630e-01, -1.602958267630e-01, -1.628546894300e-01, 1.523965688210e-02, 2.062828305097e-01, 
	4.116782131518e-02, -1.904772915894e-01, 4.989437108171e-02, 2.364005691984e-01, -3.164819328794e-02, 
	3.317315024903e-02, 2.324139486693e-01, -1.124176871595e-03, -1.348002409802e-01, -8.564020283152e-02, 
	-5.786824154202e-01, -7.288233923891e-02, -4.963222243969e-01, -8.363770578677e-02, -5.646748417198e-01, 
	-3.521994644747e-01, -3.013263750778e-01, -2.692571361907e-01, -2.501384705914e-01, -7.191650955292e-01, 
	-4.028737131518e-01, -1.720905698128e-01, -7.433416977743e-01, -5.354485601712e-01, -1.148509984101e-01, 
	-3.533238300000e-02, -6.368142577860e-01, -5.977866880973e-01, -2.479920719222e-01, -2.139088040895e-01, 
	-8.615090924864e-02, -2.604683237899e-01, -2.431843654008e-01, -6.951752042568e-02, -2.542699568638e-01, 
	-2.226114259300e-01, -7.198680240117e-02, -2.654914172879e-01, -3.950022023058e-02, -1.343923963280e-01, 
	-2.283333702023e-01, -2.206091246265e-01, -2.341487096965e-01, -2.188222373580e-01, -1.741281178389e-01, 
	-1.871484380257e-01, -2.044566263774e-01, -2.158388858521e-01, -2.150602074202e-01, -1.574838429961e-01, 
	-1.269742981774e-01, -1.479260440658e-01, -1.648321028911e-01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixSqrtLogLin)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin()).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {5.518682670000e-02, 3.594385090000e-02, 6.433157620000e-02, 
	4.009336610000e-02, 3.918724130000e-02, 2.814282100000e-02, 1.758809200000e-02, 2.552001920000e-02, 
	3.354626150000e-02, 2.366414110000e-02, 2.222497200000e-02, 1.915073390000e-02, 1.226634440000e-02, 
	1.581882500000e-02, 1.400793440000e-02, 7.254477590000e-03, 3.868573810000e-03, 5.558215550000e-03, 
	9.505683560000e-03, 1.438424270000e-02, 1.915855520000e-02, 3.012711370000e-02, 1.569265500000e-02, 
	4.804251720000e-02, 3.929188850000e-02, 2.813378350000e-02, 2.884934280000e-02, -1.744213860000e-03, 
	-4.957551140000e-02, -2.713896890000e-02, -1.126980040000e-02, -3.220964600000e-02, -1.494243330316e-01, 
	-6.105845983367e-02, -1.021369512183e-01, -1.128231796631e-01, -8.163706930874e-02, -2.429786038872e-01, 
	-1.132934503240e-01, -4.219320880961e-01, -2.855168848519e-01, -7.782628484891e-02, -3.144047318984e-01, 
	-1.103481912439e-01, -1.663923977934e-01, -1.727178771991e-01, -1.202940598689e-01, -3.647935047689e-01, 
	-1.001194607841e-01, -7.133706307275e-01, -8.561262994959e-02, -3.064215062955e-01, -1.101648933745e-01, 
	-6.964189662602e-01, -1.966632824896e-01, -1.579097835984e-01, -4.117225368423e-01, -2.565702561580e-01, 
	-3.319177578541e-01, -1.093890650667e-01, -1.600003310768e-01, -1.487768931220e-01, -1.176444856766e-01, 
	-1.016021349725e-01, -4.565380445954e-01, -9.771958474898e-02, -2.884998712790e-01, -2.738759875124e-01, 
	-1.505240051453e-01, -1.677445876387e-01, -3.090116376183e-01, -4.890472077152e-01, -1.250230628303e-01, 
	-2.955444276998e-01, -2.430796169167e-01, -2.581154899459e-01, -2.936183809165e-01, -2.548717485156e-01, 
	-3.761741103777e-01, -1.870559113464e-01, -1.475318590755e-01, -1.166640504619e-01, -1.291135939225e-01, 
	-1.453366816414e-01, -2.915118545397e-01, -2.640246262439e-01, -1.149631194408e-01, -1.107528406917e-01, 
	-1.642561482212e-01, -4.042494679768e-01, -1.217624544110e-01, -7.685862847004e-01, -1.072789360443e-01, 
	-7.585174072878e-01, -6.877110618823e-02, -7.545276603728e-01, -2.793769772858e-01, -7.602110379829e-01, 
	-3.388008834770e-01, -8.025274471935e-02, -5.061149233121e-01, -5.394991328570e-01, -5.083216206129e-01, 
	-5.316028487332e-01, -5.288418460432e-01, -5.202003986110e-01, -5.260427252198e-01, -1.751767452221e-01, 
	-1.938891156037e-01, -6.441767805803e-01, -2.954947132938e-01, -4.000334330618e-01, -6.478585518360e-01, 
	-5.086009259012e-01, -1.599732626027e-01, -1.617962989954e-01, 1.565076363411e-02, 2.065104162894e-01, 
	4.199077363822e-02, -1.895733219867e-01, 5.017323881271e-02, 2.367059689960e-01, -3.074616939293e-02, 
	3.352199236510e-02, 2.327056701954e-01, -2.666377574327e-04, -1.339063594655e-01, -8.479549742024e-02, 
	-5.775166538837e-01, -7.263738583463e-02, -4.952680243148e-01, -8.345339325943e-02, -5.638695217402e-01, 
	-3.524136295283e-01, -3.015687131210e-01, -2.693069260857e-01, -2.496816100000e-01, -7.183472884791e-01, 
	-4.028474557363e-01, -1.716282811132e-01, -7.420507020064e-01, -5.353614863890e-01, -1.144762782467e-01, 
	-3.366475467630e-02, -6.353106741998e-01, -5.974583525723e-01, -2.480888530730e-01, -2.139642300742e-01, 
	-8.600617260607e-02, -2.599052182868e-01, -2.430089821940e-01, -6.929967351872e-02, -2.536939640856e-01, 
	-2.224506544999e-01, -7.173333920650e-02, -2.648447863782e-01, -3.933994493124e-02, -1.336003495747e-01, 
	-2.279473573111e-01, -2.202019680833e-01, -2.337437582896e-01, -2.184658110773e-01, -1.737231511452e-01, 
	-1.866183260948e-01, -2.039912315538e-01, -2.154738307439e-01, -2.148392879211e-01, -1.573020293377e-01, 
	-1.266295964998e-01, -1.474469774192e-01, -1.646193708324e-01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSSum)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSection xs3 = xs1 + xs2;

	std::vector<double> ref {1.069214392000e+01, 1.081081629000e+01, 1.080597305000e+01, 
	1.072463608000e+01, 1.066183472000e+01, 1.067996502000e+01, 1.087947607000e+01, 1.118123817000e+01, 
	1.152264023000e+01, 1.216241980000e+01, 1.293947172000e+01, 1.345663595000e+01, 1.378556299000e+01, 
	1.393800497000e+01, 1.399548388000e+01, 1.403996802000e+01, 1.401208067000e+01, 1.393005323000e+01, 
	1.385387802000e+01, 1.379544496000e+01, 1.378044892000e+01, 1.383725118000e+01, 1.407018996000e+01, 
	1.434107352000e+01, 1.448926306000e+01, 1.464472961000e+01, 1.479826307000e+01, 1.510437631000e+01, 
	1.540665390000e+01, 1.554771428000e+01, 1.580632355000e+01, 1.623384090000e+01, 1.654887963986e+01, 
	1.685866928811e+01, 1.738228843111e+01, 1.783206272853e+01, 1.842491578667e+01, 1.891926766709e+01, 
	1.935719927488e+01, 1.980805060622e+01, 2.002884170066e+01, 2.014102196498e+01, 1.949235893527e+01, 
	2.012400161461e+01, 2.041435768361e+01, 2.218883376801e+01, 2.255503651103e+01, 2.203925960312e+01, 
	2.643387624151e+01, 2.613644633959e+01, 3.149076482288e+01, 4.187073631971e+01, 2.329970123328e+01, 
	2.304345826394e+01, 2.602610904124e+01, 3.911302115113e+01, 3.094052346735e+01, 2.580097698366e+01, 
	2.434984414236e+01, 3.683923478644e+01, 2.735945289660e+01, 3.702779048044e+01, 5.036040045390e+01, 
	4.363835169547e+01, 4.816521491168e+01, 5.434368739924e+01, 8.910642935690e+01, 2.075812413064e+02, 
	1.186752794272e+02, 1.079855617972e+02, 8.464690119593e+01, 5.214104892182e+01, 1.099708688899e+02, 
	1.522495691600e+01, 2.251267060570e+01, 2.459900497607e+01, 1.785562771303e+01, 7.843728887115e+01, 
	3.386022675080e+01, 8.504675441974e+01, 8.559060663623e+01, 2.340808156486e+02, 1.241521704966e+02, 
	2.510523724819e+02, 2.515948928611e+01, 2.617278081535e+01, 2.874998117012e+02, 3.411251584209e+01, 
	2.642870486715e+01, 2.655475122670e+01, 2.731407896142e+01, 2.820278431231e+01, 2.916787613600e+01, 
	3.018437089041e+01, 3.142021247740e+01, 3.271792051634e+01, 3.318246270506e+01, 3.367243380350e+01, 
	3.445910989416e+01, 3.604348125175e+01, 3.715628196304e+01, 3.770309946809e+01, 3.859899638249e+01, 
	3.966376932724e+01, 4.082718081984e+01, 4.210469005097e+01, 4.351126112529e+01, 4.516757744553e+01, 
	4.641572836732e+01, 4.713822524125e+01, 4.852130558054e+01, 4.999193293580e+01, 5.110940623541e+01, 
	5.293413251556e+01, 5.558524230700e+01, 5.754157212607e+01, 5.875939636926e+01, 5.984805786304e+01, 
	6.059791604747e+01, 6.178461536887e+01, 6.345834827121e+01, 6.470451826459e+01, 6.562542345798e+01, 
	6.715149547160e+01, 6.855921547160e+01, 6.961462095992e+01, 7.129572499144e+01, 7.340636985019e+01, 
	7.559289227704e+01, 7.998919829844e+01, 8.418812917743e+01, 9.034419209844e+01, 9.746388529922e+01, 
	1.096196008117e+02, 1.376623102070e+02, 1.969471488265e+02, 2.830248029732e+02, 3.471144454451e+02, 
	4.837021076661e+02, 7.939487494074e+02, 1.067693758372e+03, 1.713083563427e+03, 3.399659278412e+03, 
	4.592859157313e+03, 5.150631441772e+03, 5.369807449040e+03, 4.068836412526e+03, 2.429210264837e+03, 
	1.526474005023e+03, 1.199376152803e+03, 1.035188059263e+03, 8.883895884732e+02, 8.264141612977e+02, 
	7.796426944840e+02, 7.423354187829e+02, 7.311027174813e+02, 7.287814556591e+02, 7.325950479039e+02, 
	7.415066316494e+02, 7.621992685272e+02, 7.915396124895e+02, 8.320552911953e+02, 8.855928150331e+02, 
	9.443650704805e+02, 1.010769744137e+03, 1.100966295427e+03, 1.230798658526e+03, 1.436243519268e+03, 
	1.725505389235e+03, 2.040808162049e+03, 2.473017896505e+03, 3.814233705422e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs3.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSDifference)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSection xs3 = xs1 - xs2;

	std::vector<double> ref {1.609936240000e+00, 1.201712130000e+00, 9.835290900000e-01, 
	8.682699200000e-01, 1.030075080000e+00, 1.542323120000e+00, 2.275392050000e+00, 2.740880010000e+00, 
	2.985444070000e+00, 3.136541840000e+00, 2.949741840000e+00, 2.357453830000e+00, 1.608123310000e+00, 
	1.020533090000e+00, 6.389699000000e-01, 1.718840600000e-01, -2.190289500000e-01, -2.743592300000e-01, 
	-1.626358000000e-01, 3.494120000000e-02, 2.920713400000e-01, 6.394610400000e-01, 1.368336200000e+00, 
	2.068901540000e+00, 2.419703000000e+00, 2.778739930000e+00, 3.151289470000e+00, 3.914474010000e+00, 
	4.670265700000e+00, 5.028646520000e+00, 5.680897250000e+00, 6.622518500000e+00, 7.147979759865e+00, 
	7.438577668109e+00, 7.658372371112e+00, 7.821416868527e+00, 8.027991766673e+00, 8.190619487093e+00, 
	8.326769434882e+00, 8.490482786220e+00, 8.542710040658e+00, 9.293312673934e+00, 1.085017805589e+01, 
	1.100116255150e+01, 1.147360774128e+01, 1.074649812700e+01, 1.165224066870e+01, 1.337270456546e+01, 
	1.001696741248e+01, 9.322450030405e+00, 8.496397485135e+00, -3.473889526982e+00, 1.858366323390e+01, 
	1.771469706721e+01, 1.940093028591e+01, 6.988249416504e+00, 2.546609141560e+01, 1.999870891136e+01, 
	1.842440155474e+01, 3.048567480644e+01, 2.147209084431e+01, 3.083980644815e+01, 4.371661641390e+01, 
	3.632889909018e+01, 4.037349432926e+01, 4.577757090344e+01, 7.851793530390e+01, -2.209858860018e+01, 
	1.090559865216e+02, 9.761225221076e+01, 7.393399159998e+01, 4.113856444603e+01, 9.855218018685e+01, 
	3.356801414128e+00, 1.025464098158e+01, 1.189729227724e+01, 4.712180557858e+00, 6.485550697667e+01, 
	1.984486523438e+01, 7.049852223997e+01, 7.031871721981e+01, 2.181147799164e+02, 1.075297697791e+02, 
	2.338536886406e+02, 7.623927209218e+00, 8.354195314103e+00, 2.693701760593e+02, 1.554263648535e+01, 
	7.387520324040e+00, 7.253096568104e+00, 7.693911875423e+00, 8.308263166945e+00, 9.047615430161e+00, 
	9.852743723098e+00, 1.087696519413e+01, 1.197496957004e+01, 1.237553550428e+01, 1.280110685720e+01, 
	1.349084085292e+01, 1.489808460350e+01, 1.589677268988e+01, 1.639260191790e+01, 1.720816028833e+01, 
	1.818368908911e+01, 1.925638228677e+01, 2.044194900584e+01, 2.175525981167e+01, 2.330943787043e+01, 
	2.448688609728e+01, 2.516959515019e+01, 2.648280012607e+01, 2.788364741984e+01, 2.895093903541e+01, 
	3.069844342062e+01, 3.324647217315e+01, 3.513176575019e+01, 3.630883926342e+01, 3.736158041323e+01, 
	3.808683593619e+01, 3.923655194163e+01, 4.085976434903e+01, 4.206827468794e+01, 4.296273286887e+01, 
	4.444740840856e+01, 4.581680174864e+01, 4.684337929300e+01, 4.847993637665e+01, 5.053294714514e+01, 
	5.266161709883e+01, 5.692900183852e+01, 6.098666750895e+01, 6.677642627821e+01, 7.309092383385e+01, 
	8.304385675875e+01, 1.133082167813e+02, 1.730386071035e+02, 2.589386263576e+02, 3.229183442825e+02, 
	4.593484081160e+02, 7.693730231374e+02, 1.042995048165e+03, 1.688217889025e+03, 3.374534241899e+03, 
	4.567590956617e+03, 5.125275070679e+03, 5.344288847536e+03, 4.043042548408e+03, 2.403051112517e+03, 
	1.499866248440e+03, 1.172438865563e+03, 1.007939726807e+03, 8.606719467175e+02, 7.983723869981e+02, 
	7.511771414770e+02, 7.132443489914e+02, 7.015895058416e+02, 6.987118929790e+02, 7.020112262907e+02, 
	7.104418395802e+02, 7.303391138463e+02, 7.587964295961e+02, 7.982601950926e+02, 8.505366177918e+02, 
	9.080075427257e+02, 9.730028514428e+02, 1.061343467219e+03, 1.188569363730e+03, 1.389970630770e+03, 
	1.673613619637e+03, 1.982834080830e+03, 2.406729448787e+03, 3.721990224617e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs3.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSSumEqual)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	xs1 += xs2;

	std::vector<double> ref {1.069214392000e+01, 1.081081629000e+01, 1.080597305000e+01, 
	1.072463608000e+01, 1.066183472000e+01, 1.067996502000e+01, 1.087947607000e+01, 1.118123817000e+01, 
	1.152264023000e+01, 1.216241980000e+01, 1.293947172000e+01, 1.345663595000e+01, 1.378556299000e+01, 
	1.393800497000e+01, 1.399548388000e+01, 1.403996802000e+01, 1.401208067000e+01, 1.393005323000e+01, 
	1.385387802000e+01, 1.379544496000e+01, 1.378044892000e+01, 1.383725118000e+01, 1.407018996000e+01, 
	1.434107352000e+01, 1.448926306000e+01, 1.464472961000e+01, 1.479826307000e+01, 1.510437631000e+01, 
	1.540665390000e+01, 1.554771428000e+01, 1.580632355000e+01, 1.623384090000e+01, 1.654887963986e+01, 
	1.685866928811e+01, 1.738228843111e+01, 1.783206272853e+01, 1.842491578667e+01, 1.891926766709e+01, 
	1.935719927488e+01, 1.980805060622e+01, 2.002884170066e+01, 2.014102196498e+01, 1.949235893527e+01, 
	2.012400161461e+01, 2.041435768361e+01, 2.218883376801e+01, 2.255503651103e+01, 2.203925960312e+01, 
	2.643387624151e+01, 2.613644633959e+01, 3.149076482288e+01, 4.187073631971e+01, 2.329970123328e+01, 
	2.304345826394e+01, 2.602610904124e+01, 3.911302115113e+01, 3.094052346735e+01, 2.580097698366e+01, 
	2.434984414236e+01, 3.683923478644e+01, 2.735945289660e+01, 3.702779048044e+01, 5.036040045390e+01, 
	4.363835169547e+01, 4.816521491168e+01, 5.434368739924e+01, 8.910642935690e+01, 2.075812413064e+02, 
	1.186752794272e+02, 1.079855617972e+02, 8.464690119593e+01, 5.214104892182e+01, 1.099708688899e+02, 
	1.522495691600e+01, 2.251267060570e+01, 2.459900497607e+01, 1.785562771303e+01, 7.843728887115e+01, 
	3.386022675080e+01, 8.504675441974e+01, 8.559060663623e+01, 2.340808156486e+02, 1.241521704966e+02, 
	2.510523724819e+02, 2.515948928611e+01, 2.617278081535e+01, 2.874998117012e+02, 3.411251584209e+01, 
	2.642870486715e+01, 2.655475122670e+01, 2.731407896142e+01, 2.820278431231e+01, 2.916787613600e+01, 
	3.018437089041e+01, 3.142021247740e+01, 3.271792051634e+01, 3.318246270506e+01, 3.367243380350e+01, 
	3.445910989416e+01, 3.604348125175e+01, 3.715628196304e+01, 3.770309946809e+01, 3.859899638249e+01, 
	3.966376932724e+01, 4.082718081984e+01, 4.210469005097e+01, 4.351126112529e+01, 4.516757744553e+01, 
	4.641572836732e+01, 4.713822524125e+01, 4.852130558054e+01, 4.999193293580e+01, 5.110940623541e+01, 
	5.293413251556e+01, 5.558524230700e+01, 5.754157212607e+01, 5.875939636926e+01, 5.984805786304e+01, 
	6.059791604747e+01, 6.178461536887e+01, 6.345834827121e+01, 6.470451826459e+01, 6.562542345798e+01, 
	6.715149547160e+01, 6.855921547160e+01, 6.961462095992e+01, 7.129572499144e+01, 7.340636985019e+01, 
	7.559289227704e+01, 7.998919829844e+01, 8.418812917743e+01, 9.034419209844e+01, 9.746388529922e+01, 
	1.096196008117e+02, 1.376623102070e+02, 1.969471488265e+02, 2.830248029732e+02, 3.471144454451e+02, 
	4.837021076661e+02, 7.939487494074e+02, 1.067693758372e+03, 1.713083563427e+03, 3.399659278412e+03, 
	4.592859157313e+03, 5.150631441772e+03, 5.369807449040e+03, 4.068836412526e+03, 2.429210264837e+03, 
	1.526474005023e+03, 1.199376152803e+03, 1.035188059263e+03, 8.883895884732e+02, 8.264141612977e+02, 
	7.796426944840e+02, 7.423354187829e+02, 7.311027174813e+02, 7.287814556591e+02, 7.325950479039e+02, 
	7.415066316494e+02, 7.621992685272e+02, 7.915396124895e+02, 8.320552911953e+02, 8.855928150331e+02, 
	9.443650704805e+02, 1.010769744137e+03, 1.100966295427e+03, 1.230798658526e+03, 1.436243519268e+03, 
	1.725505389235e+03, 2.040808162049e+03, 2.473017896505e+03, 3.814233705422e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs1.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, XSDifferenceEqual)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	xs1 -= xs2;

	std::vector<double> ref {1.609936240000e+00, 1.201712130000e+00, 9.835290900000e-01, 
	8.682699200000e-01, 1.030075080000e+00, 1.542323120000e+00, 2.275392050000e+00, 2.740880010000e+00, 
	2.985444070000e+00, 3.136541840000e+00, 2.949741840000e+00, 2.357453830000e+00, 1.608123310000e+00, 
	1.020533090000e+00, 6.389699000000e-01, 1.718840600000e-01, -2.190289500000e-01, -2.743592300000e-01, 
	-1.626358000000e-01, 3.494120000000e-02, 2.920713400000e-01, 6.394610400000e-01, 1.368336200000e+00, 
	2.068901540000e+00, 2.419703000000e+00, 2.778739930000e+00, 3.151289470000e+00, 3.914474010000e+00, 
	4.670265700000e+00, 5.028646520000e+00, 5.680897250000e+00, 6.622518500000e+00, 7.147979759865e+00, 
	7.438577668109e+00, 7.658372371112e+00, 7.821416868527e+00, 8.027991766673e+00, 8.190619487093e+00, 
	8.326769434882e+00, 8.490482786220e+00, 8.542710040658e+00, 9.293312673934e+00, 1.085017805589e+01, 
	1.100116255150e+01, 1.147360774128e+01, 1.074649812700e+01, 1.165224066870e+01, 1.337270456546e+01, 
	1.001696741248e+01, 9.322450030405e+00, 8.496397485135e+00, -3.473889526982e+00, 1.858366323390e+01, 
	1.771469706721e+01, 1.940093028591e+01, 6.988249416504e+00, 2.546609141560e+01, 1.999870891136e+01, 
	1.842440155474e+01, 3.048567480644e+01, 2.147209084431e+01, 3.083980644815e+01, 4.371661641390e+01, 
	3.632889909018e+01, 4.037349432926e+01, 4.577757090344e+01, 7.851793530390e+01, -2.209858860018e+01, 
	1.090559865216e+02, 9.761225221076e+01, 7.393399159998e+01, 4.113856444603e+01, 9.855218018685e+01, 
	3.356801414128e+00, 1.025464098158e+01, 1.189729227724e+01, 4.712180557858e+00, 6.485550697667e+01, 
	1.984486523438e+01, 7.049852223997e+01, 7.031871721981e+01, 2.181147799164e+02, 1.075297697791e+02, 
	2.338536886406e+02, 7.623927209218e+00, 8.354195314103e+00, 2.693701760593e+02, 1.554263648535e+01, 
	7.387520324040e+00, 7.253096568104e+00, 7.693911875423e+00, 8.308263166945e+00, 9.047615430161e+00, 
	9.852743723098e+00, 1.087696519413e+01, 1.197496957004e+01, 1.237553550428e+01, 1.280110685720e+01, 
	1.349084085292e+01, 1.489808460350e+01, 1.589677268988e+01, 1.639260191790e+01, 1.720816028833e+01, 
	1.818368908911e+01, 1.925638228677e+01, 2.044194900584e+01, 2.175525981167e+01, 2.330943787043e+01, 
	2.448688609728e+01, 2.516959515019e+01, 2.648280012607e+01, 2.788364741984e+01, 2.895093903541e+01, 
	3.069844342062e+01, 3.324647217315e+01, 3.513176575019e+01, 3.630883926342e+01, 3.736158041323e+01, 
	3.808683593619e+01, 3.923655194163e+01, 4.085976434903e+01, 4.206827468794e+01, 4.296273286887e+01, 
	4.444740840856e+01, 4.581680174864e+01, 4.684337929300e+01, 4.847993637665e+01, 5.053294714514e+01, 
	5.266161709883e+01, 5.692900183852e+01, 6.098666750895e+01, 6.677642627821e+01, 7.309092383385e+01, 
	8.304385675875e+01, 1.133082167813e+02, 1.730386071035e+02, 2.589386263576e+02, 3.229183442825e+02, 
	4.593484081160e+02, 7.693730231374e+02, 1.042995048165e+03, 1.688217889025e+03, 3.374534241899e+03, 
	4.567590956617e+03, 5.125275070679e+03, 5.344288847536e+03, 4.043042548408e+03, 2.403051112517e+03, 
	1.499866248440e+03, 1.172438865563e+03, 1.007939726807e+03, 8.606719467175e+02, 7.983723869981e+02, 
	7.511771414770e+02, 7.132443489914e+02, 7.015895058416e+02, 6.987118929790e+02, 7.020112262907e+02, 
	7.104418395802e+02, 7.303391138463e+02, 7.587964295961e+02, 7.982601950926e+02, 8.505366177918e+02, 
	9.080075427257e+02, 9.730028514428e+02, 1.061343467219e+03, 1.188569363730e+03, 1.389970630770e+03, 
	1.673613619637e+03, 1.982834080830e+03, 2.406729448787e+03, 3.721990224617e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs1.getValues(), ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixSum)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());

	CrossSectionMatrix mat3 = mat1 + mat2;
	std::vector<double> vec3 = Numerics::eigenVecTOStdVec(mat3.getValues().diagonal(0)); 

	std::vector<double> ref {9.394885070000e+00, 9.426134110000e+00, 9.337042330000e+00, 
	9.072159530000e+00, 8.343547590000e+00, 7.782719610000e+00, 7.973369840000e+00, 8.136422400000e+00, 
	8.419189460000e+00, 9.059902660000e+00, 9.795231340000e+00, 1.022897387000e+01, 1.046437884000e+01, 
	1.044608856000e+01, 1.048041558000e+01, 1.073670268000e+01, 1.081697989000e+01, 1.069879365000e+01, 
	1.070913601000e+01, 1.070034456000e+01, 1.074039745000e+01, 1.083957815000e+01, 1.154867315000e+01, 
	1.142340565000e+01, 1.162905645000e+01, 1.180840492000e+01, 1.196104955000e+01, 1.279423380000e+01, 
	1.253373098000e+01, 1.268136406000e+01, 1.345432568000e+01, 1.397940493000e+01, 1.352193233351e+01, 
	1.452360210188e+01, 1.481430493473e+01, 1.519252193027e+01, 1.593208449668e+01, 1.560366278422e+01, 
	1.643339397187e+01, 1.584940109058e+01, 1.647969816376e+01, 1.713993816199e+01, 1.551937544018e+01, 
	1.665426798903e+01, 1.656518593197e+01, 1.793112122056e+01, 1.831773305141e+01, 1.660282393904e+01, 
	2.134605186865e+01, 1.937417268375e+01, 2.480085489349e+01, 3.406467066741e+01, 1.538545498491e+01, 
	1.295545029694e+01, 1.557337216583e+01, 2.864061552020e+01, 1.656326945736e+01, 1.528902072634e+01, 
	1.428488952315e+01, 1.838811695813e+01, 1.443617711850e+01, 1.735630278354e+01, 1.905981292935e+01, 
	1.711715198247e+01, 1.564876720370e+01, 1.780392473202e+01, 2.274302659884e+01, 6.401818228939e+01, 
	1.682925978039e+01, 2.661120492214e+01, 1.650620991274e+01, 1.331750862073e+01, 2.073789027344e+01, 
	1.233550549178e+01, 1.380233397942e+01, 1.454863015082e+01, 1.546531712620e+01, 1.676335745703e+01, 
	1.692550301257e+01, 1.686417937167e+01, 1.882074657642e+01, 2.038106444329e+01, 1.866123054101e+01, 
	1.574217422545e+01, 1.503208205473e+01, 1.654385056125e+01, 1.958875818048e+01, 1.587347876250e+01, 
	1.682260949646e+01, 1.641432597966e+01, 1.759574801834e+01, 1.586248653041e+01, 1.772044482329e+01, 
	1.419720582756e+01, 1.804842152037e+01, 1.369155931765e+01, 1.622111946389e+01, 1.372789685154e+01, 
	1.739872046681e+01, 1.784537370795e+01, 1.281247979208e+01, 1.574886041961e+01, 1.638723008127e+01, 
	1.740004087068e+01, 1.755425094182e+01, 1.769230333918e+01, 1.765758023827e+01, 1.807667837078e+01, 
	1.431707056812e+01, 1.551696596307e+01, 1.760417940035e+01, 1.548432113682e+01, 1.595934470197e+01, 
	1.771121600833e+01, 1.783276778065e+01, 1.450326839885e+01, 1.534282010520e+01, 1.348352038491e+01, 
	1.337965399126e+01, 1.532713686267e+01, 1.539166302587e+01, 1.310869701802e+01, 1.395497800336e+01, 
	1.537817132410e+01, 1.320526603764e+01, 1.392095086657e+01, 1.525004485855e+01, 1.490001928201e+01, 
	1.501803643391e+01, 1.797926999920e+01, 1.334798223619e+01, 1.879595438582e+01, 1.453937642849e+01, 
	2.061901119688e+01, 2.310457000751e+01, 2.479956525131e+01, 2.413551504449e+01, 2.120429766205e+01, 
	2.337146271475e+01, 2.552036783454e+01, 2.269215753052e+01, 2.437022115830e+01, 2.903558934706e+01, 
	1.809059332524e+01, 2.279085972820e+01, 2.260267758015e+01, 2.105094883371e+01, 2.053598145840e+01, 
	2.176843143812e+01, 2.078656850354e+01, 2.259838046582e+01, 2.388735467423e+01, 2.253223704391e+01, 
	2.619834619167e+01, 2.656047710456e+01, 2.473411502573e+01, 2.839425357034e+01, 2.604853073150e+01, 
	2.979061896537e+01, 3.075805637574e+01, 2.518933167002e+01, 3.293156614288e+01, 1.716676172981e+01, 
	1.626293139584e+01, 1.650063929558e+01, 1.678555245798e+01, 1.713824034717e+01, 1.759545607411e+01, 
	1.693453116020e+01, 1.617526960882e+01, 1.690118408461e+01, 1.897564895346e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec3, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixDifference)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());

	CrossSectionMatrix mat3 = mat1 - mat2;
	std::vector<double> vec3 = Numerics::eigenVecTOStdVec(mat3.getValues().diagonal(0)); 

	std::vector<double> ref {-3.069738390000e+00, -3.297632210000e+00, -3.440834530000e+00, 
	-3.205633410000e+00, -2.491718530000e+00, -1.436530110000e+00, -6.302068200000e-01, -3.033073000000e-01, 
	-1.170730600000e-01, 3.567362000000e-02, -1.909957000000e-01, -8.633198700000e-01, -1.702603820000e+00, 
	-2.458420040000e+00, -2.861345060000e+00, -3.113877540000e+00, -3.394208430000e+00, -3.485735650000e+00, 
	-3.288172730000e+00, -3.042146200000e+00, -2.730944630000e+00, -2.341927050000e+00, -1.137879850000e+00, 
	-8.339843700000e-01, -4.257874500000e-01, -4.284954000000e-02, 3.289561300000e-01, 1.619859220000e+00, 
	1.813893800000e+00, 2.179540640000e+00, 3.348462100000e+00, 4.395349030000e+00, 4.153114053513e+00, 
	5.140221221877e+00, 5.132653814731e+00, 5.229391930268e+00, 5.590652876684e+00, 4.938198384224e+00, 
	5.473966131867e+00, 4.610701170578e+00, 5.077357283762e+00, 6.372634301737e+00, 6.935605239285e+00, 
	7.621734368322e+00, 7.745444076667e+00, 6.813147695098e+00, 7.641415424518e+00, 8.164014445678e+00, 
	5.153670517587e+00, 2.920471981761e+00, 2.150611256699e+00, -1.001734939394e+01, 1.087906056835e+01, 
	7.654092101219e+00, 9.274866477471e+00, -2.721179772523e+00, 1.164582823470e+01, 1.004629916634e+01, 
	8.921978471282e+00, 1.253971862016e+01, 8.550883638499e+00, 1.121070571177e+01, 1.245349527138e+01, 
	9.819566427265e+00, 7.875075289549e+00, 9.274082168486e+00, 1.242275926990e+01, -3.266756204256e+01, 
	7.484383491258e+00, 1.637559000869e+01, 5.927514050618e+00, 2.451804948966e+00, 9.465425555758e+00, 
	6.280697414295e-01, 1.720775016779e+00, 2.044150650561e+00, 2.542672272563e+00, 3.428591538897e+00, 
	3.185931730894e+00, 2.631474151482e+00, 3.926609505553e+00, 4.862502390814e+00, 2.564357917921e+00, 
	-8.517500663142e-01, -1.846398105081e+00, -5.694888140555e-01, 2.221834885816e+00, -1.842118188561e+00, 
	-1.252249299361e+00, -1.851369307418e+00, -8.929269089897e-01, -2.811593318790e+00, -1.097511369702e+00, 
	-4.750892092762e+00, -1.021868451462e+00, -5.489699824090e+00, -2.993747709098e+00, -5.520708052062e+00, 
	-1.898600954476e+00, -1.537320630957e+00, -6.622508059299e+00, -3.708792899808e+00, -3.105427999378e+00, 
	-2.129867156974e+00, -2.012033430588e+00, -1.909480039595e+00, -1.978786749444e+00, -1.595565711982e+00, 
	-5.379306518438e+00, -4.192172017635e+00, -2.127348386731e+00, -4.268930777266e+00, -3.808861872377e+00, 
	-2.079025899129e+00, -1.985403790863e+00, -5.333098841601e+00, -4.503704692934e+00, -6.371628389950e+00, 
	-6.481135251637e+00, -4.542108681120e+00, -4.488850217217e+00, -6.779614444358e+00, -5.938777650597e+00, 
	-4.524069128189e+00, -6.704350929753e+00, -5.993906377225e+00, -4.672681122931e+00, -5.031878443910e+00, 
	-4.922596214194e+00, -1.976793453602e+00, -6.621146717761e+00, -1.188737420868e+00, -5.460588552867e+00, 
	5.999667535309e-01, 3.051011986292e+00, 4.709000730151e+00, 4.017170928225e+00, 1.073616659993e+00, 
	3.225354575447e+00, 5.354988096905e+00, 2.517231020424e+00, 4.183606427489e+00, 8.832571439141e+00, 
	-2.120611692124e+00, 2.574943804719e+00, 2.378590141819e+00, 8.143956994192e-01, 2.849759102212e-01, 
	1.502474580496e+00, 5.110181282272e-01, 2.314901758936e+00, 3.593297605145e+00, 2.231622814190e+00, 
	5.890128993335e+00, 6.242291057466e+00, 4.409900025842e+00, 8.062857885314e+00, 5.710925998880e+00, 
	9.447653842919e+00, 1.040673489675e+01, 4.829319419702e+00, 1.256167281052e+01, -3.214666847200e+00, 
	-4.130363155315e+00, -3.905724696877e+00, -3.638694110678e+00, -3.312856912827e+00, -2.902236518137e+00, 
	-3.638431984876e+00, -4.493977828541e+00, -3.927080152718e+00, -2.653675334729e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec3, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixSumEqual)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());

	mat1 += mat2;

	std::vector<double> vec1 = Numerics::eigenVecTOStdVec(mat1.getValues().diagonal(0)); 

	std::vector<double> ref {9.394885070000e+00, 9.426134110000e+00, 9.337042330000e+00, 
	9.072159530000e+00, 8.343547590000e+00, 7.782719610000e+00, 7.973369840000e+00, 8.136422400000e+00, 
	8.419189460000e+00, 9.059902660000e+00, 9.795231340000e+00, 1.022897387000e+01, 1.046437884000e+01, 
	1.044608856000e+01, 1.048041558000e+01, 1.073670268000e+01, 1.081697989000e+01, 1.069879365000e+01, 
	1.070913601000e+01, 1.070034456000e+01, 1.074039745000e+01, 1.083957815000e+01, 1.154867315000e+01, 
	1.142340565000e+01, 1.162905645000e+01, 1.180840492000e+01, 1.196104955000e+01, 1.279423380000e+01, 
	1.253373098000e+01, 1.268136406000e+01, 1.345432568000e+01, 1.397940493000e+01, 1.352193233351e+01, 
	1.452360210188e+01, 1.481430493473e+01, 1.519252193027e+01, 1.593208449668e+01, 1.560366278422e+01, 
	1.643339397187e+01, 1.584940109058e+01, 1.647969816376e+01, 1.713993816199e+01, 1.551937544018e+01, 
	1.665426798903e+01, 1.656518593197e+01, 1.793112122056e+01, 1.831773305141e+01, 1.660282393904e+01, 
	2.134605186865e+01, 1.937417268375e+01, 2.480085489349e+01, 3.406467066741e+01, 1.538545498491e+01, 
	1.295545029694e+01, 1.557337216583e+01, 2.864061552020e+01, 1.656326945736e+01, 1.528902072634e+01, 
	1.428488952315e+01, 1.838811695813e+01, 1.443617711850e+01, 1.735630278354e+01, 1.905981292935e+01, 
	1.711715198247e+01, 1.564876720370e+01, 1.780392473202e+01, 2.274302659884e+01, 6.401818228939e+01, 
	1.682925978039e+01, 2.661120492214e+01, 1.650620991274e+01, 1.331750862073e+01, 2.073789027344e+01, 
	1.233550549178e+01, 1.380233397942e+01, 1.454863015082e+01, 1.546531712620e+01, 1.676335745703e+01, 
	1.692550301257e+01, 1.686417937167e+01, 1.882074657642e+01, 2.038106444329e+01, 1.866123054101e+01, 
	1.574217422545e+01, 1.503208205473e+01, 1.654385056125e+01, 1.958875818048e+01, 1.587347876250e+01, 
	1.682260949646e+01, 1.641432597966e+01, 1.759574801834e+01, 1.586248653041e+01, 1.772044482329e+01, 
	1.419720582756e+01, 1.804842152037e+01, 1.369155931765e+01, 1.622111946389e+01, 1.372789685154e+01, 
	1.739872046681e+01, 1.784537370795e+01, 1.281247979208e+01, 1.574886041961e+01, 1.638723008127e+01, 
	1.740004087068e+01, 1.755425094182e+01, 1.769230333918e+01, 1.765758023827e+01, 1.807667837078e+01, 
	1.431707056812e+01, 1.551696596307e+01, 1.760417940035e+01, 1.548432113682e+01, 1.595934470197e+01, 
	1.771121600833e+01, 1.783276778065e+01, 1.450326839885e+01, 1.534282010520e+01, 1.348352038491e+01, 
	1.337965399126e+01, 1.532713686267e+01, 1.539166302587e+01, 1.310869701802e+01, 1.395497800336e+01, 
	1.537817132410e+01, 1.320526603764e+01, 1.392095086657e+01, 1.525004485855e+01, 1.490001928201e+01, 
	1.501803643391e+01, 1.797926999920e+01, 1.334798223619e+01, 1.879595438582e+01, 1.453937642849e+01, 
	2.061901119688e+01, 2.310457000751e+01, 2.479956525131e+01, 2.413551504449e+01, 2.120429766205e+01, 
	2.337146271475e+01, 2.552036783454e+01, 2.269215753052e+01, 2.437022115830e+01, 2.903558934706e+01, 
	1.809059332524e+01, 2.279085972820e+01, 2.260267758015e+01, 2.105094883371e+01, 2.053598145840e+01, 
	2.176843143812e+01, 2.078656850354e+01, 2.259838046582e+01, 2.388735467423e+01, 2.253223704391e+01, 
	2.619834619167e+01, 2.656047710456e+01, 2.473411502573e+01, 2.839425357034e+01, 2.604853073150e+01, 
	2.979061896537e+01, 3.075805637574e+01, 2.518933167002e+01, 3.293156614288e+01, 1.716676172981e+01, 
	1.626293139584e+01, 1.650063929558e+01, 1.678555245798e+01, 1.713824034717e+01, 1.759545607411e+01, 
	1.693453116020e+01, 1.617526960882e+01, 1.690118408461e+01, 1.897564895346e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec1, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, MatrixDifferenceEqual)
{	
    CrossSectionMatrix mat1 = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	CrossSectionMatrix mat2 = library_->getNuclide("La139")->getXSMatrixSet(XSMatrixKind::SCAT00).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin());
	std::vector<double> vec2 = Numerics::eigenVecTOStdVec(mat2.getValues().diagonal(0)); 

	mat1 -= mat2;
	std::vector<double> vec1 = Numerics::eigenVecTOStdVec(mat1.getValues().diagonal(0)); 

	std::vector<double> ref {-3.069738390000e+00, -3.297632210000e+00, -3.440834530000e+00, 
	-3.205633410000e+00, -2.491718530000e+00, -1.436530110000e+00, -6.302068200000e-01, -3.033073000000e-01, 
	-1.170730600000e-01, 3.567362000000e-02, -1.909957000000e-01, -8.633198700000e-01, -1.702603820000e+00, 
	-2.458420040000e+00, -2.861345060000e+00, -3.113877540000e+00, -3.394208430000e+00, -3.485735650000e+00, 
	-3.288172730000e+00, -3.042146200000e+00, -2.730944630000e+00, -2.341927050000e+00, -1.137879850000e+00, 
	-8.339843700000e-01, -4.257874500000e-01, -4.284954000000e-02, 3.289561300000e-01, 1.619859220000e+00, 
	1.813893800000e+00, 2.179540640000e+00, 3.348462100000e+00, 4.395349030000e+00, 4.153114053513e+00, 
	5.140221221877e+00, 5.132653814731e+00, 5.229391930268e+00, 5.590652876684e+00, 4.938198384224e+00, 
	5.473966131867e+00, 4.610701170578e+00, 5.077357283762e+00, 6.372634301737e+00, 6.935605239285e+00, 
	7.621734368322e+00, 7.745444076667e+00, 6.813147695098e+00, 7.641415424518e+00, 8.164014445678e+00, 
	5.153670517587e+00, 2.920471981761e+00, 2.150611256699e+00, -1.001734939394e+01, 1.087906056835e+01, 
	7.654092101219e+00, 9.274866477471e+00, -2.721179772523e+00, 1.164582823470e+01, 1.004629916634e+01, 
	8.921978471282e+00, 1.253971862016e+01, 8.550883638499e+00, 1.121070571177e+01, 1.245349527138e+01, 
	9.819566427265e+00, 7.875075289549e+00, 9.274082168486e+00, 1.242275926990e+01, -3.266756204256e+01, 
	7.484383491258e+00, 1.637559000869e+01, 5.927514050618e+00, 2.451804948966e+00, 9.465425555758e+00, 
	6.280697414295e-01, 1.720775016779e+00, 2.044150650561e+00, 2.542672272563e+00, 3.428591538897e+00, 
	3.185931730894e+00, 2.631474151482e+00, 3.926609505553e+00, 4.862502390814e+00, 2.564357917921e+00, 
	-8.517500663142e-01, -1.846398105081e+00, -5.694888140555e-01, 2.221834885816e+00, -1.842118188561e+00, 
	-1.252249299361e+00, -1.851369307418e+00, -8.929269089897e-01, -2.811593318790e+00, -1.097511369702e+00, 
	-4.750892092762e+00, -1.021868451462e+00, -5.489699824090e+00, -2.993747709098e+00, -5.520708052062e+00, 
	-1.898600954476e+00, -1.537320630957e+00, -6.622508059299e+00, -3.708792899808e+00, -3.105427999378e+00, 
	-2.129867156974e+00, -2.012033430588e+00, -1.909480039595e+00, -1.978786749444e+00, -1.595565711982e+00, 
	-5.379306518438e+00, -4.192172017635e+00, -2.127348386731e+00, -4.268930777266e+00, -3.808861872377e+00, 
	-2.079025899129e+00, -1.985403790863e+00, -5.333098841601e+00, -4.503704692934e+00, -6.371628389950e+00, 
	-6.481135251637e+00, -4.542108681120e+00, -4.488850217217e+00, -6.779614444358e+00, -5.938777650597e+00, 
	-4.524069128189e+00, -6.704350929753e+00, -5.993906377225e+00, -4.672681122931e+00, -5.031878443910e+00, 
	-4.922596214194e+00, -1.976793453602e+00, -6.621146717761e+00, -1.188737420868e+00, -5.460588552867e+00, 
	5.999667535309e-01, 3.051011986292e+00, 4.709000730151e+00, 4.017170928225e+00, 1.073616659993e+00, 
	3.225354575447e+00, 5.354988096905e+00, 2.517231020424e+00, 4.183606427489e+00, 8.832571439141e+00, 
	-2.120611692124e+00, 2.574943804719e+00, 2.378590141819e+00, 8.143956994192e-01, 2.849759102212e-01, 
	1.502474580496e+00, 5.110181282272e-01, 2.314901758936e+00, 3.593297605145e+00, 2.231622814190e+00, 
	5.890128993335e+00, 6.242291057466e+00, 4.409900025842e+00, 8.062857885314e+00, 5.710925998880e+00, 
	9.447653842919e+00, 1.040673489675e+01, 4.829319419702e+00, 1.256167281052e+01, -3.214666847200e+00, 
	-4.130363155315e+00, -3.905724696877e+00, -3.638694110678e+00, -3.312856912827e+00, -2.902236518137e+00, 
	-3.638431984876e+00, -4.493977828541e+00, -3.927080152718e+00, -2.653675334729e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec1, ref, 1.0E-9));
}

TEST_F(XSMatrixOpsTests, SqrtLogLinU238)
{	
    CrossSectionSet xsSet = library_->getNuclide("U238")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, Sqrt(), 2.931360e+03, LogLin()).getValues();

	// PrintFuncs::createCppVector(vec, "%13.12e");

	std::vector<double> ref {6.152112010000e+00, 5.993115900000e+00, 5.883075240000e+00, 
	5.795361040000e+00, 5.841610910000e+00, 6.088483810000e+00, 6.566021920000e+00, 6.986002920000e+00, 
	7.294635770000e+00, 7.677556990000e+00, 7.935103890000e+00, 7.931162830000e+00, 7.738595010000e+00, 
	7.526566980000e+00, 7.370854850000e+00, 7.168050770000e+00, 6.962312220000e+00, 6.901368140000e+00, 
	6.930066110000e+00, 7.006326200000e+00, 7.134714130000e+00, 7.290252210000e+00, 7.670152190000e+00, 
	8.091972350000e+00, 8.328283310000e+00, 8.575904850000e+00, 8.828931810000e+00, 9.332166670000e+00, 
	9.822374340000e+00, 1.004757020000e+01, 1.047307970000e+01, 1.126688960000e+01, 1.180028023152e+01, 
	1.213314713468e+01, 1.251415658776e+01, 1.279430222258e+01, 1.312467758689e+01, 1.338367880455e+01, 
	1.359970862051e+01, 1.379746375538e+01, 1.390752921824e+01, 1.449051310749e+01, 1.482637558912e+01, 
	1.515563163600e+01, 1.482112838008e+01, 1.560183870903e+01, 1.643193734178e+01, 1.431118000517e+01, 
	1.797733796885e+01, 2.298169630297e+01, 2.142106461929e+01, 2.109810665510e+01, 2.525034852377e+01, 
	1.568376792906e+01, 2.090561243561e+01, 2.168844756484e+01, 3.967655452445e+01, 1.834809138745e+01, 
	1.741814747893e+01, 2.159565491295e+01, 1.606747515766e+01, 2.309552095673e+01, 3.177071414523e+01, 
	4.678263038143e+01, 1.355686367259e+01, 6.256571638035e+01, 1.639938417627e+01, 1.443381364403e+01, 
	7.535176531882e+01, 1.109220820845e+01, 1.210655200996e+01, 1.316521204232e+01, 1.657220338162e+01, 
	4.627034901930e+01, 4.015325414140e+02, 6.423272663435e+00, 8.530798507872e+00, 1.032054729619e+01, 
	1.383697106255e+01, 2.859043925618e+02, 7.175343896091e+00, 8.284704744842e+00, 9.074609102038e+00, 
	1.021182522803e+01, 1.025039789909e+01, 1.113330397977e+01, 1.384401307917e+01, 3.392922374452e+02, 
	1.156183555476e+01, 9.336667255140e+00, 9.215684747405e+00, 9.089647219032e+00, 9.129225426856e+00, 
	9.175197555566e+00, 9.224216781397e+00, 9.270489766046e+00, 9.284813149421e+00, 9.299353144727e+00, 
	9.320541292122e+00, 9.358442558393e+00, 9.382036856270e+00, 9.392507613665e+00, 9.408825442508e+00, 
	9.426446972154e+00, 9.444009126977e+00, 9.461510374052e+00, 9.478921940643e+00, 9.497596269004e+00, 
	9.510321537202e+00, 9.517334151704e+00, 9.529653997010e+00, 9.541884375853e+00, 9.550626082765e+00, 
	9.563499241608e+00, 9.580733673023e+00, 9.592094302187e+00, 9.598456507010e+00, 9.604013872798e+00, 
	9.607792455370e+00, 9.613467060193e+00, 9.621101587588e+00, 9.626571213377e+00, 9.630408006110e+00, 
	9.636393602702e+00, 9.641746879132e+00, 9.645655069614e+00, 9.651520527010e+00, 9.658365383601e+00, 
	9.665224458103e+00, 9.677512149036e+00, 9.688270977396e+00, 9.701660158328e+00, 9.715297482797e+00, 
	9.733476543538e+00, 9.769262639197e+00, 9.813142370129e+00, 9.850308986399e+00, 9.868751624535e+00, 
	9.893978293923e+00, 9.928543534696e+00, 9.947312629261e+00, 9.972370099261e+00, 1.001120582579e+01, 
	1.003250386707e+01, 1.004561912167e+01, 1.006967142392e+01, 1.011038603537e+01, 1.016427409820e+01, 
	1.023043783923e+01, 1.027896696894e+01, 1.032475800560e+01, 1.039375993602e+01, 1.044110907164e+01, 
	1.050324101383e+01, 1.059517660335e+01, 1.065697204933e+01, 1.073879041158e+01, 1.081446775827e+01, 
	1.088528554187e+01, 1.100244695222e+01, 1.113266039113e+01, 1.128792564971e+01, 1.147426624579e+01, 
	1.166672378818e+01, 1.187539504497e+01, 1.215049885776e+01, 1.253738139951e+01, 1.313866971417e+01, 
	1.397610307566e+01, 1.488480112571e+01, 1.613079432277e+01, 2.006072203865e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}
