#include "gtest/gtest.h"
#include "file_tools.h"
#include "network_tools.h"
#include "Library.h"
#include "additionalPrintFuncs.h"


class XSTests : public ::testing::Test 
{
 protected:
	static std::string* url_;
	static std::string* target_;
	static Library* library_;
	static std::vector<std::string>* nucVec_;
	static std::vector < std::shared_ptr<Nuclide> >* nuclides_;

  	static void SetUpTestSuite() 
	{
    	library_ = new Library;
		url_ = new std::string("https://www.polymtl.ca/merlin/downloads/libraries/ascii/draglibendfb7r0.gz");
    	target_ =  new std::string(File::getPrePath() + "draglibendfb7r0.gz");
		library_->downloadLibrary(*url_, *target_);
		library_->setXSLibraryPath(*target_);
		nucVec_ = new std::vector<std::string> {"Pu239", "La139"};
		nuclides_ = new std::vector < std::shared_ptr<Nuclide> > {library_->readNuclides(*nucVec_)};
  	}

	static void TearDownTestSuite() 
	{
    	delete library_;
		delete url_;
		delete target_;
		delete nucVec_;
		delete nuclides_;
    	library_ = nullptr;
		url_ = nullptr;
		target_ = nullptr;
		nucVec_ = nullptr;
		nuclides_ = nullptr;
  	}

	virtual void SetUp() {}
  	virtual void TearDown() {}
};

Library* XSTests::library_ = nullptr;
std::string* XSTests::url_ = nullptr;
std::string* XSTests::target_ = nullptr;
std::vector<std::string>* XSTests::nucVec_ = nullptr;
std::vector < std::shared_ptr<Nuclide> >* XSTests::nuclides_ = nullptr;

TEST_F(XSTests, GetNuclides)
{	
    size_t numberOfNuclides = library_->getNumberOfNuclidesRead();
    EXPECT_EQ(numberOfNuclides, 2);
}

TEST_F(XSTests, GetLibraryNuclides)
{	
    std::vector<std::string> nuclideVec = library_->getLibraryNuclides();

    std::vector<std::string> refVec {"Ag107", "Ag109", "Ag111", "Al27", "Am241", 
	"Am242", "Am242m", "Am243", "As75", "B10", "B11", "Ba134", "Ba135", "Ba136", 
	"Ba137", "Ba138", "Ba140", "Be7", "Be9", "Bi209", "Bk249", "Br79", "Br81", 
	"C0", "C0_GR", "Ca40", "Ca42", "Ca43", "Ca44", "Ca46", "Ca48", 
	"Cd106", "Cd108", "Cd110", "Cd111", "Cd112", "Cd113", "Cd114", 
	"Cd115m", "Cd116", "Ce140", "Ce141", "Ce142", "Ce143", "Ce144", 
	"Cf249", "Cf250", "Cf251", "Cf252", "Cf253", "Cl35", "Cl37", 
	"Cm241", "Cm242", "Cm243", "Cm244", "Cm245", "Cm246", "Cm247", 
	"Cm248", "Co59", "Cr50", "Cr52", "Cr53", "Cr54", "Cs133", 
	"Cs134", "Cs135", "Cs136", "Cs137", "Cu63", "Cu65", "DEPL-CHAIN", 
	"Dy160", "Dy161", "Dy162", "Dy163", "Dy164", "Er166", "Er167", 
	"Eu151", "Eu152", "Eu153", "Eu154", "Eu155", "Eu156", "Eu157", 
	"F19", "Fe54", "Fe56", "Fe57", "Fe58", "Gd152", "Gd154", "Gd155", 
	"Gd156", "Gd157", "Gd158", "Gd160", "Ge72", "Ge73", "Ge74", "Ge76", 
	"H1", "H1_CH2", "H1_H2O", "H1_ZRH", "H2", "H2_D2O", "H3", "He3", 
	"He4", "Hf174", "Hf176", "Hf177", "Hf178", "Hf179", "Hf180", 
	"Ho165", "I127", "I129", "I130", "I131", "I135", "In113", "In115", 
	"K39", "K40", "K41", "Kr80", "Kr82", "Kr83", "Kr84", "Kr85", "Kr86", 
	"La138", "La139", "La140", "Li6", "Li7", "Mg24", "Mg25", "Mg26", 
	"Mn55", "Mo100", "Mo92", "Mo94", "Mo95", "Mo96", "Mo97", "Mo99", 
	"N14", "N15", "Na23", "Nb94", "Nb95", "Nd142", "Nd143", "Nd144", 
	"Nd145", "Nd146", "Nd147", "Nd148", "Nd150", "Ni58", "Ni60", "Ni61", 
	"Ni62", "Ni64", "Np236", "Np237", "Np238", "Np239", "O16", "O17", 
	"P31", "Pa231", "Pa233", "Pb204", "Pb206", "Pb207", 
	"Pb208", "Pd104", "Pd105", "Pd106", "Pd107", "Pd108", "Pd110", "Pm147", 
	"Pm148", "Pm148m", "Pm149", "Pm151", "Pr141", "Pr142", "Pr143", "Pu236", 
	"Pu237", "Pu238", "Pu239", "Pu240", "Pu241", "Pu242", "Pu243", "Pu244", 
	"Rb85", "Rb87", "Rh103", "Rh105", "Ru100", "Ru101", "Ru102", "Ru103", 
	"Ru104", "Ru105", "Ru106", "Ru99", "S32", "S33", "S34", "S36", 
	"Sb121", "Sb123", "Sb124", "Sb125", "Sb126", "Se76", "Se77", "Se78", 
	"Se79", "Se80", "Se82", "Si28", "Si29", "Si30", "Sm147", "Sm148", 
	"Sm149", "Sm150", "Sm151", "Sm152", "Sm153", "Sm154", "Sn112", 
	"Sn114", "Sn115", "Sn116", "Sn117", "Sn118", "Sn119", "Sn120", "Sn122", 
	"Sn123", "Sn124", "Sn125", "Sn126", "Sr86", "Sr87", "Sr88", "Sr89", 
	"Sr90", "Tb159", "Tb160", "Tc99", "Te122", "Te123", "Te124", "Te125", 
	"Te126", "Te127m", "Te128", "Te129m", "Te130", "Te132", "Th230", "Th232", 
	"Ti46", "Ti47", "Ti48", "Ti49", "Ti50", "U232", "U233", "U234", "U235", 
	"U236", "U237", "U238", "V0", "W182", "W183", "W184", "W186", "Xe128", 
	"Xe129", "Xe130", "Xe131", "Xe132", "Xe133", "Xe134", "Xe135", "Xe136", 
	"Y89", "Y90", "Y91", "Zn0", "Zr90", "Zr90_ZRH", "Zr91", "Zr92", "Zr93", 
	"Zr94", "Zr95", "Zr96"};

    bool areEqual = std::equal(refVec.begin(), refVec.end(), nuclideVec.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNuclide)
{	
	size_t size = library_->getNuclide("La139")->getCopyOfXSSets().size();
    EXPECT_EQ(size, 17);
}

TEST_F(XSTests, NonFissionableNuclide)
{	
	bool notFissionable = library_->getNuclide("La139")->isFissionable();
    EXPECT_FALSE(notFissionable);
}

TEST_F(XSTests, FissionableNuclide)
{	
	bool fissionable = library_->getNuclide("Pu239")->isFissionable();
    EXPECT_TRUE(fissionable);
}

TEST_F(XSTests, NonResonantNuclide)
{	
	bool notFissionable = library_->getNuclide("La139")->isResonant();
    EXPECT_FALSE(notFissionable);
}

TEST_F(XSTests, ResonantNuclide)
{	
	bool fissionable = library_->getNuclide("Pu239")->isResonant();
    EXPECT_TRUE(fissionable);
}


TEST_F(XSTests, GetTotalCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetInelCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NINEL).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetN2NCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::N2N).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetN3NCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::N3N).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetN4NCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::N4N).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNNPCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NNP).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNGCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NG).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNPCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NP).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNDCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::ND).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNTCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NT).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNACrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NA).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetTotalCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetInelCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NINEL).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetN2NCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::N2N).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetN3NCrossSectionSetResonant)
{	  
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::N3N).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetN4NCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::N4N).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNNPCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NNP).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNGCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NG).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNPCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NP).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNDCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::ND).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNTCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NT).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNACrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NA).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNFTOTCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NFTOT).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNUSIGFCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NUSIGF).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetCHICrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::CHI).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNUCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NU).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetSCATT01CrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::SCATT01).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetSCATT01CrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::SCATT01).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetDIFFCOEFFCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::DIFFCOEFF).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetDIFFCOEFFCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::DIFFCOEFF).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetTotalCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {4.54110384e+00, 4.80455208e+00, 4.91122198e+00, 
	4.92818308e+00, 4.81587982e+00, 4.56882095e+00, 4.30204201e+00, 4.22017908e+00, 
	4.26859808e+00, 4.51293898e+00, 4.99486494e+00, 5.54959106e+00, 6.08871984e+00, 
	6.45873594e+00, 6.67825699e+00, 6.93404198e+00, 7.11555481e+00, 7.10220623e+00, 
	7.00825691e+00, 6.88025188e+00, 6.74418879e+00, 6.59889507e+00, 6.35092688e+00, 
	6.13608599e+00, 6.03478003e+00, 5.93299484e+00, 5.82348680e+00, 5.59495115e+00, 
	5.36819410e+00, 5.25953388e+00, 5.06271315e+00, 4.80566120e+00, 4.70044994e+00, 
	4.71004581e+00, 4.86195803e+00, 5.00532293e+00, 5.19846201e+00, 5.36432409e+00, 
	5.51521492e+00, 5.65878391e+00, 5.74306583e+00, 5.42385197e+00, 4.32109118e+00, 
	4.56141996e+00, 4.47037601e+00, 5.72132683e+00, 5.45120478e+00, 4.33354521e+00, 
	8.20845509e+00, 8.40700722e+00, 1.14971905e+01, 2.26723309e+01, 2.35801911e+00, 
	2.66417193e+00, 3.31265807e+00, 1.60623894e+01, 2.73721600e+00, 2.90113401e+00, 
	2.96272206e+00, 3.17677999e+00, 2.94368100e+00, 3.09399199e+00, 3.32189202e+00, 
	3.65472603e+00, 3.89585996e+00, 4.28305817e+00, 5.29422522e+00, 1.14840103e+02, 
	4.80964518e+00, 5.18665504e+00, 5.35645485e+00, 5.50124216e+00, 5.70934391e+00, 
	5.93407679e+00, 6.12901402e+00, 6.35085583e+00, 6.57172298e+00, 6.79089022e+00, 
	7.00767994e+00, 7.27411509e+00, 7.63594389e+00, 7.98301697e+00, 8.31119919e+00, 
	8.59934044e+00, 8.76777935e+00, 8.90929127e+00, 9.06481647e+00, 9.28493786e+00, 
	9.52058983e+00, 9.65082455e+00, 9.81008053e+00, 9.94725704e+00, 1.00601263e+01, 
	1.01658087e+01, 1.02716179e+01, 1.03714695e+01, 1.04034576e+01, 1.04356575e+01, 
	1.04841280e+01, 1.05726910e+01, 1.06297464e+01, 1.06552401e+01, 1.06954088e+01, 
	1.07400303e+01, 1.07853889e+01, 1.08313599e+01, 1.08779898e+01, 1.09290581e+01, 
	1.09644089e+01, 1.09843025e+01, 1.10192394e+01, 1.10541286e+01, 1.10792189e+01, 
	1.11178293e+01, 1.11693687e+01, 1.12048855e+01, 1.12252598e+01, 1.12432194e+01, 
	1.12555199e+01, 1.12740107e+01, 1.12992697e+01, 1.13180981e+01, 1.13313208e+01, 
	1.13520174e+01, 1.13711786e+01, 1.13855906e+01, 1.14078608e+01, 1.14366713e+01, 
	1.14655886e+01, 1.15300016e+01, 1.16005402e+01, 1.17829800e+01, 1.21841021e+01, 
	1.32906504e+01, 1.21755733e+01, 1.19541607e+01, 1.20430355e+01, 1.20980005e+01, 
	1.21767998e+01, 1.22878103e+01, 1.23493004e+01, 1.24327793e+01, 1.25624542e+01, 
	1.26340332e+01, 1.26781158e+01, 1.27592268e+01, 1.28968506e+01, 1.30794840e+01, 
	1.33037720e+01, 1.34685259e+01, 1.36240377e+01, 1.38586750e+01, 1.40207281e+01, 
	1.42325993e+01, 1.45453300e+01, 1.47563810e+01, 1.50345287e+01, 1.52916317e+01, 
	1.55320902e+01, 1.59297228e+01, 1.63711815e+01, 1.68970661e+01, 1.75275230e+01, 
	1.81780815e+01, 1.88826370e+01, 1.98104248e+01, 2.11133747e+01, 2.31346550e+01, 
	2.59432449e+01, 2.89832954e+01, 3.31386414e+01, 4.61073036e+01};

    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetInelCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NINEL).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 4.44751501e-01, 5.34929395e-01, 6.28362477e-01, 
	9.15886104e-01, 1.54972100e+00, 2.12181091e+00, 2.14398789e+00, 2.14158392e+00, 
	2.16643095e+00, 2.23892808e+00, 2.29722404e+00, 2.18650389e+00, 1.91091895e+00, 
	1.74666297e+00, 1.65001297e+00, 1.46051502e+00, 1.04663599e+00, 7.28291690e-01, 
	6.19041383e-01, 5.91151476e-01, 5.61844826e-01, 5.29296875e-01, 4.67026114e-01, 
	4.12149698e-01, 3.88583809e-01, 3.67220700e-01, 3.47438604e-01, 3.09488088e-01, 
	2.68817514e-01, 2.45647207e-01, 1.76098093e-01, 8.89868010e-03};

    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetN2NCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::N2N).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.55825698e+00, 1.56992400e+00, 
	1.48506498e+00, 1.21417201e+00, 6.03158891e-01, 4.12262082e-02};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetN3NCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::N3N).getXSNoInterp(293.0, Numerics::DINF).getValues();

    std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 8.07629228e-02, 3.16674792e-04};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetN4NCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::N4N).getXSNoInterp(293.0, Numerics::DINF).getValues();
    std::vector<double> ref(172, 0.000000000000e+00);
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNNPCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NNP).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.04511811e-03, 
	1.05167401e-03, 2.55840103e-04, 3.25791189e-05, 1.05037998e-06};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNGCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NG).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {1.05950504e-03, 9.97772557e-04, 9.98312258e-04, 
	1.01523101e-03, 8.04598676e-04, 3.60931503e-04, 2.28132296e-04, 3.21953004e-04, 
	4.78444912e-04, 8.13469815e-04, 1.75857905e-03, 3.43982503e-03, 5.22513315e-03, 
	6.48058578e-03, 7.37583404e-03, 8.75606574e-03, 9.97378957e-03, 9.94500145e-03, 
	9.60356742e-03, 9.00797546e-03, 8.51736683e-03, 8.14251229e-03, 7.65158515e-03, 
	7.39035383e-03, 7.35607091e-03, 7.36624887e-03, 7.44071789e-03, 7.76361814e-03, 
	8.27548560e-03, 8.62626266e-03, 9.78147332e-03, 1.36347497e-02, 1.60401799e-02, 
	1.83553807e-02, 2.11307798e-02, 2.37601008e-02, 2.77456306e-02, 3.15924101e-02, 
	3.54999788e-02, 3.94336805e-02, 4.18988690e-02, 4.02034707e-02, 2.92051509e-02, 
	4.51526493e-02, 6.05048314e-02, 1.62154496e-01, 1.13257602e-01, 1.13868698e-01, 
	1.12263203e-01, 1.80145994e-01, 1.72051594e-01, 6.31296217e-01, 1.04820698e-01, 
	1.35181397e-02, 1.63397595e-01, 3.81491214e-01, 2.78494805e-01, 2.79772997e-01, 
	2.81265795e-01, 2.52580494e-01, 1.03550300e-03, 2.11940892e-02, 1.87321901e-02, 
	5.93377696e-03, 9.01488960e-03, 1.81366205e-02, 1.34107500e-01, 6.64971085e+01, 
	1.37203202e-01, 6.88466206e-02, 6.71038330e-02, 6.83850423e-02, 7.31092021e-02, 
	8.03599730e-02, 8.82344916e-02, 9.86144692e-02, 1.10401101e-01, 1.23505697e-01, 
	1.37896895e-01, 1.57765999e-01, 1.88877493e-01, 2.23735094e-01, 2.62765110e-01, 
	3.02379191e-01, 3.28539997e-01, 3.52620989e-01, 3.81355494e-01, 4.27136898e-01, 
	4.83166903e-01, 5.17981827e-01, 5.65746427e-01, 6.10222518e-01, 6.51152074e-01, 
	6.91765606e-01, 7.36479580e-01, 7.80843496e-01, 7.96029925e-01, 8.11353981e-01, 
	8.35471690e-01, 8.81355882e-01, 9.12267208e-01, 9.26425695e-01, 9.49088573e-01, 
	9.75080729e-01, 1.00225401e+00, 1.03047705e+00, 1.05981803e+00, 1.09295404e+00, 
	1.11623299e+00, 1.12975204e+00, 1.15349305e+00, 1.17752397e+00, 1.19513798e+00, 
	1.22272599e+00, 1.26029599e+00, 1.28672099e+00, 1.30201995e+00, 1.31566703e+00, 
	1.32515204e+00, 1.33940804e+00, 1.35903299e+00, 1.37396502e+00, 1.38446796e+00, 
	1.40092003e+00, 1.41639698e+00, 1.42818499e+00, 1.44651699e+00, 1.47073996e+00, 
	1.49529505e+00, 1.55199301e+00, 1.61600101e+00, 1.79066098e+00, 2.18414903e+00, 
	3.28116989e+00, 2.14883089e+00, 1.90892196e+00, 1.98389995e+00, 2.03270507e+00, 
	2.10379791e+00, 2.20517993e+00, 2.26189590e+00, 2.33953500e+00, 2.46102810e+00, 
	2.52850509e+00, 2.57024288e+00, 2.64727592e+00, 2.77867103e+00, 2.95409489e+00, 
	3.17091894e+00, 3.33088994e+00, 3.48245192e+00, 3.71182489e+00, 3.87060905e+00, 
	4.07869816e+00, 4.38648176e+00, 4.59453392e+00, 4.86912823e+00, 5.12316608e+00, 
	5.36096716e+00, 5.75448084e+00, 6.19165611e+00, 6.71268511e+00, 7.33749199e+00, 
	7.98223686e+00, 8.68041039e+00, 9.59947491e+00, 1.08893299e+01, 1.28879299e+01, 
	1.56598902e+01, 1.86530800e+01, 2.27311001e+01, 3.53096619e+01};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNPCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NP).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.07188597e-02, 
	6.42032316e-03, 3.72799905e-03, 1.39681099e-03, 3.29124392e-04, 5.68041287e-05, 
	7.79704624e-06, 1.53961298e-06, 4.86339673e-07, 5.70574308e-08};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNDCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::ND).getXSNoInterp(293.0, Numerics::DINF).getValues();

    std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.31842406e-03, 1.41100097e-03, 
	2.85235496e-04, 6.10484421e-05, 6.37466292e-06, 2.66982710e-07};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNTCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NT).getXSNoInterp(293.0, Numerics::DINF).getValues();

    std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.39458396e-03, 
	5.88281022e-04, 1.04688697e-04, 5.81945278e-06, 1.30193802e-08};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNACrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NA).getXSNoInterp(293.0, Numerics::DINF).getValues();
    
    std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.41834011e-03, 
	2.63833394e-03, 1.86971703e-03, 9.33425501e-04, 2.53727514e-04, 8.53571601e-06, 
	1.63235404e-06, 4.52618195e-07, 1.61087897e-07, 9.27575972e-09};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetTotalCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007872010000e+01, 1.925996020000e+01, 2.107517050000e+01, 
	2.037490080000e+01, 2.287550930000e+01, 2.327058030000e+01, 2.879990010000e+01, 2.318672940000e+01, 
	2.152634050000e+01, 3.494644170000e+01, 2.486829950000e+01, 3.535044100000e+01, 5.032812880000e+01, 
	4.432304000000e+01, 4.674983980000e+01, 5.520196910000e+01, 9.920126340000e+01, 1.363560940000e+02, 
	1.277938000000e+02, 1.581064000000e+02, 9.468679810000e+01, 4.889522170000e+01, 1.452032010000e+02, 
	9.292217250000e+00, 1.665612030000e+01, 1.846541020000e+01, 1.130613990000e+01, 8.525469970000e+01, 
	2.751512910000e+01, 1.102893980000e+02, 1.072029040000e+02, 2.925147090000e+02, 1.527463990000e+02, 
	3.312701110000e+02, 1.641695980000e+01, 1.732208060000e+01, 3.828304140000e+02, 2.512553980000e+01, 
	1.690971950000e+01, 1.690476990000e+01, 1.750494960000e+01, 1.825637050000e+01, 1.910868640000e+01, 
	2.001894570000e+01, 2.114936640000e+01, 2.234705730000e+01, 2.277967070000e+01, 2.323751070000e+01, 
	2.397585300000e+01, 2.547199820000e+01, 2.652802470000e+01, 2.704931830000e+01, 2.790475460000e+01, 
	2.892482950000e+01, 3.004311560000e+01, 3.127496340000e+01, 3.263522720000e+01, 3.424046330000e+01, 
	3.545314410000e+01, 3.611279720090e+01, 3.744636515710e+01, 3.886323978790e+01, 3.993930961800e+01, 
	4.170324814300e+01, 4.428437136100e+01, 4.619013679900e+01, 4.737296392200e+01, 4.843298069100e+01, 
	4.913967894400e+01, 5.027384217300e+01, 5.189069243100e+01, 5.308205071600e+01, 5.393739256500e+01, 
	5.536838292600e+01, 5.668555111100e+01, 5.764383058200e+01, 5.933907624700e+01, 6.109191001600e+01, 
	6.338491139200e+01, 6.734307387000e+01, 7.176614724800e+01, 7.718921902000e+01, 8.371049830000e+01, 
	9.318605469000e+01, 1.238774182000e+02, 1.841017066900e+02, 2.660296537900e+02, 3.339229541900e+02, 
	4.683134084700e+02, 7.760038285000e+02, 1.053639295000e+03, 1.707973433000e+03, 3.374625847300e+03, 
	4.488781342100e+03, 4.967381072200e+03, 5.215709838300e+03, 3.963940734000e+03, 2.403321220100e+03, 
	1.515375165100e+03, 1.106121184800e+03, 1.027054029037e+03, 8.767338900600e+02, 8.136724757000e+02, 
	7.673570694756e+02, 6.915119016000e+02, 7.152223566600e+02, 6.468775249000e+02, 6.578510590000e+02, 
	5.422652890000e+02, 6.598287662000e+02, 5.428160860000e+02, 8.151601443990e+02, 8.680026507260e+02, 
	6.569344790000e+02, 9.903212340700e+02, 1.081089357294e+03, 1.209636899291e+03, 1.413053130877e+03, 
	1.699493832764e+03, 2.011764579486e+03, 2.439847328493e+03, 3.768437451409e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetInelCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NINEL).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 4.045647980000e-01, 4.588080940000e-01, 
	4.901109040000e-01, 5.601137280000e-01, 6.439865230000e-01, 7.595742940000e-01, 9.639034870000e-01, 
	1.371742960000e+00, 1.689239030000e+00, 1.756311060000e+00, 1.754394050000e+00, 1.816218020000e+00, 
	1.878677960000e+00, 1.880898000000e+00, 1.861026050000e+00, 1.830957060000e+00, 1.723109010000e+00, 
	1.612424020000e+00, 1.582736970000e+00, 1.562841060000e+00, 1.518908980000e+00, 1.463665960000e+00, 
	1.377563000000e+00, 1.320667980000e+00, 1.274271010000e+00, 1.221135020000e+00, 1.209246990000e+00, 
	1.157217030000e+00, 1.090363030000e+00, 1.056154970000e+00, 9.982910750000e-01, 8.578732010000e-01, 
	7.423893210000e-01, 6.599575880000e-01, 5.509240030000e-01, 4.849047960000e-01, 4.412296120000e-01, 
	4.176518920000e-01, 4.032954870000e-01, 3.923409880000e-01, 3.873212040000e-01, 3.724480870000e-01, 
	3.524008990000e-01, 3.265711960000e-01, 2.863177060000e-01, 9.695281830000e-02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetN2NCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::N2N).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	1.121985020000e-01, 1.626157020000e-01, 2.167616040000e-01, 2.925193010000e-01, 3.255606890000e-01, 
	2.495885940000e-01, 1.381752940000e-01, 6.794351340000e-02, 4.514005970000e-03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetN3NCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::N3N).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	3.179849090000e-01, 1.265338960000e-01, 2.607551960000e-02, 5.865367710000e-04};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetN4NCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::N4N).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(171, 0.000000000000e+00);
	ref.push_back(1.824667920000e-05);

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNNPCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NNP).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNGCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NG).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.210438950000e-03, 2.118142090000e-03, 2.229847010000e-03, 
	2.448844020000e-03, 2.181936060000e-03, 9.069116200000e-04, 3.745626890000e-04, 4.630720940000e-04, 
	8.187838830000e-04, 1.608195950000e-03, 2.030418020000e-03, 2.599681960000e-03, 3.899808040000e-03, 
	5.681205080000e-03, 7.182520810000e-03, 9.426450360000e-03, 1.306570040000e-02, 1.689573940000e-02, 
	1.980582070000e-02, 2.347821000000e-02, 2.835730090000e-02, 3.475702180000e-02, 6.198799980000e-02, 
	8.738352360000e-02, 9.997683020000e-02, 1.113997030000e-01, 1.233917030000e-01, 1.515721980000e-01, 
	1.821082980000e-01, 1.883980930000e-01, 1.922121050000e-01, 2.086540010000e-01, 2.226818050000e-01, 
	2.377216070000e-01, 2.699317040000e-01, 3.091860120000e-01, 3.697252870000e-01, 4.204905030000e-01, 
	4.742453100000e-01, 5.520278220000e-01, 5.838804240000e-01, 6.951770190000e-01, 8.109478950000e-01, 
	9.599943160000e-01, 1.116376040000e+00, 1.282526970000e+00, 1.657578950000e+00, 1.938063030000e+00, 
	2.127799030000e+00, 2.347717050000e+00, 2.729408980000e+00, 3.817059990000e+00, 3.640553950000e+00, 
	2.986349110000e+00, 3.843030930000e+00, 4.191730980000e+00, 5.028538230000e+00, 3.984361890000e+00, 
	4.472674850000e+00, 7.783953190000e+00, 4.782465930000e+00, 1.174172970000e+01, 1.628525920000e+01, 
	1.199073980000e+01, 1.733997920000e+01, 1.741328050000e+01, 2.944676020000e+01, 3.605199810000e+01, 
	2.268330000000e+01, 1.015835040000e+02, 4.643902970000e+01, 5.638514040000e+00, 1.052053990000e+02, 
	6.782180070000e-01, 6.289919850000e+00, 2.285613060000e+00, 5.551387070000e-01, 3.836269000000e+01, 
	6.088389870000e+00, 3.990327070000e+01, 4.549312970000e+01, 1.198088000000e+02, 7.278118900000e+01, 
	6.380638890000e+01, 3.230456110000e+00, 4.172525880000e+00, 1.693132930000e+02, 4.944345000000e+00, 
	1.515349030000e+00, 1.381261940000e+00, 1.399252060000e+00, 1.474851010000e+00, 1.589723940000e+00, 
	1.720927000000e+00, 1.896579980000e+00, 2.088691950000e+00, 2.160296920000e+00, 2.236762050000e+00, 
	2.362380980000e+00, 2.623322010000e+00, 2.811904910000e+00, 2.906919960000e+00, 3.064605000000e+00, 
	3.256383900000e+00, 3.470972060000e+00, 3.712563040000e+00, 3.985640050000e+00, 4.315779210000e+00, 
	4.570602890000e+00, 4.720078841106e+00, 5.012964106610e+00, 5.330391092000e+00, 5.576360123520e+00, 
	5.986664801130e+00, 6.600340441750e+00, 7.064511620630e+00, 7.360274585020e+00, 7.626586937600e+00, 
	7.809907451970e+00, 8.103828076900e+00, 8.523462328100e+00, 8.837711987200e+00, 9.069391819700e+00, 
	9.453966232100e+00, 9.811341293900e+00, 1.007547756600e+01, 1.051899338240e+01, 1.103612197100e+01, 
	1.159456297600e+01, 1.275882742500e+01, 1.404562318300e+01, 1.568133735500e+01, 1.767458900300e+01, 
	2.084616483400e+01, 3.067695344500e+01, 5.150537778500e+01, 8.171424182000e+01, 1.067416142690e+02, 
	1.572090493500e+02, 2.769888663800e+02, 3.866502134400e+02, 6.465304645000e+02, 1.321672199840e+03, 
	1.779201988600e+03, 1.991389028400e+03, 2.106617901900e+03, 1.573202640600e+03, 9.590751361000e+02, 
	6.023958598500e+02, 3.956966321000e+02, 3.899680123798e+02, 3.217258286720e+02, 2.924124531910e+02, 
	2.679300485891e+02, 2.272082937000e+02, 2.345666193160e+02, 2.019154315000e+02, 1.944688754000e+02, 
	1.368584828000e+02, 1.743233793000e+02, 1.801728823000e+02, 2.299152513380e+02, 2.390115865030e+02, 
	1.299851230000e+02, 2.632008447060e+02, 2.827047823226e+02, 3.111678755797e+02, 3.576048650960e+02, 
	4.244642009961e+02, 4.984201317965e+02, 6.007858217810e+02, 9.215761672599e+02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNPCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NP).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNDCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::ND).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNTCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NT).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNACrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NA).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNFTOTCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NFTOT).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.350255970000e+00, 2.420903920000e+00, 2.415081980000e+00, 
	2.286206960000e+00, 2.237148050000e+00, 2.250340940000e+00, 2.136674880000e+00, 1.891438010000e+00, 
	1.698135970000e+00, 1.706519010000e+00, 1.771293040000e+00, 1.831783060000e+00, 1.894363050000e+00, 
	1.934142950000e+00, 1.974167940000e+00, 1.954396960000e+00, 1.936439990000e+00, 1.864397050000e+00, 
	1.787876960000e+00, 1.738963010000e+00, 1.700963020000e+00, 1.685464020000e+00, 1.651312950000e+00, 
	1.585983040000e+00, 1.559703950000e+00, 1.573289040000e+00, 1.561470030000e+00, 1.552503940000e+00, 
	1.542135950000e+00, 1.516837000000e+00, 1.490543960000e+00, 1.495951060000e+00, 1.514603020000e+00, 
	1.536977050000e+00, 1.549541000000e+00, 1.558411000000e+00, 1.540469050000e+00, 1.562018040000e+00, 
	1.614138960000e+00, 1.566985010000e+00, 1.585826040000e+00, 1.647958040000e+00, 1.776383040000e+00, 
	1.791007040000e+00, 1.867076990000e+00, 2.180797100000e+00, 2.099561930000e+00, 2.261956930000e+00, 
	2.556533100000e+00, 2.069562910000e+00, 3.567950960000e+00, 2.461177110000e+00, 3.916994090000e+00, 
	4.753939150000e+00, 5.927555080000e+00, 5.561376090000e+00, 8.282878880000e+00, 5.670394900000e+00, 
	4.424879070000e+00, 1.091884990000e+01, 8.033204080000e+00, 8.562432290000e+00, 1.694275090000e+01, 
	1.741609950000e+01, 1.573558040000e+01, 2.318301960000e+01, 4.827920150000e+01, 7.792392730000e+01, 
	9.183061980000e+01, 2.621068950000e+01, 3.446514130000e+01, 3.375743870000e+01, 2.050579070000e+01, 
	1.236817960000e+00, 1.862063050000e+00, 7.095921990000e+00, 8.480430840000e-01, 3.572027970000e+01, 
	1.008491040000e+01, 5.923875050000e+01, 4.917329030000e+01, 1.580063930000e+02, 6.824520870000e+01, 
	2.585159000000e+02, 5.701860900000e+00, 4.340898040000e+00, 2.012705990000e+02, 1.283372970000e+01, 
	7.107427120000e+00, 7.007001880000e+00, 7.381894110000e+00, 7.903581140000e+00, 8.530845640000e+00, 
	9.212067600000e+00, 1.007479000000e+01, 1.099526020000e+01, 1.132968040000e+01, 1.168396000000e+01, 
	1.225648020000e+01, 1.341782000000e+01, 1.423760030000e+01, 1.464216040000e+01, 1.530541990000e+01, 
	1.609510990000e+01, 1.695903020000e+01, 1.790805050000e+01, 1.895232960000e+01, 2.017974090000e+01, 
	2.110337070000e+01, 2.163130980973e+01, 2.264954111777e+01, 2.372941502415e+01, 2.454736146700e+01, 
	2.587926821680e+01, 2.780610609400e+01, 2.922154969900e+01, 3.010071134440e+01, 3.088130980410e+01, 
	3.141529534330e+01, 3.225991661690e+01, 3.345211917230e+01, 3.433328299220e+01, 3.497434908780e+01, 
	3.604800210350e+01, 3.703024720590e+01, 3.775234624230e+01, 3.894680217130e+01, 4.032744644900e+01, 
	4.191714119100e+01, 4.482280741500e+01, 4.772617622700e+01, 5.163367863700e+01, 5.618099678400e+01, 
	6.316221921400e+01, 8.306872609500e+01, 1.216163211930e+02, 1.745298643300e+02, 2.154963737200e+02, 
	2.997240065200e+02, 4.883527480800e+02, 6.553876933300e+02, 1.047410262350e+03, 2.038570448490e+03, 
	2.700670105400e+03, 2.972065974500e+03, 3.100860098900e+03, 2.399016617600e+03, 1.443033877500e+03, 
	9.079797482100e+02, 7.134133372000e+02, 6.305396114998e+02, 5.483738691820e+02, 5.145306724170e+02, 
	4.922989000116e+02, 4.591169281000e+02, 4.739319009710e+02, 4.402422297000e+02, 4.586286546000e+02, 
	4.052069167000e+02, 4.812832303000e+02, 3.593812410000e+02, 5.776384389270e+02, 6.213716457450e+02, 
	5.249649040000e+02, 7.195840739800e+02, 7.906366584280e+02, 8.906830733950e+02, 1.047636717057e+03, 
	1.267191868362e+03, 1.505481682906e+03, 1.831153391792e+03, 2.838643662625e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNUSIGFCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NUSIGF).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {1.288118360000e+01, 1.252699470000e+01, 1.202330590000e+01, 
	1.080385590000e+01, 1.002067470000e+01, 9.495697020000e+00, 8.501502040000e+00, 7.238233570000e+00, 
	6.330739020000e+00, 6.142384050000e+00, 6.131842610000e+00, 6.151956080000e+00, 6.209856990000e+00, 
	6.235605720000e+00, 6.306510930000e+00, 6.160966400000e+00, 5.998360630000e+00, 5.707031730000e+00, 
	5.436612610000e+00, 5.257878300000e+00, 5.117915150000e+00, 5.049915790000e+00, 4.911979680000e+00, 
	4.688170910000e+00, 4.599024300000e+00, 4.628949640000e+00, 4.585376740000e+00, 4.544206620000e+00, 
	4.501314160000e+00, 4.422282220000e+00, 4.336975570000e+00, 4.341151710000e+00, 4.389626500000e+00, 
	4.451958660000e+00, 4.487673760000e+00, 4.513107780000e+00, 4.460800650000e+00, 4.522784230000e+00, 
	4.673390390000e+00, 4.536631110000e+00, 4.591061590000e+00, 4.770635130000e+00, 5.142148020000e+00, 
	5.184313770000e+00, 5.404336450000e+00, 6.312282090000e+00, 6.077026840000e+00, 6.546980380000e+00, 
	7.399495600000e+00, 5.989997390000e+00, 1.032674600000e+01, 7.123353000000e+00, 1.133685400000e+01, 
	1.375915810000e+01, 1.715589140000e+01, 1.609603310000e+01, 2.397264670000e+01, 1.641125680000e+01, 
	1.280634210000e+01, 3.142231940000e+01, 2.306519700000e+01, 2.446602060000e+01, 4.856719210000e+01, 
	5.007815170000e+01, 4.500380330000e+01, 6.658537290000e+01, 1.388816990000e+02, 2.232697600000e+02, 
	2.644507450000e+02, 7.380773160000e+01, 9.878594970000e+01, 9.758954620000e+01, 5.732230760000e+01, 
	3.570949080000e+00, 5.287783150000e+00, 2.049436000000e+01, 2.444416050000e+00, 1.018980480000e+02, 
	2.882005690000e+01, 1.692948300000e+02, 1.403314820000e+02, 4.522236020000e+02, 1.944377140000e+02, 
	7.403392940000e+02, 1.638468550000e+01, 1.249708370000e+01, 5.743364870000e+02, 3.673122790000e+01, 
	2.040924640000e+01, 2.013440130000e+01, 2.122264290000e+01, 2.273043060000e+01, 2.454057880000e+01, 
	2.650550650000e+01, 2.899300960000e+01, 3.164662550000e+01, 3.261050420000e+01, 3.363161090000e+01, 
	3.528165820000e+01, 3.862806320000e+01, 4.098999400000e+01, 4.215542980000e+01, 4.406583400000e+01, 
	4.634021760000e+01, 4.882817080000e+01, 5.156042480000e+01, 5.456676860000e+01, 5.809933470000e+01, 
	6.075714110000e+01, 6.227621003220e+01, 6.520571568280e+01, 6.831166370400e+01, 7.066410717430e+01, 
	7.449445105720e+01, 8.003379700800e+01, 8.410262855180e+01, 8.662952171910e+01, 8.887252930680e+01, 
	9.040655469610e+01, 9.283308088840e+01, 9.625819771790e+01, 9.878975225300e+01, 1.006310690620e+02, 
	1.037140904260e+02, 1.065342545460e+02, 1.086073174590e+02, 1.120375117650e+02, 1.159997226990e+02, 
	1.205640854720e+02, 1.288999326520e+02, 1.372324690880e+02, 1.484352573600e+02, 1.614758406000e+02, 
	1.814751999600e+02, 2.385261036100e+02, 3.488822955990e+02, 5.002372431100e+02, 6.174030329400e+02, 
	8.582072888500e+02, 1.397291315900e+03, 1.874562298600e+03, 2.994707128500e+03, 5.826352415700e+03, 
	7.717676283900e+03, 8.492978058000e+03, 8.860587019000e+03, 6.857546352500e+03, 4.126266947700e+03, 
	2.598012442000e+03, 2.043570764100e+03, 1.806394192541e+03, 1.572147432686e+03, 1.475767957970e+03, 
	1.412714336092e+03, 1.318647020600e+03, 1.361317475980e+03, 1.265622689000e+03, 1.318834424500e+03, 
	1.166127014000e+03, 1.385031507000e+03, 1.036130251000e+03, 1.662026369589e+03, 1.788268603008e+03, 
	1.514619387000e+03, 2.071515496770e+03, 2.276329471917e+03, 2.564697978633e+03, 3.017022360468e+03, 
	3.649678110849e+03, 4.336259712176e+03, 5.274542288630e+03, 8.176984572900e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetCHICrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::CHI).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {8.082575730000e-06, 4.209186950000e-05, 6.258555370000e-05, 
	4.768497310000e-04, 1.337711470000e-03, 4.988725760000e-03, 1.275756860000e-02, 1.097499950000e-02, 
	1.487907120000e-02, 4.317126050000e-02, 6.205504760000e-02, 7.931021600000e-02, 9.172122930000e-02, 
	4.833929990000e-02, 4.871755840000e-02, 9.511250260000e-02, 8.771246670000e-02, 4.008704050000e-02, 
	3.735477100000e-02, 3.452953320000e-02, 3.173023830000e-02, 2.896333860000e-02, 7.142603400000e-02, 
	1.913514730000e-02, 1.702905260000e-02, 1.509286460000e-02, 1.329487470000e-02, 3.091816980000e-02, 
	7.819732650000e-03, 6.820607930000e-03, 1.554419290000e-02, 1.267189530000e-02, 2.178892260000e-03, 
	4.917320800000e-03, 2.259662840000e-03, 1.680009880000e-03, 1.750122410000e-03, 4.306926280000e-04, 
	7.885260860000e-04, 1.800211610000e-04, 2.388237340000e-04, 6.693486940000e-04, 1.141501200000e-04, 
	2.566542830000e-04, 1.166882360000e-04, 8.568809430000e-05, 8.907747540000e-05, 2.190587840000e-05, 
	5.549037450000e-05, 5.830296690000e-06, 3.391897920000e-05, 5.781465920000e-06, 1.300756500000e-05, 
	1.662082920000e-06, 4.311856630000e-06, 4.452577290000e-06, 1.782040610000e-06, 2.868935330000e-06, 
	1.148904400000e-06, 3.234452830000e-06, 1.034782490000e-06, 7.747054840000e-07, 1.016082480000e-06, 
	4.789860100000e-07, 9.406109310000e-08, 3.248195530000e-07, 1.016229940000e-07, 4.648064690000e-08, 
	6.940836530000e-08, 2.145519320000e-08, 1.729362250000e-08, 1.388303070000e-08, 2.625612260000e-08, 
	1.372742990000e-08, 1.624951020000e-08, 1.418393670000e-08, 1.238731610000e-08, 1.082389640000e-08, 
	9.462779890000e-09, 1.201985440000e-08, 1.271646610000e-08, 7.560688080000e-09, 8.026674440000e-09, 
	4.054192540000e-09, 2.108616390000e-09, 2.453956590000e-09, 2.104361800000e-09, 3.368195280000e-09, 
	1.853458160000e-09, 6.602958740000e-10, 1.894604250000e-09, 2.559765460000e-10, 1.185596950000e-09, 
	1.496243410000e-10, 9.571972100000e-10, 8.375947850000e-11, 2.079740130000e-10, 8.590739920000e-11, 
	3.224328580000e-10, 3.818076690000e-10, 4.911421960000e-11, 1.301964090000e-10, 1.451236490000e-10, 
	1.436972760000e-10, 1.344042380000e-10, 1.331319080000e-10, 1.241383660000e-10, 1.383085170000e-10, 
	3.816587320000e-11, 5.324730590000e-11, 1.058474630000e-10, 4.885012880000e-11, 5.613439230000e-11, 
	9.671297790000e-11, 9.596895500000e-11, 2.937921430000e-11, 3.955020340000e-11, 1.899690300000e-11, 
	1.896714040000e-11, 3.784499450000e-11, 3.772595430000e-11, 1.447828490000e-11, 2.168440600000e-11, 
	3.461262870000e-11, 1.439198930000e-11, 2.011920140000e-11, 3.154615110000e-11, 2.860436190000e-11, 
	2.853392000000e-11, 7.102660820000e-11, 1.415248910000e-11, 8.454513480000e-11, 1.402921700000e-11, 
	1.046577890000e-10, 1.105431650000e-10, 1.162171330000e-10, 5.425016690000e-11, 2.027117020000e-11, 
	6.996660890000e-11, 4.415491240000e-11, 1.200896330000e-11, 5.452699750000e-11, 3.971024900000e-11, 
	7.263021780000e-12, 1.912242760000e-11, 2.631501270000e-11, 4.195749300000e-11, 3.656487270000e-11, 
	4.032149610000e-11, 1.167454240000e-11, 2.589235770000e-11, 2.582191580000e-11, 7.732777090000e-12, 
	2.444549770000e-11, 1.925417120000e-11, 6.409210840000e-12, 1.920133670000e-11, 3.835494420000e-12, 
	1.277353920000e-11, 1.148113290000e-11, 1.019348490000e-11, 1.018221970000e-11, 8.900197420000e-12, 
	6.352003990000e-12, 6.347603430000e-12, 6.343202870000e-12, 6.338802310000e-12, 6.334401750000e-12, 
	3.925120210000e-12, 2.404882720000e-12, 2.530769000000e-12, 3.794833370000e-12};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNUCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NU).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {5.480757740613e+00, 5.174511304026e+00, 4.978425577090e+00, 
	4.725668362063e+00, 4.479218395939e+00, 4.219670384702e+00, 3.978846814542e+00, 3.826841552159e+00, 
	3.728051894455e+00, 3.599364562602e+00, 3.461788914385e+00, 3.358452326773e+00, 3.278071217658e+00, 
	3.223963213267e+00, 3.194515928569e+00, 3.152361841578e+00, 3.097622782516e+00, 3.061060266106e+00, 
	3.040820331395e+00, 3.023571099422e+00, 3.008833872238e+00, 2.996157574458e+00, 2.974590419097e+00, 
	2.956003180211e+00, 2.948652082339e+00, 2.942211839218e+00, 2.936576848676e+00, 2.927017769758e+00, 
	2.918882839091e+00, 2.915463045799e+00, 2.909659618493e+00, 2.901934311942e+00, 2.898202659070e+00, 
	2.896568078229e+00, 2.896131022025e+00, 2.895967610598e+00, 2.895741819675e+00, 2.895475029213e+00, 
	2.895283805057e+00, 2.895133700098e+00, 2.895060034454e+00, 2.894876577076e+00, 2.894729292169e+00, 
	2.894636176304e+00, 2.894543973787e+00, 2.894483897654e+00, 2.894426095828e+00, 2.894387728240e+00, 
	2.894347661683e+00, 2.894329696892e+00, 2.894307157181e+00, 2.894287034873e+00, 2.894273960980e+00, 
	2.894264664704e+00, 2.894260984244e+00, 2.894253659439e+00, 2.894240885000e+00, 2.894199978912e+00, 
	2.894167704339e+00, 2.877804868441e+00, 2.871232545607e+00, 2.857368066849e+00, 2.866547019823e+00, 
	2.875394212120e+00, 2.860002755284e+00, 2.872161351233e+00, 2.876636205344e+00, 2.865227250937e+00, 
	2.879766526415e+00, 2.815940099554e+00, 2.866256918552e+00, 2.890904937050e+00, 2.795420495538e+00, 
	2.887206683189e+00, 2.839744416818e+00, 2.888188459355e+00, 2.882419650745e+00, 2.852666576404e+00, 
	2.857740501096e+00, 2.857839312462e+00, 2.853815173722e+00, 2.862058891503e+00, 2.849104247812e+00, 
	2.863805645997e+00, 2.873568083711e+00, 2.878916663060e+00, 2.853553821838e+00, 2.862085205051e+00, 
	2.871537907518e+00, 2.873468802323e+00, 2.874958998836e+00, 2.875965995334e+00, 2.876687709004e+00, 
	2.877259226799e+00, 2.877778057905e+00, 2.878206147409e+00, 2.878325164406e+00, 2.878442831026e+00, 
	2.878612588955e+00, 2.878862825705e+00, 2.878995977995e+00, 2.879044392930e+00, 2.879099971638e+00, 
	2.879148877387e+00, 2.879184141084e+00, 2.879175753944e+00, 2.879158908254e+00, 2.879092203805e+00, 
	2.879025439287e+00, 2.878984702267e+00, 2.878897870105e+00, 2.878775715056e+00, 2.878684426809e+00, 
	2.878537771359e+00, 2.878281365159e+00, 2.878102955460e+00, 2.877989185303e+00, 2.877874347642e+00, 
	2.877787832588e+00, 2.877660286319e+00, 2.877491773305e+00, 2.877375643787e+00, 2.877282113511e+00, 
	2.877110640646e+00, 2.876952291289e+00, 2.876836230573e+00, 2.876680639202e+00, 2.876446016628e+00, 
	2.876247808090e+00, 2.875766603786e+00, 2.875413031945e+00, 2.874775946210e+00, 2.874207469491e+00, 
	2.873160604841e+00, 2.871430859999e+00, 2.868712786052e+00, 2.866198544475e+00, 2.865027481818e+00, 
	2.863325159751e+00, 2.861233650048e+00, 2.860234205918e+00, 2.859153892364e+00, 2.858057919958e+00, 
	2.857689381783e+00, 2.857600783720e+00, 2.857461070928e+00, 2.858482222337e+00, 2.859438722845e+00, 
	2.861311000737e+00, 2.864497560588e+00, 2.864838559855e+00, 2.866926235984e+00, 2.868182670311e+00, 
	2.869627244868e+00, 2.872137662310e+00, 2.872390470426e+00, 2.874832543580e+00, 2.875604067195e+00, 
	2.877855648410e+00, 2.877788835769e+00, 2.883094977681e+00, 2.877277995343e+00, 2.877937246177e+00, 
	2.885182181626e+00, 2.878767848922e+00, 2.879109446358e+00, 2.879473131624e+00, 2.879836408315e+00, 
	2.880130627390e+00, 2.880313830060e+00, 2.880448089315e+00, 2.880595645224e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetSCATT01CrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::SCATT01).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.977320172947e+00, 2.794378839608e+00, 2.660038343729e+00, 
	2.517561123675e+00, 2.455820168666e+00, 2.620672500077e+00, 3.049090338735e+00, 3.307009338256e+00, 
	3.501010729471e+00, 3.743848928138e+00, 3.846842262481e+00, 3.556003320257e+00, 3.096457289130e+00, 
	2.724825666398e+00, 2.478804250759e+00, 2.222959324884e+00, 2.009129144096e+00, 1.984678752396e+00, 
	2.010285860762e+00, 2.048004414080e+00, 2.111143961186e+00, 2.198643435663e+00, 2.353714685764e+00, 
	2.457472226604e+00, 2.490578865862e+00, 2.499268251826e+00, 2.492854362327e+00, 2.452563732864e+00, 
	2.385143225056e+00, 2.329348036056e+00, 2.204614115726e+00, 1.874406023339e+00, 1.632696379898e+00, 
	1.457041514106e+00, 1.230836175070e+00, 1.059498109440e+00, 8.747066064460e-01, 7.453506347860e-01, 
	6.441908475142e-01, 5.686504201618e-01, 5.282143950379e-01, 4.256555792394e-01, 3.390522952020e-01, 
	2.867037405700e-01, 2.304516896096e-01, 1.970831791196e-01, 1.659135630800e-01, 1.434398907000e-01, 
	1.224595766000e-01, 1.055269952000e-01, 9.308453369000e-02, 7.643148860000e-02, 7.052561036000e-02, 
	6.196961210000e-02, 5.999406326000e-02, 5.718197820000e-02, 5.689367660000e-02, 5.050724710000e-02, 
	4.697550040000e-02, 4.683926390000e-02, 3.778594260000e-02, 4.104816630000e-02, 3.707835830000e-02, 
	3.131146210000e-02, 3.158804080000e-02, 3.007762850000e-02, 2.979208540000e-02, 2.188220460000e-02, 
	1.978352710000e-02, 2.726633950000e-02, 1.940890360000e-02, 2.197584480000e-02, 2.055440751000e-02, 
	2.119900948400e-02, 2.334758802000e-02, 2.460543058500e-02, 2.813885169000e-02, 2.241120750000e-02, 
	2.847525420000e-02, 2.104564908000e-02, 2.408685130000e-02, 1.276680330000e-02, 1.890000700000e-02, 
	8.682568500000e-03, 2.003142330000e-02, 2.349056210000e-02, 1.212343550000e-02, 1.858834863000e-02, 
	2.211074478000e-02, 2.273639680000e-02, 2.319429578000e-02, 2.347777370000e-02, 2.597710749788e-02, 
	2.662142802280e-02, 2.626693056663e-02, 2.811410651715e-02, 2.861780566964e-02, 2.874896361124e-02, 
	2.852777243815e-02, 2.842442243686e-02, 2.829629245487e-02, 2.830141488136e-02, 2.846286397646e-02, 
	2.877135666269e-02, 2.887859404919e-02, 2.894393365393e-02, 2.942140690748e-02, 2.969245719255e-02, 
	2.975888001899e-02, 2.981995473946e-02, 3.000671453699e-02, 3.008235422975e-02, 3.028187892427e-02, 
	3.047171940138e-02, 3.068815415217e-02, 3.085996702297e-02, 3.091889872566e-02, 3.127465850161e-02, 
	3.136256156582e-02, 3.134716544921e-02, 3.129030789253e-02, 3.138769521658e-02, 3.128076931678e-02, 
	3.117733280486e-02, 3.158142241695e-02, 3.177935756479e-02, 3.182856499365e-02, 3.168863361908e-02, 
	3.145060621141e-02, 3.194213433474e-02, 3.213190933506e-02, 3.250917360090e-02, 3.304621837690e-02, 
	3.321478989476e-02, 3.404875570751e-02, 3.562648408931e-02, 3.689256463622e-02, 3.804799892643e-02, 
	3.980001866728e-02, 4.355054759329e-02, 4.561845345559e-02, 4.921660414002e-02, 5.367183099801e-02, 
	5.194786591949e-02, 5.048021553639e+00, 6.038634287151e+00, 7.024989718268e+00, 8.019113643066e+00, 
	9.019169737430e+00, 1.002000058509e+01, 1.102041809191e+01, 1.202150100470e+01, 1.302184960927e+01, 
	1.402198348515e+01, 1.502261361015e+01, 1.602298308196e+01, 1.702334071075e+01, 1.802353610151e+01, 
	1.902386497161e+01, 2.002433980202e+01, 2.102456031856e+01, 2.202485609843e+01, 2.302502992082e+01, 
	2.402455153160e+01, 2.502444326548e+01, 2.602481852060e+01, 2.702509173745e+01, 2.802533691465e+01, 
	2.902525331282e+01, 3.002485248321e+01, 3.102479036618e+01, 3.200931531646e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetSCATT01CrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::SCATT01).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();

	//PrintFuncs::createCppVector(xs, "%13.12e");

	std::vector<double> ref {3.017118782564e-02, 3.079845490096e-02, 3.092943192332e-02, 
	2.971895605718e-02, 2.622725430065e-02, 2.231561312752e-02, 2.082534849241e-02, 2.042874947594e-02, 
	2.066241155590e-02, 2.184355670439e-02, 2.417211660346e-02, 2.684940134138e-02, 2.945073473612e-02, 
	3.123594980768e-02, 3.229433825144e-02, 3.352595917981e-02, 3.439882748197e-02, 3.433429811193e-02, 
	3.388112223391e-02, 3.326432372728e-02, 3.260799601876e-02, 3.190643267244e-02, 3.070837836788e-02, 
	2.966956986164e-02, 2.917929776883e-02, 2.868650027251e-02, 2.815601101039e-02, 2.704808174664e-02, 
	2.594785330306e-02, 2.542014108435e-02, 2.446170228815e-02, 2.319864307319e-02, 2.267765062757e-02, 
	2.271290006300e-02, 2.343487674066e-02, 2.411620916796e-02, 2.503190543976e-02, 2.581624151686e-02, 
	2.652779338929e-02, 2.720378415685e-02, 2.759988454095e-02, 2.606319544132e-02, 2.077729659835e-02, 
	2.186358681496e-02, 2.134842081593e-02, 2.688441762987e-02, 2.587346011342e-02, 2.038690715241e-02, 
	3.919428803747e-02, 3.982537555652e-02, 5.482482281286e-02, 1.066994862617e-01, 1.090790020317e-02, 
	1.283590209001e-02, 1.524473352180e-02, 7.591208870294e-02, 1.190288003786e-02, 1.269024591171e-02, 
	1.298115776486e-02, 1.415632416604e-02, 1.424562046049e-02, 1.487570384046e-02, 1.599090234113e-02, 
	1.766417672174e-02, 1.881662833697e-02, 2.064688516064e-02, 2.498301787659e-02, 2.340199246861e-01, 
	2.261921086582e-02, 2.477571093774e-02, 2.560618527405e-02, 2.630093647927e-02, 2.728558039117e-02, 
	2.833853025656e-02, 2.924408565312e-02, 3.026773713934e-02, 3.127993658926e-02, 3.227751221691e-02, 
	3.325737540628e-02, 3.445105762479e-02, 3.605205214559e-02, 3.756350570321e-02, 3.896337293774e-02, 
	4.016654040254e-02, 4.085535207329e-02, 4.142382163024e-02, 4.203763299012e-02, 4.288167157913e-02, 
	4.375137501808e-02, 4.421334367274e-02, 4.475315198650e-02, 4.520201348427e-02, 4.555036207354e-02, 
	4.586547880044e-02, 4.616136642367e-02, 4.643008405337e-02, 4.651147407174e-02, 4.659317798645e-02, 
	4.671116553885e-02, 4.691795312546e-02, 4.704465260829e-02, 4.709954665822e-02, 4.718435768191e-02, 
	4.727462122633e-02, 4.736276563160e-02, 4.744879089772e-02, 4.753260935254e-02, 4.761958110035e-02, 
	4.767808549067e-02, 4.770902742021e-02, 4.776332127168e-02, 4.781600386286e-02, 4.785227825407e-02, 
	4.790573648483e-02, 4.797350682002e-02, 4.801765752095e-02, 4.804231135747e-02, 4.806324864007e-02, 
	4.807693290341e-02, 4.809747776717e-02, 4.812482325026e-02, 4.814377069925e-02, 4.815699326774e-02, 
	4.817759816104e-02, 4.819551140778e-02, 4.820825388528e-02, 4.822736752893e-02, 4.824965755757e-02, 
	4.827088569291e-02, 4.830840201758e-02, 4.834017961624e-02, 4.837804682318e-02, 4.841523051650e-02, 
	4.846171273523e-02, 4.854582233326e-02, 4.863623793634e-02, 4.870425332755e-02, 4.873453047848e-02, 
	4.877246671938e-02, 4.881993216368e-02, 4.884350585599e-02, 4.887248559455e-02, 4.891329841169e-02, 
	4.893373701351e-02, 4.894554201376e-02, 4.896604548620e-02, 4.899755517888e-02, 4.903437893709e-02, 
	4.907304521450e-02, 4.909818838849e-02, 4.911928731512e-02, 4.914797126302e-02, 4.916605999930e-02, 
	4.918754234033e-02, 4.921648044551e-02, 4.923454594456e-02, 4.925676703606e-02, 4.927644365017e-02, 
	4.929406183241e-02, 4.932239044424e-02, 4.935309215885e-02, 4.938948699640e-02, 4.943366533995e-02, 
	4.948066894417e-02, 4.953390545298e-02, 4.960833819433e-02, 4.972241995456e-02, 4.992382870186e-02, 
	5.025274064990e-02, 5.067600158740e-02, 5.137698332506e-02, 5.484002141786e-02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetDIFFCOEFFCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::DIFFCOEFF).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {9.521159721158e+00, 9.635656111175e+00, 9.704138178813e+00, 
	9.836675628974e+00, 1.017040419400e+01, 1.047141470977e+01, 1.058503116379e+01, 1.096214925523e+01, 
	1.125909426159e+01, 1.171689567559e+01, 1.229329355256e+01, 1.305312470923e+01, 1.380115758261e+01, 
	1.426333009081e+01, 1.451526791772e+01, 1.464890014535e+01, 1.466219014771e+01, 1.452950474281e+01, 
	1.450600574771e+01, 1.460156599776e+01, 1.477534850644e+01, 1.511913802301e+01, 1.609664518271e+01, 
	1.724254591019e+01, 1.789171249241e+01, 1.863739955452e+01, 1.944576572302e+01, 2.117058428141e+01, 
	2.295994972483e+01, 2.387649709183e+01, 2.561698885282e+01, 2.866132102998e+01, 3.064719996031e+01, 
	3.207479455768e+01, 3.386848267479e+01, 3.530175507168e+01, 3.705529018066e+01, 3.842879749564e+01, 
	3.959243745746e+01, 4.074026813951e+01, 4.127299711489e+01, 4.287784416228e+01, 4.450388401439e+01, 
	4.584061817829e+01, 4.716293583117e+01, 4.884775926264e+01, 5.087464991076e+01, 5.277191852790e+01, 
	5.443227157020e+01, 5.300247841440e+01, 5.995690669893e+01, 5.755058613420e+01, 6.301393466892e+01, 
	6.093879356370e+01, 6.844654571022e+01, 6.964019496540e+01, 8.622901927020e+01, 6.940866645870e+01, 
	6.443809499880e+01, 1.046988073083e+02, 7.449154067220e+01, 1.059281785011e+02, 1.508731513251e+02, 
	1.328751856137e+02, 1.401547552776e+02, 1.655156744145e+02, 2.975144139438e+02, 4.090026353862e+02, 
	3.833220494187e+02, 4.742374009815e+02, 2.840021675892e+02, 1.466197375656e+02, 4.355479397775e+02, 
	2.781305472155e+01, 4.989831813594e+01, 5.532241430825e+01, 3.383400314493e+01, 2.556968654775e+02, 
	8.245996153740e+01, 3.308050570528e+02, 3.215364514461e+02, 8.775058265901e+02, 4.581824969790e+02, 
	9.937842852945e+02, 4.919078513010e+01, 5.189577011370e+01, 1.148454871694e+03, 7.532085435411e+01, 
	5.066282626566e+01, 5.064610050960e+01, 5.244526591266e+01, 5.469867817890e+01, 5.724812787751e+01, 
	5.997697281593e+01, 6.336929840830e+01, 6.695682958045e+01, 6.825315868299e+01, 6.962628520917e+01, 
	7.184197568269e+01, 7.633072133269e+01, 7.949918522264e+01, 8.106305065536e+01, 8.362887520807e+01, 
	8.668817443001e+01, 9.004271101785e+01, 9.373805839904e+01, 9.781741737928e+01, 1.026323125284e+02, 
	1.062701556599e+02, 1.082489317385e+02, 1.122490753277e+02, 1.164994723010e+02, 1.197270832172e+02, 
	1.250183292708e+02, 1.327610496205e+02, 1.384778304959e+02, 1.420261350698e+02, 1.452051180975e+02, 
	1.473249491473e+02, 1.507274850227e+02, 1.555782063693e+02, 1.591519890624e+02, 1.617183353870e+02, 
	1.660116167796e+02, 1.699619090657e+02, 1.728361536733e+02, 1.779217430460e+02, 1.831806641471e+02, 
	1.900603823574e+02, 2.019333952070e+02, 2.152020460160e+02, 2.314701295392e+02, 2.510323562449e+02, 
	2.794585197003e+02, 3.715301083329e+02, 5.521982406177e+02, 7.979782836761e+02, 1.001654718573e+03, 
	1.404820825354e+03, 2.327880833857e+03, 3.160781029640e+03, 5.123772649188e+03, 1.012371652641e+04, 
	1.346618818270e+04, 1.488699915194e+04, 1.562901361204e+04, 1.187074723285e+04, 7.185906319371e+03, 
	4.519067986088e+03, 3.288303552645e+03, 3.048100832835e+03, 2.594137167166e+03, 2.401951878272e+03, 
	2.260005257971e+03, 2.029467863970e+03, 2.097598120734e+03, 1.889562552568e+03, 1.919482568695e+03, 
	1.569724272085e+03, 1.919413279194e+03, 1.565374577044e+03, 2.379405864902e+03, 2.534932862416e+03, 
	1.898729782405e+03, 2.895890372414e+03, 3.165193616320e+03, 3.547835422661e+03, 4.155083381887e+03, 
	5.011405738354e+03, 5.945219181008e+03, 7.226467614380e+03, 1.120928440828e+04};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-7));
}

TEST_F(XSTests, GetDIFFCOEFFCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::DIFFCOEFF).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();

	// PrintFuncs::createCppVector(xs, "%13.12e");

	std::vector<double> ref {1.353279795652e+01, 1.432126087530e+01, 1.464087764423e+01, 
	1.469539237183e+01, 1.436895769710e+01, 1.363951601062e+01, 1.284364998452e+01, 1.259925099157e+01, 
	1.274380700533e+01, 1.347328626989e+01, 1.491207847019e+01, 1.656822497598e+01, 1.817780731579e+01, 
	1.928249997058e+01, 1.993788795525e+01, 2.070154806246e+01, 2.124346794755e+01, 2.120361579566e+01, 
	2.092312736330e+01, 2.054096266882e+01, 2.013474238194e+01, 1.970096591198e+01, 1.896065550490e+01, 
	1.831924926042e+01, 1.801680219669e+01, 1.771292501918e+01, 1.738599236697e+01, 1.670370920476e+01, 
	1.602673874009e+01, 1.570234121675e+01, 1.511475434314e+01, 1.434738767078e+01, 1.403331686812e+01, 
	1.406199872981e+01, 1.451556945978e+01, 1.494362016250e+01, 1.552029031368e+01, 1.601552354545e+01, 
	1.646606137983e+01, 1.689474037753e+01, 1.714639783638e+01, 1.619366101368e+01, 1.290086011020e+01, 
	1.361862192956e+01, 1.334696834755e+01, 1.706581347711e+01, 1.629726707966e+01, 1.290999063854e+01, 
	2.450770800589e+01, 2.510054704333e+01, 3.432634463156e+01, 6.769491424121e+01, 7.041321479391e+00, 
	7.976991413730e+00, 9.884674039435e+00, 4.795904283389e+01, 8.175942209886e+00, 8.665334172265e+00, 
	8.849138316705e+00, 9.487870997502e+00, 8.788309018619e+00, 9.237351738479e+00, 9.917703352977e+00, 
	1.091121558983e+01, 1.163116647499e+01, 1.278724243452e+01, 1.581012843637e+01, 3.437975372259e+02, 
	1.436121809740e+01, 1.548561080719e+01, 1.599254026418e+01, 1.642483225056e+01, 1.704622361883e+01, 
	1.771732061923e+01, 1.829939704304e+01, 1.896182148858e+01, 1.962139495023e+01, 2.027591822335e+01, 
	2.092335781378e+01, 2.171910222713e+01, 2.279976563356e+01, 2.383645909289e+01, 2.481683618119e+01, 
	2.567768477879e+01, 2.618095796378e+01, 2.660376542511e+01, 2.706848531103e+01, 2.772636884526e+01, 
	2.843078428495e+01, 2.882013973898e+01, 2.929631399404e+01, 2.970655417955e+01, 3.004417421378e+01, 
	3.036036756360e+01, 3.067700200073e+01, 3.097577614784e+01, 3.107149927778e+01, 3.116785086604e+01, 
	3.131296870338e+01, 3.157812584062e+01, 3.174901244218e+01, 3.182537716003e+01, 3.194569182695e+01, 
	3.207934853632e+01, 3.221522020311e+01, 3.235290332731e+01, 3.249256737194e+01, 3.264560285670e+01, 
	3.275154004353e+01, 3.281116221774e+01, 3.291589613618e+01, 3.302049718841e+01, 3.309571896524e+01, 
	3.321145009055e+01, 3.336598827954e+01, 3.347255172744e+01, 3.353371796593e+01, 3.358759695408e+01, 
	3.362454890129e+01, 3.368005416670e+01, 3.375588653025e+01, 3.381247208790e+01, 3.385218932020e+01, 
	3.391439760552e+01, 3.397206206578e+01, 3.401547703834e+01, 3.408259089741e+01, 3.416967642733e+01, 
	3.425734894292e+01, 3.445572269395e+01, 3.467759706115e+01, 3.530325495953e+01, 3.666905000845e+01, 
	3.942054806179e+01, 3.654336833300e+01, 3.572870688619e+01, 3.598881014002e+01, 3.615331400856e+01, 
	3.638958639984e+01, 3.672279050351e+01, 3.690739588243e+01, 3.715809784322e+01, 3.754767810476e+01, 
	3.776269428896e+01, 3.789519287396e+01, 3.813892756354e+01, 3.855253123446e+01, 3.910149966319e+01, 
	3.977580406436e+01, 4.027124913483e+01, 4.073891163805e+01, 4.144464848621e+01, 4.193220432000e+01, 
	4.256975297298e+01, 4.351090835866e+01, 4.414620166217e+01, 4.498364229889e+01, 4.575780736905e+01, 
	4.648207391450e+01, 4.768025132867e+01, 4.901063792352e+01, 5.059611333901e+01, 5.249766850398e+01, 
	5.446096149317e+01, 5.658845308364e+01, 5.939141418542e+01, 6.333113544014e+01, 6.945126651389e+01, 
	7.796974247805e+01, 8.721036629524e+01, 9.987666125002e+01, 1.397475014357e+02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetLambdas)
{	
    std::vector<double> lambdas = library_->getNuclide("Pu239")->getLambdas();
	std::vector<double> ref {1.248109990000e-02, 2.994666990000e-02, 1.071553010000e-01, 
	3.176192940000e-01, 1.352380040000e+00, 1.069116020000e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(lambdas, ref, 1.0E-9));
}

TEST_F(XSTests, GetPotXS)
{	
    double potXS = library_->getNuclide("Pu239")->getPotXS();
    EXPECT_EQ(potXS, 11.1471);
}