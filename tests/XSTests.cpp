#include "gtest/gtest.h"
#include "file_tools.h"
#include "network_tools.h"
#include "Library.h"
#include "additionalPrintFuncs.h"


class XSTests : public ::testing::Test 
{
 protected:
	static std::string* url_;
	static std::string* target_;
	static Library* library_;
	static std::vector<std::string>* nucVec_;
	static std::vector < std::shared_ptr<Nuclide> >* nuclides_;

  	static void SetUpTestSuite() 
	{
    	library_ = new Library;
		url_ = new std::string("https://www.polymtl.ca/merlin/downloads/libraries/ascii/draglibendfb7r0.gz");
    	target_ =  new std::string(File::getPrePath() + "draglibendfb7r0.gz");
		library_->downloadLibrary(*url_, *target_);
		library_->setXSLibraryPath(*target_);
		nucVec_ = new std::vector<std::string> {"Pu239", "La139", "U238"};
		nuclides_ = new std::vector < std::shared_ptr<Nuclide> > {library_->readNuclides(*nucVec_)};
  	}

	static void TearDownTestSuite() 
	{
    	delete library_;
		delete url_;
		delete target_;
		delete nucVec_;
		delete nuclides_;
    	library_ = nullptr;
		url_ = nullptr;
		target_ = nullptr;
		nucVec_ = nullptr;
		nuclides_ = nullptr;
  	}

	virtual void SetUp() {}
  	virtual void TearDown() {}
};

Library* XSTests::library_ = nullptr;
std::string* XSTests::url_ = nullptr;
std::string* XSTests::target_ = nullptr;
std::vector<std::string>* XSTests::nucVec_ = nullptr;
std::vector < std::shared_ptr<Nuclide> >* XSTests::nuclides_ = nullptr;

TEST_F(XSTests, GetNuclides)
{	
    size_t numberOfNuclides = library_->getNumberOfNuclidesRead();
    EXPECT_EQ(numberOfNuclides, 2);
}

TEST_F(XSTests, GetLibraryNuclides)
{	
    std::vector<std::string> nuclideVec = library_->getLibraryNuclides();

    std::vector<std::string> refVec {"Ag107", "Ag109", "Ag111", "Al27", "Am241", 
	"Am242", "Am242m", "Am243", "As75", "B10", "B11", "Ba134", "Ba135", "Ba136", 
	"Ba137", "Ba138", "Ba140", "Be7", "Be9", "Bi209", "Bk249", "Br79", "Br81", 
	"C0", "C0_GR", "Ca40", "Ca42", "Ca43", "Ca44", "Ca46", "Ca48", 
	"Cd106", "Cd108", "Cd110", "Cd111", "Cd112", "Cd113", "Cd114", 
	"Cd115m", "Cd116", "Ce140", "Ce141", "Ce142", "Ce143", "Ce144", 
	"Cf249", "Cf250", "Cf251", "Cf252", "Cf253", "Cl35", "Cl37", 
	"Cm241", "Cm242", "Cm243", "Cm244", "Cm245", "Cm246", "Cm247", 
	"Cm248", "Co59", "Cr50", "Cr52", "Cr53", "Cr54", "Cs133", 
	"Cs134", "Cs135", "Cs136", "Cs137", "Cu63", "Cu65", "DEPL-CHAIN", 
	"Dy160", "Dy161", "Dy162", "Dy163", "Dy164", "Er166", "Er167", 
	"Eu151", "Eu152", "Eu153", "Eu154", "Eu155", "Eu156", "Eu157", 
	"F19", "Fe54", "Fe56", "Fe57", "Fe58", "Gd152", "Gd154", "Gd155", 
	"Gd156", "Gd157", "Gd158", "Gd160", "Ge72", "Ge73", "Ge74", "Ge76", 
	"H1", "H1_CH2", "H1_H2O", "H1_ZRH", "H2", "H2_D2O", "H3", "He3", 
	"He4", "Hf174", "Hf176", "Hf177", "Hf178", "Hf179", "Hf180", 
	"Ho165", "I127", "I129", "I130", "I131", "I135", "In113", "In115", 
	"K39", "K40", "K41", "Kr80", "Kr82", "Kr83", "Kr84", "Kr85", "Kr86", 
	"La138", "La139", "La140", "Li6", "Li7", "Mg24", "Mg25", "Mg26", 
	"Mn55", "Mo100", "Mo92", "Mo94", "Mo95", "Mo96", "Mo97", "Mo99", 
	"N14", "N15", "Na23", "Nb94", "Nb95", "Nd142", "Nd143", "Nd144", 
	"Nd145", "Nd146", "Nd147", "Nd148", "Nd150", "Ni58", "Ni60", "Ni61", 
	"Ni62", "Ni64", "Np236", "Np237", "Np238", "Np239", "O16", "O17", 
	"P31", "Pa231", "Pa233", "Pb204", "Pb206", "Pb207", 
	"Pb208", "Pd104", "Pd105", "Pd106", "Pd107", "Pd108", "Pd110", "Pm147", 
	"Pm148", "Pm148m", "Pm149", "Pm151", "Pr141", "Pr142", "Pr143", "Pu236", 
	"Pu237", "Pu238", "Pu239", "Pu240", "Pu241", "Pu242", "Pu243", "Pu244", 
	"Rb85", "Rb87", "Rh103", "Rh105", "Ru100", "Ru101", "Ru102", "Ru103", 
	"Ru104", "Ru105", "Ru106", "Ru99", "S32", "S33", "S34", "S36", 
	"Sb121", "Sb123", "Sb124", "Sb125", "Sb126", "Se76", "Se77", "Se78", 
	"Se79", "Se80", "Se82", "Si28", "Si29", "Si30", "Sm147", "Sm148", 
	"Sm149", "Sm150", "Sm151", "Sm152", "Sm153", "Sm154", "Sn112", 
	"Sn114", "Sn115", "Sn116", "Sn117", "Sn118", "Sn119", "Sn120", "Sn122", 
	"Sn123", "Sn124", "Sn125", "Sn126", "Sr86", "Sr87", "Sr88", "Sr89", 
	"Sr90", "Tb159", "Tb160", "Tc99", "Te122", "Te123", "Te124", "Te125", 
	"Te126", "Te127m", "Te128", "Te129m", "Te130", "Te132", "Th230", "Th232", 
	"Ti46", "Ti47", "Ti48", "Ti49", "Ti50", "U232", "U233", "U234", "U235", 
	"U236", "U237", "U238", "V0", "W182", "W183", "W184", "W186", "Xe128", 
	"Xe129", "Xe130", "Xe131", "Xe132", "Xe133", "Xe134", "Xe135", "Xe136", 
	"Y89", "Y90", "Y91", "Zn0", "Zr90", "Zr90_ZRH", "Zr91", "Zr92", "Zr93", 
	"Zr94", "Zr95", "Zr96"};

    bool areEqual = std::equal(refVec.begin(), refVec.end(), nuclideVec.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNuclide)
{	
	size_t size = library_->getNuclide("La139")->getCopyOfXSSets().size();
    EXPECT_EQ(size, 17);
}

TEST_F(XSTests, NonFissionableNuclide)
{	
	bool notFissionable = library_->getNuclide("La139")->isFissionable();
    EXPECT_FALSE(notFissionable);
}

TEST_F(XSTests, FissionableNuclide)
{	
	bool fissionable = library_->getNuclide("Pu239")->isFissionable();
    EXPECT_TRUE(fissionable);
}

TEST_F(XSTests, NonResonantNuclide)
{	
	bool notFissionable = library_->getNuclide("La139")->isResonant();
    EXPECT_FALSE(notFissionable);
}

TEST_F(XSTests, ResonantNuclide)
{	
	bool fissionable = library_->getNuclide("Pu239")->isResonant();
    EXPECT_TRUE(fissionable);
}


TEST_F(XSTests, GetTotalCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetINELCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NINEL).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetELASCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NELAS).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetN2NCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::N2N).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetN3NCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::N3N).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetN4NCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::N4N).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNNPCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NNP).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNGCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NG).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNPCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NP).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNDCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::ND).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNTCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NT).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNACrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NA).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetTotalCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetINELCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NINEL).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetELASCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NELAS).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetN2NCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::N2N).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetN3NCrossSectionSetResonant)
{	  
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::N3N).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetN4NCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::N4N).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNNPCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NNP).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNGCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NG).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNPCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NP).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNDCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::ND).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNTCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NT).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNACrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NA).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNFTOTCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NFTOT).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNUSIGFCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NUSIGF).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetCHICrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::CHI).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNUCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NU).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetSCATT01CrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::SCATT01).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetSCATT01CrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::SCATT01).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetTRANSPCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::TRANSP).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetTRANSPCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::TRANSP).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNWT0CrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NWT0).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNWT0CrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NWT0).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetTotalCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {4.54110384e+00, 4.80455208e+00, 4.91122198e+00, 
	4.92818308e+00, 4.81587982e+00, 4.56882095e+00, 4.30204201e+00, 4.22017908e+00, 
	4.26859808e+00, 4.51293898e+00, 4.99486494e+00, 5.54959106e+00, 6.08871984e+00, 
	6.45873594e+00, 6.67825699e+00, 6.93404198e+00, 7.11555481e+00, 7.10220623e+00, 
	7.00825691e+00, 6.88025188e+00, 6.74418879e+00, 6.59889507e+00, 6.35092688e+00, 
	6.13608599e+00, 6.03478003e+00, 5.93299484e+00, 5.82348680e+00, 5.59495115e+00, 
	5.36819410e+00, 5.25953388e+00, 5.06271315e+00, 4.80566120e+00, 4.70044994e+00, 
	4.71004581e+00, 4.86195803e+00, 5.00532293e+00, 5.19846201e+00, 5.36432409e+00, 
	5.51521492e+00, 5.65878391e+00, 5.74306583e+00, 5.42385197e+00, 4.32109118e+00, 
	4.56141996e+00, 4.47037601e+00, 5.72132683e+00, 5.45120478e+00, 4.33354521e+00, 
	8.20845509e+00, 8.40700722e+00, 1.14971905e+01, 2.26723309e+01, 2.35801911e+00, 
	2.66417193e+00, 3.31265807e+00, 1.60623894e+01, 2.73721600e+00, 2.90113401e+00, 
	2.96272206e+00, 3.17677999e+00, 2.94368100e+00, 3.09399199e+00, 3.32189202e+00, 
	3.65472603e+00, 3.89585996e+00, 4.28305817e+00, 5.29422522e+00, 1.14840103e+02, 
	4.80964518e+00, 5.18665504e+00, 5.35645485e+00, 5.50124216e+00, 5.70934391e+00, 
	5.93407679e+00, 6.12901402e+00, 6.35085583e+00, 6.57172298e+00, 6.79089022e+00, 
	7.00767994e+00, 7.27411509e+00, 7.63594389e+00, 7.98301697e+00, 8.31119919e+00, 
	8.59934044e+00, 8.76777935e+00, 8.90929127e+00, 9.06481647e+00, 9.28493786e+00, 
	9.52058983e+00, 9.65082455e+00, 9.81008053e+00, 9.94725704e+00, 1.00601263e+01, 
	1.01658087e+01, 1.02716179e+01, 1.03714695e+01, 1.04034576e+01, 1.04356575e+01, 
	1.04841280e+01, 1.05726910e+01, 1.06297464e+01, 1.06552401e+01, 1.06954088e+01, 
	1.07400303e+01, 1.07853889e+01, 1.08313599e+01, 1.08779898e+01, 1.09290581e+01, 
	1.09644089e+01, 1.09843025e+01, 1.10192394e+01, 1.10541286e+01, 1.10792189e+01, 
	1.11178293e+01, 1.11693687e+01, 1.12048855e+01, 1.12252598e+01, 1.12432194e+01, 
	1.12555199e+01, 1.12740107e+01, 1.12992697e+01, 1.13180981e+01, 1.13313208e+01, 
	1.13520174e+01, 1.13711786e+01, 1.13855906e+01, 1.14078608e+01, 1.14366713e+01, 
	1.14655886e+01, 1.15300016e+01, 1.16005402e+01, 1.17829800e+01, 1.21841021e+01, 
	1.32906504e+01, 1.21755733e+01, 1.19541607e+01, 1.20430355e+01, 1.20980005e+01, 
	1.21767998e+01, 1.22878103e+01, 1.23493004e+01, 1.24327793e+01, 1.25624542e+01, 
	1.26340332e+01, 1.26781158e+01, 1.27592268e+01, 1.28968506e+01, 1.30794840e+01, 
	1.33037720e+01, 1.34685259e+01, 1.36240377e+01, 1.38586750e+01, 1.40207281e+01, 
	1.42325993e+01, 1.45453300e+01, 1.47563810e+01, 1.50345287e+01, 1.52916317e+01, 
	1.55320902e+01, 1.59297228e+01, 1.63711815e+01, 1.68970661e+01, 1.75275230e+01, 
	1.81780815e+01, 1.88826370e+01, 1.98104248e+01, 2.11133747e+01, 2.31346550e+01, 
	2.59432449e+01, 2.89832954e+01, 3.31386414e+01, 4.61073036e+01};

    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetInelCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NINEL).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 4.44751501e-01, 5.34929395e-01, 6.28362477e-01, 
	9.15886104e-01, 1.54972100e+00, 2.12181091e+00, 2.14398789e+00, 2.14158392e+00, 
	2.16643095e+00, 2.23892808e+00, 2.29722404e+00, 2.18650389e+00, 1.91091895e+00, 
	1.74666297e+00, 1.65001297e+00, 1.46051502e+00, 1.04663599e+00, 7.28291690e-01, 
	6.19041383e-01, 5.91151476e-01, 5.61844826e-01, 5.29296875e-01, 4.67026114e-01, 
	4.12149698e-01, 3.88583809e-01, 3.67220700e-01, 3.47438604e-01, 3.09488088e-01, 
	2.68817514e-01, 2.45647207e-01, 1.76098093e-01, 8.89868010e-03};

    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}
TEST_F(XSTests, GetNELASCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NELAS).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 4.44751501e-01, 5.34929395e-01, 6.28362477e-01, 
	9.15886104e-01, 1.54972100e+00, 2.12181091e+00, 2.14398789e+00, 2.14158392e+00, 
	2.16643095e+00, 2.23892808e+00, 2.29722404e+00, 2.18650389e+00, 1.91091895e+00, 
	1.74666297e+00, 1.65001297e+00, 1.46051502e+00, 1.04663599e+00, 7.28291690e-01, 
	6.19041383e-01, 5.91151476e-01, 5.61844826e-01, 5.29296875e-01, 4.67026114e-01, 
	4.12149698e-01, 3.88583809e-01, 3.67220700e-01, 3.47438604e-01, 3.09488088e-01, 
	2.68817514e-01, 2.45647207e-01, 1.76098093e-01, 8.89868010e-03};

    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetN2NCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::N2N).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.55825698e+00, 1.56992400e+00, 
	1.48506498e+00, 1.21417201e+00, 6.03158891e-01, 4.12262082e-02};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetN3NCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::N3N).getXSNoInterp(293.0, Numerics::DINF).getValues();

    std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 8.07629228e-02, 3.16674792e-04};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetN4NCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::N4N).getXSNoInterp(293.0, Numerics::DINF).getValues();
    std::vector<double> ref(172, 0.000000000000e+00);
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNNPCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NNP).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.04511811e-03, 
	1.05167401e-03, 2.55840103e-04, 3.25791189e-05, 1.05037998e-06};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNGCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NG).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {1.05950504e-03, 9.97772557e-04, 9.98312258e-04, 
	1.01523101e-03, 8.04598676e-04, 3.60931503e-04, 2.28132296e-04, 3.21953004e-04, 
	4.78444912e-04, 8.13469815e-04, 1.75857905e-03, 3.43982503e-03, 5.22513315e-03, 
	6.48058578e-03, 7.37583404e-03, 8.75606574e-03, 9.97378957e-03, 9.94500145e-03, 
	9.60356742e-03, 9.00797546e-03, 8.51736683e-03, 8.14251229e-03, 7.65158515e-03, 
	7.39035383e-03, 7.35607091e-03, 7.36624887e-03, 7.44071789e-03, 7.76361814e-03, 
	8.27548560e-03, 8.62626266e-03, 9.78147332e-03, 1.36347497e-02, 1.60401799e-02, 
	1.83553807e-02, 2.11307798e-02, 2.37601008e-02, 2.77456306e-02, 3.15924101e-02, 
	3.54999788e-02, 3.94336805e-02, 4.18988690e-02, 4.02034707e-02, 2.92051509e-02, 
	4.51526493e-02, 6.05048314e-02, 1.62154496e-01, 1.13257602e-01, 1.13868698e-01, 
	1.12263203e-01, 1.80145994e-01, 1.72051594e-01, 6.31296217e-01, 1.04820698e-01, 
	1.35181397e-02, 1.63397595e-01, 3.81491214e-01, 2.78494805e-01, 2.79772997e-01, 
	2.81265795e-01, 2.52580494e-01, 1.03550300e-03, 2.11940892e-02, 1.87321901e-02, 
	5.93377696e-03, 9.01488960e-03, 1.81366205e-02, 1.34107500e-01, 6.64971085e+01, 
	1.37203202e-01, 6.88466206e-02, 6.71038330e-02, 6.83850423e-02, 7.31092021e-02, 
	8.03599730e-02, 8.82344916e-02, 9.86144692e-02, 1.10401101e-01, 1.23505697e-01, 
	1.37896895e-01, 1.57765999e-01, 1.88877493e-01, 2.23735094e-01, 2.62765110e-01, 
	3.02379191e-01, 3.28539997e-01, 3.52620989e-01, 3.81355494e-01, 4.27136898e-01, 
	4.83166903e-01, 5.17981827e-01, 5.65746427e-01, 6.10222518e-01, 6.51152074e-01, 
	6.91765606e-01, 7.36479580e-01, 7.80843496e-01, 7.96029925e-01, 8.11353981e-01, 
	8.35471690e-01, 8.81355882e-01, 9.12267208e-01, 9.26425695e-01, 9.49088573e-01, 
	9.75080729e-01, 1.00225401e+00, 1.03047705e+00, 1.05981803e+00, 1.09295404e+00, 
	1.11623299e+00, 1.12975204e+00, 1.15349305e+00, 1.17752397e+00, 1.19513798e+00, 
	1.22272599e+00, 1.26029599e+00, 1.28672099e+00, 1.30201995e+00, 1.31566703e+00, 
	1.32515204e+00, 1.33940804e+00, 1.35903299e+00, 1.37396502e+00, 1.38446796e+00, 
	1.40092003e+00, 1.41639698e+00, 1.42818499e+00, 1.44651699e+00, 1.47073996e+00, 
	1.49529505e+00, 1.55199301e+00, 1.61600101e+00, 1.79066098e+00, 2.18414903e+00, 
	3.28116989e+00, 2.14883089e+00, 1.90892196e+00, 1.98389995e+00, 2.03270507e+00, 
	2.10379791e+00, 2.20517993e+00, 2.26189590e+00, 2.33953500e+00, 2.46102810e+00, 
	2.52850509e+00, 2.57024288e+00, 2.64727592e+00, 2.77867103e+00, 2.95409489e+00, 
	3.17091894e+00, 3.33088994e+00, 3.48245192e+00, 3.71182489e+00, 3.87060905e+00, 
	4.07869816e+00, 4.38648176e+00, 4.59453392e+00, 4.86912823e+00, 5.12316608e+00, 
	5.36096716e+00, 5.75448084e+00, 6.19165611e+00, 6.71268511e+00, 7.33749199e+00, 
	7.98223686e+00, 8.68041039e+00, 9.59947491e+00, 1.08893299e+01, 1.28879299e+01, 
	1.56598902e+01, 1.86530800e+01, 2.27311001e+01, 3.53096619e+01};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNPCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NP).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.07188597e-02, 
	6.42032316e-03, 3.72799905e-03, 1.39681099e-03, 3.29124392e-04, 5.68041287e-05, 
	7.79704624e-06, 1.53961298e-06, 4.86339673e-07, 5.70574308e-08};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNDCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::ND).getXSNoInterp(293.0, Numerics::DINF).getValues();

    std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.31842406e-03, 1.41100097e-03, 
	2.85235496e-04, 6.10484421e-05, 6.37466292e-06, 2.66982710e-07};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNTCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NT).getXSNoInterp(293.0, Numerics::DINF).getValues();

    std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.39458396e-03, 
	5.88281022e-04, 1.04688697e-04, 5.81945278e-06, 1.30193802e-08};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNACrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NA).getXSNoInterp(293.0, Numerics::DINF).getValues();
    
    std::vector<double> ref {0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 
	0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.41834011e-03, 
	2.63833394e-03, 1.86971703e-03, 9.33425501e-04, 2.53727514e-04, 8.53571601e-06, 
	1.63235404e-06, 4.52618195e-07, 1.61087897e-07, 9.27575972e-09};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetTotalCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007872010000e+01, 1.925996020000e+01, 2.107517050000e+01, 
	2.037490080000e+01, 2.287550930000e+01, 2.327058030000e+01, 2.879990010000e+01, 2.318672940000e+01, 
	2.152634050000e+01, 3.494644170000e+01, 2.486829950000e+01, 3.535044100000e+01, 5.032812880000e+01, 
	4.432304000000e+01, 4.674983980000e+01, 5.520196910000e+01, 9.920126340000e+01, 1.363560940000e+02, 
	1.277938000000e+02, 1.581064000000e+02, 9.468679810000e+01, 4.889522170000e+01, 1.452032010000e+02, 
	9.292217250000e+00, 1.665612030000e+01, 1.846541020000e+01, 1.130613990000e+01, 8.525469970000e+01, 
	2.751512910000e+01, 1.102893980000e+02, 1.072029040000e+02, 2.925147090000e+02, 1.527463990000e+02, 
	3.312701110000e+02, 1.641695980000e+01, 1.732208060000e+01, 3.828304140000e+02, 2.512553980000e+01, 
	1.690971950000e+01, 1.690476990000e+01, 1.750494960000e+01, 1.825637050000e+01, 1.910868640000e+01, 
	2.001894570000e+01, 2.114936640000e+01, 2.234705730000e+01, 2.277967070000e+01, 2.323751070000e+01, 
	2.397585300000e+01, 2.547199820000e+01, 2.652802470000e+01, 2.704931830000e+01, 2.790475460000e+01, 
	2.892482950000e+01, 3.004311560000e+01, 3.127496340000e+01, 3.263522720000e+01, 3.424046330000e+01, 
	3.545314410000e+01, 3.611279720090e+01, 3.744636515710e+01, 3.886323978790e+01, 3.993930961800e+01, 
	4.170324814300e+01, 4.428437136100e+01, 4.619013679900e+01, 4.737296392200e+01, 4.843298069100e+01, 
	4.913967894400e+01, 5.027384217300e+01, 5.189069243100e+01, 5.308205071600e+01, 5.393739256500e+01, 
	5.536838292600e+01, 5.668555111100e+01, 5.764383058200e+01, 5.933907624700e+01, 6.109191001600e+01, 
	6.338491139200e+01, 6.734307387000e+01, 7.176614724800e+01, 7.718921902000e+01, 8.371049830000e+01, 
	9.318605469000e+01, 1.238774182000e+02, 1.841017066900e+02, 2.660296537900e+02, 3.339229541900e+02, 
	4.683134084700e+02, 7.760038285000e+02, 1.053639295000e+03, 1.707973433000e+03, 3.374625847300e+03, 
	4.488781342100e+03, 4.967381072200e+03, 5.215709838300e+03, 3.963940734000e+03, 2.403321220100e+03, 
	1.515375165100e+03, 1.106121184800e+03, 1.027054029037e+03, 8.767338900600e+02, 8.136724757000e+02, 
	7.673570694756e+02, 6.915119016000e+02, 7.152223566600e+02, 6.468775249000e+02, 6.578510590000e+02, 
	5.422652890000e+02, 6.598287662000e+02, 5.428160860000e+02, 8.151601443990e+02, 8.680026507260e+02, 
	6.569344790000e+02, 9.903212340700e+02, 1.081089357294e+03, 1.209636899291e+03, 1.413053130877e+03, 
	1.699493832764e+03, 2.011764579486e+03, 2.439847328493e+03, 3.768437451409e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetInelCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NINEL).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 4.045647980000e-01, 4.588080940000e-01, 
	4.901109040000e-01, 5.601137280000e-01, 6.439865230000e-01, 7.595742940000e-01, 9.639034870000e-01, 
	1.371742960000e+00, 1.689239030000e+00, 1.756311060000e+00, 1.754394050000e+00, 1.816218020000e+00, 
	1.878677960000e+00, 1.880898000000e+00, 1.861026050000e+00, 1.830957060000e+00, 1.723109010000e+00, 
	1.612424020000e+00, 1.582736970000e+00, 1.562841060000e+00, 1.518908980000e+00, 1.463665960000e+00, 
	1.377563000000e+00, 1.320667980000e+00, 1.274271010000e+00, 1.221135020000e+00, 1.209246990000e+00, 
	1.157217030000e+00, 1.090363030000e+00, 1.056154970000e+00, 9.982910750000e-01, 8.578732010000e-01, 
	7.423893210000e-01, 6.599575880000e-01, 5.509240030000e-01, 4.849047960000e-01, 4.412296120000e-01, 
	4.176518920000e-01, 4.032954870000e-01, 3.923409880000e-01, 3.873212040000e-01, 3.724480870000e-01, 
	3.524008990000e-01, 3.265711960000e-01, 2.863177060000e-01, 9.695281830000e-02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}
TEST_F(XSTests, GetELASCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NELAS).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 4.045647980000e-01, 4.588080940000e-01, 
	4.901109040000e-01, 5.601137280000e-01, 6.439865230000e-01, 7.595742940000e-01, 9.639034870000e-01, 
	1.371742960000e+00, 1.689239030000e+00, 1.756311060000e+00, 1.754394050000e+00, 1.816218020000e+00, 
	1.878677960000e+00, 1.880898000000e+00, 1.861026050000e+00, 1.830957060000e+00, 1.723109010000e+00, 
	1.612424020000e+00, 1.582736970000e+00, 1.562841060000e+00, 1.518908980000e+00, 1.463665960000e+00, 
	1.377563000000e+00, 1.320667980000e+00, 1.274271010000e+00, 1.221135020000e+00, 1.209246990000e+00, 
	1.157217030000e+00, 1.090363030000e+00, 1.056154970000e+00, 9.982910750000e-01, 8.578732010000e-01, 
	7.423893210000e-01, 6.599575880000e-01, 5.509240030000e-01, 4.849047960000e-01, 4.412296120000e-01, 
	4.176518920000e-01, 4.032954870000e-01, 3.923409880000e-01, 3.873212040000e-01, 3.724480870000e-01, 
	3.524008990000e-01, 3.265711960000e-01, 2.863177060000e-01, 9.695281830000e-02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetN2NCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::N2N).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	1.121985020000e-01, 1.626157020000e-01, 2.167616040000e-01, 2.925193010000e-01, 3.255606890000e-01, 
	2.495885940000e-01, 1.381752940000e-01, 6.794351340000e-02, 4.514005970000e-03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetN3NCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::N3N).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	3.179849090000e-01, 1.265338960000e-01, 2.607551960000e-02, 5.865367710000e-04};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetN4NCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::N4N).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(171, 0.000000000000e+00);
	ref.push_back(1.824667920000e-05);

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNNPCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NNP).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNGCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NG).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.210438950000e-03, 2.118142090000e-03, 2.229847010000e-03, 
	2.448844020000e-03, 2.181936060000e-03, 9.069116200000e-04, 3.745626890000e-04, 4.630720940000e-04, 
	8.187838830000e-04, 1.608195950000e-03, 2.030418020000e-03, 2.599681960000e-03, 3.899808040000e-03, 
	5.681205080000e-03, 7.182520810000e-03, 9.426450360000e-03, 1.306570040000e-02, 1.689573940000e-02, 
	1.980582070000e-02, 2.347821000000e-02, 2.835730090000e-02, 3.475702180000e-02, 6.198799980000e-02, 
	8.738352360000e-02, 9.997683020000e-02, 1.113997030000e-01, 1.233917030000e-01, 1.515721980000e-01, 
	1.821082980000e-01, 1.883980930000e-01, 1.922121050000e-01, 2.086540010000e-01, 2.226818050000e-01, 
	2.377216070000e-01, 2.699317040000e-01, 3.091860120000e-01, 3.697252870000e-01, 4.204905030000e-01, 
	4.742453100000e-01, 5.520278220000e-01, 5.838804240000e-01, 6.951770190000e-01, 8.109478950000e-01, 
	9.599943160000e-01, 1.116376040000e+00, 1.282526970000e+00, 1.657578950000e+00, 1.938063030000e+00, 
	2.127799030000e+00, 2.347717050000e+00, 2.729408980000e+00, 3.817059990000e+00, 3.640553950000e+00, 
	2.986349110000e+00, 3.843030930000e+00, 4.191730980000e+00, 5.028538230000e+00, 3.984361890000e+00, 
	4.472674850000e+00, 7.783953190000e+00, 4.782465930000e+00, 1.174172970000e+01, 1.628525920000e+01, 
	1.199073980000e+01, 1.733997920000e+01, 1.741328050000e+01, 2.944676020000e+01, 3.605199810000e+01, 
	2.268330000000e+01, 1.015835040000e+02, 4.643902970000e+01, 5.638514040000e+00, 1.052053990000e+02, 
	6.782180070000e-01, 6.289919850000e+00, 2.285613060000e+00, 5.551387070000e-01, 3.836269000000e+01, 
	6.088389870000e+00, 3.990327070000e+01, 4.549312970000e+01, 1.198088000000e+02, 7.278118900000e+01, 
	6.380638890000e+01, 3.230456110000e+00, 4.172525880000e+00, 1.693132930000e+02, 4.944345000000e+00, 
	1.515349030000e+00, 1.381261940000e+00, 1.399252060000e+00, 1.474851010000e+00, 1.589723940000e+00, 
	1.720927000000e+00, 1.896579980000e+00, 2.088691950000e+00, 2.160296920000e+00, 2.236762050000e+00, 
	2.362380980000e+00, 2.623322010000e+00, 2.811904910000e+00, 2.906919960000e+00, 3.064605000000e+00, 
	3.256383900000e+00, 3.470972060000e+00, 3.712563040000e+00, 3.985640050000e+00, 4.315779210000e+00, 
	4.570602890000e+00, 4.720078841106e+00, 5.012964106610e+00, 5.330391092000e+00, 5.576360123520e+00, 
	5.986664801130e+00, 6.600340441750e+00, 7.064511620630e+00, 7.360274585020e+00, 7.626586937600e+00, 
	7.809907451970e+00, 8.103828076900e+00, 8.523462328100e+00, 8.837711987200e+00, 9.069391819700e+00, 
	9.453966232100e+00, 9.811341293900e+00, 1.007547756600e+01, 1.051899338240e+01, 1.103612197100e+01, 
	1.159456297600e+01, 1.275882742500e+01, 1.404562318300e+01, 1.568133735500e+01, 1.767458900300e+01, 
	2.084616483400e+01, 3.067695344500e+01, 5.150537778500e+01, 8.171424182000e+01, 1.067416142690e+02, 
	1.572090493500e+02, 2.769888663800e+02, 3.866502134400e+02, 6.465304645000e+02, 1.321672199840e+03, 
	1.779201988600e+03, 1.991389028400e+03, 2.106617901900e+03, 1.573202640600e+03, 9.590751361000e+02, 
	6.023958598500e+02, 3.956966321000e+02, 3.899680123798e+02, 3.217258286720e+02, 2.924124531910e+02, 
	2.679300485891e+02, 2.272082937000e+02, 2.345666193160e+02, 2.019154315000e+02, 1.944688754000e+02, 
	1.368584828000e+02, 1.743233793000e+02, 1.801728823000e+02, 2.299152513380e+02, 2.390115865030e+02, 
	1.299851230000e+02, 2.632008447060e+02, 2.827047823226e+02, 3.111678755797e+02, 3.576048650960e+02, 
	4.244642009961e+02, 4.984201317965e+02, 6.007858217810e+02, 9.215761672599e+02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNPCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NP).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNDCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::ND).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNTCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NT).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNACrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NA).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNFTOTCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NFTOT).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.350255970000e+00, 2.420903920000e+00, 2.415081980000e+00, 
	2.286206960000e+00, 2.237148050000e+00, 2.250340940000e+00, 2.136674880000e+00, 1.891438010000e+00, 
	1.698135970000e+00, 1.706519010000e+00, 1.771293040000e+00, 1.831783060000e+00, 1.894363050000e+00, 
	1.934142950000e+00, 1.974167940000e+00, 1.954396960000e+00, 1.936439990000e+00, 1.864397050000e+00, 
	1.787876960000e+00, 1.738963010000e+00, 1.700963020000e+00, 1.685464020000e+00, 1.651312950000e+00, 
	1.585983040000e+00, 1.559703950000e+00, 1.573289040000e+00, 1.561470030000e+00, 1.552503940000e+00, 
	1.542135950000e+00, 1.516837000000e+00, 1.490543960000e+00, 1.495951060000e+00, 1.514603020000e+00, 
	1.536977050000e+00, 1.549541000000e+00, 1.558411000000e+00, 1.540469050000e+00, 1.562018040000e+00, 
	1.614138960000e+00, 1.566985010000e+00, 1.585826040000e+00, 1.647958040000e+00, 1.776383040000e+00, 
	1.791007040000e+00, 1.867076990000e+00, 2.180797100000e+00, 2.099561930000e+00, 2.261956930000e+00, 
	2.556533100000e+00, 2.069562910000e+00, 3.567950960000e+00, 2.461177110000e+00, 3.916994090000e+00, 
	4.753939150000e+00, 5.927555080000e+00, 5.561376090000e+00, 8.282878880000e+00, 5.670394900000e+00, 
	4.424879070000e+00, 1.091884990000e+01, 8.033204080000e+00, 8.562432290000e+00, 1.694275090000e+01, 
	1.741609950000e+01, 1.573558040000e+01, 2.318301960000e+01, 4.827920150000e+01, 7.792392730000e+01, 
	9.183061980000e+01, 2.621068950000e+01, 3.446514130000e+01, 3.375743870000e+01, 2.050579070000e+01, 
	1.236817960000e+00, 1.862063050000e+00, 7.095921990000e+00, 8.480430840000e-01, 3.572027970000e+01, 
	1.008491040000e+01, 5.923875050000e+01, 4.917329030000e+01, 1.580063930000e+02, 6.824520870000e+01, 
	2.585159000000e+02, 5.701860900000e+00, 4.340898040000e+00, 2.012705990000e+02, 1.283372970000e+01, 
	7.107427120000e+00, 7.007001880000e+00, 7.381894110000e+00, 7.903581140000e+00, 8.530845640000e+00, 
	9.212067600000e+00, 1.007479000000e+01, 1.099526020000e+01, 1.132968040000e+01, 1.168396000000e+01, 
	1.225648020000e+01, 1.341782000000e+01, 1.423760030000e+01, 1.464216040000e+01, 1.530541990000e+01, 
	1.609510990000e+01, 1.695903020000e+01, 1.790805050000e+01, 1.895232960000e+01, 2.017974090000e+01, 
	2.110337070000e+01, 2.163130980973e+01, 2.264954111777e+01, 2.372941502415e+01, 2.454736146700e+01, 
	2.587926821680e+01, 2.780610609400e+01, 2.922154969900e+01, 3.010071134440e+01, 3.088130980410e+01, 
	3.141529534330e+01, 3.225991661690e+01, 3.345211917230e+01, 3.433328299220e+01, 3.497434908780e+01, 
	3.604800210350e+01, 3.703024720590e+01, 3.775234624230e+01, 3.894680217130e+01, 4.032744644900e+01, 
	4.191714119100e+01, 4.482280741500e+01, 4.772617622700e+01, 5.163367863700e+01, 5.618099678400e+01, 
	6.316221921400e+01, 8.306872609500e+01, 1.216163211930e+02, 1.745298643300e+02, 2.154963737200e+02, 
	2.997240065200e+02, 4.883527480800e+02, 6.553876933300e+02, 1.047410262350e+03, 2.038570448490e+03, 
	2.700670105400e+03, 2.972065974500e+03, 3.100860098900e+03, 2.399016617600e+03, 1.443033877500e+03, 
	9.079797482100e+02, 7.134133372000e+02, 6.305396114998e+02, 5.483738691820e+02, 5.145306724170e+02, 
	4.922989000116e+02, 4.591169281000e+02, 4.739319009710e+02, 4.402422297000e+02, 4.586286546000e+02, 
	4.052069167000e+02, 4.812832303000e+02, 3.593812410000e+02, 5.776384389270e+02, 6.213716457450e+02, 
	5.249649040000e+02, 7.195840739800e+02, 7.906366584280e+02, 8.906830733950e+02, 1.047636717057e+03, 
	1.267191868362e+03, 1.505481682906e+03, 1.831153391792e+03, 2.838643662625e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNUSIGFCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NUSIGF).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {1.288118360000e+01, 1.252699470000e+01, 1.202330590000e+01, 
	1.080385590000e+01, 1.002067470000e+01, 9.495697020000e+00, 8.501502040000e+00, 7.238233570000e+00, 
	6.330739020000e+00, 6.142384050000e+00, 6.131842610000e+00, 6.151956080000e+00, 6.209856990000e+00, 
	6.235605720000e+00, 6.306510930000e+00, 6.160966400000e+00, 5.998360630000e+00, 5.707031730000e+00, 
	5.436612610000e+00, 5.257878300000e+00, 5.117915150000e+00, 5.049915790000e+00, 4.911979680000e+00, 
	4.688170910000e+00, 4.599024300000e+00, 4.628949640000e+00, 4.585376740000e+00, 4.544206620000e+00, 
	4.501314160000e+00, 4.422282220000e+00, 4.336975570000e+00, 4.341151710000e+00, 4.389626500000e+00, 
	4.451958660000e+00, 4.487673760000e+00, 4.513107780000e+00, 4.460800650000e+00, 4.522784230000e+00, 
	4.673390390000e+00, 4.536631110000e+00, 4.591061590000e+00, 4.770635130000e+00, 5.142148020000e+00, 
	5.184313770000e+00, 5.404336450000e+00, 6.312282090000e+00, 6.077026840000e+00, 6.546980380000e+00, 
	7.399495600000e+00, 5.989997390000e+00, 1.032674600000e+01, 7.123353000000e+00, 1.133685400000e+01, 
	1.375915810000e+01, 1.715589140000e+01, 1.609603310000e+01, 2.397264670000e+01, 1.641125680000e+01, 
	1.280634210000e+01, 3.142231940000e+01, 2.306519700000e+01, 2.446602060000e+01, 4.856719210000e+01, 
	5.007815170000e+01, 4.500380330000e+01, 6.658537290000e+01, 1.388816990000e+02, 2.232697600000e+02, 
	2.644507450000e+02, 7.380773160000e+01, 9.878594970000e+01, 9.758954620000e+01, 5.732230760000e+01, 
	3.570949080000e+00, 5.287783150000e+00, 2.049436000000e+01, 2.444416050000e+00, 1.018980480000e+02, 
	2.882005690000e+01, 1.692948300000e+02, 1.403314820000e+02, 4.522236020000e+02, 1.944377140000e+02, 
	7.403392940000e+02, 1.638468550000e+01, 1.249708370000e+01, 5.743364870000e+02, 3.673122790000e+01, 
	2.040924640000e+01, 2.013440130000e+01, 2.122264290000e+01, 2.273043060000e+01, 2.454057880000e+01, 
	2.650550650000e+01, 2.899300960000e+01, 3.164662550000e+01, 3.261050420000e+01, 3.363161090000e+01, 
	3.528165820000e+01, 3.862806320000e+01, 4.098999400000e+01, 4.215542980000e+01, 4.406583400000e+01, 
	4.634021760000e+01, 4.882817080000e+01, 5.156042480000e+01, 5.456676860000e+01, 5.809933470000e+01, 
	6.075714110000e+01, 6.227621003220e+01, 6.520571568280e+01, 6.831166370400e+01, 7.066410717430e+01, 
	7.449445105720e+01, 8.003379700800e+01, 8.410262855180e+01, 8.662952171910e+01, 8.887252930680e+01, 
	9.040655469610e+01, 9.283308088840e+01, 9.625819771790e+01, 9.878975225300e+01, 1.006310690620e+02, 
	1.037140904260e+02, 1.065342545460e+02, 1.086073174590e+02, 1.120375117650e+02, 1.159997226990e+02, 
	1.205640854720e+02, 1.288999326520e+02, 1.372324690880e+02, 1.484352573600e+02, 1.614758406000e+02, 
	1.814751999600e+02, 2.385261036100e+02, 3.488822955990e+02, 5.002372431100e+02, 6.174030329400e+02, 
	8.582072888500e+02, 1.397291315900e+03, 1.874562298600e+03, 2.994707128500e+03, 5.826352415700e+03, 
	7.717676283900e+03, 8.492978058000e+03, 8.860587019000e+03, 6.857546352500e+03, 4.126266947700e+03, 
	2.598012442000e+03, 2.043570764100e+03, 1.806394192541e+03, 1.572147432686e+03, 1.475767957970e+03, 
	1.412714336092e+03, 1.318647020600e+03, 1.361317475980e+03, 1.265622689000e+03, 1.318834424500e+03, 
	1.166127014000e+03, 1.385031507000e+03, 1.036130251000e+03, 1.662026369589e+03, 1.788268603008e+03, 
	1.514619387000e+03, 2.071515496770e+03, 2.276329471917e+03, 2.564697978633e+03, 3.017022360468e+03, 
	3.649678110849e+03, 4.336259712176e+03, 5.274542288630e+03, 8.176984572900e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetCHICrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::CHI).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {4.041287865000e-06, 2.104593475000e-05, 3.129277685000e-05, 
	2.384248655000e-04, 6.688557350000e-04, 2.494362880000e-03, 6.378784300000e-03, 5.487499750000e-03, 
	7.439535600000e-03, 2.158563025000e-02, 3.102752380000e-02, 3.965510800000e-02, 4.586061465000e-02, 
	2.416964995000e-02, 2.435877920000e-02, 4.755625130000e-02, 4.385623335000e-02, 2.004352025000e-02, 
	1.867738550000e-02, 1.726476660000e-02, 1.586511915000e-02, 1.448166930000e-02, 3.571301700000e-02, 
	9.567573650000e-03, 8.514526300000e-03, 7.546432300000e-03, 6.647437350000e-03, 1.545908490000e-02, 
	3.909866325000e-03, 3.410303965000e-03, 7.772096450000e-03, 6.335947650000e-03, 1.089446130000e-03, 
	2.458660400000e-03, 1.129831420000e-03, 8.400049400000e-04, 8.750612050000e-04, 2.153463140000e-04, 
	3.942630430000e-04, 9.001058050000e-05, 1.194118670000e-04, 3.346743470000e-04, 5.707506000000e-05, 
	1.283271415000e-04, 5.834411800000e-05, 4.284404715000e-05, 4.453873770000e-05, 1.095293920000e-05, 
	2.774518725000e-05, 2.915148345000e-06, 1.695948960000e-05, 2.890732960000e-06, 6.503782500000e-06, 
	8.310414600000e-07, 2.155928315000e-06, 2.226288645000e-06, 8.910203050000e-07, 1.434467665000e-06, 
	5.744522000000e-07, 1.617226415000e-06, 5.173912450000e-07, 3.873527420000e-07, 5.080412400000e-07, 
	2.394930050000e-07, 4.703054655000e-08, 1.624097765000e-07, 5.081149700000e-08, 2.324032345000e-08, 
	3.470418265000e-08, 1.072759660000e-08, 8.646811250000e-09, 6.941515350000e-09, 1.312806130000e-08, 
	6.863714950000e-09, 8.124755100000e-09, 7.091968350000e-09, 6.193658050000e-09, 5.411948200000e-09, 
	4.731389945000e-09, 6.009927200000e-09, 6.358233050000e-09, 3.780344040000e-09, 4.013337220000e-09, 
	2.027096270000e-09, 1.054308195000e-09, 1.226978295000e-09, 1.052180900000e-09, 1.684097640000e-09, 
	9.267290800000e-10, 3.301479370000e-10, 9.473021250000e-10, 1.279882730000e-10, 5.927984750000e-10, 
	7.481217050000e-11, 4.785986050000e-10, 4.187973925000e-11, 1.039870065000e-10, 4.295369960000e-11, 
	1.612164290000e-10, 1.909038345000e-10, 2.455710980000e-11, 6.509820450000e-11, 7.256182450000e-11, 
	7.184863800000e-11, 6.720211900000e-11, 6.656595400000e-11, 6.206918300000e-11, 6.915425850000e-11, 
	1.908293660000e-11, 2.662365295000e-11, 5.292373150000e-11, 2.442506440000e-11, 2.806719615000e-11, 
	4.835648895000e-11, 4.798447750000e-11, 1.468960715000e-11, 1.977510170000e-11, 9.498451500000e-12, 
	9.483570200000e-12, 1.892249725000e-11, 1.886297715000e-11, 7.239142450000e-12, 1.084220300000e-11, 
	1.730631435000e-11, 7.195994650000e-12, 1.005960070000e-11, 1.577307555000e-11, 1.430218095000e-11, 
	1.426696000000e-11, 3.551330410000e-11, 7.076244550000e-12, 4.227256740000e-11, 7.014608500000e-12, 
	5.232889450000e-11, 5.527158250000e-11, 5.810856650000e-11, 2.712508345000e-11, 1.013558510000e-11, 
	3.498330445000e-11, 2.207745620000e-11, 6.004481650000e-12, 2.726349875000e-11, 1.985512450000e-11, 
	3.631510890000e-12, 9.561213800000e-12, 1.315750635000e-11, 2.097874650000e-11, 1.828243635000e-11, 
	2.016074805000e-11, 5.837271200000e-12, 1.294617885000e-11, 1.291095790000e-11, 3.866388545000e-12, 
	1.222274885000e-11, 9.627085600000e-12, 3.204605420000e-12, 9.600668350000e-12, 1.917747210000e-12, 
	6.386769600000e-12, 5.740566450000e-12, 5.096742450000e-12, 5.091109850000e-12, 4.450098710000e-12, 
	3.176001995000e-12, 3.173801715000e-12, 3.171601435000e-12, 3.169401155000e-12, 3.167200875000e-12, 
	1.962560105000e-12, 1.202441360000e-12, 1.265384500000e-12, 1.897416685000e-12};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNUCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NU).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {5.480757740613e+00, 5.174511304026e+00, 4.978425577090e+00, 
	4.725668362063e+00, 4.479218395939e+00, 4.219670384702e+00, 3.978846814542e+00, 3.826841552159e+00, 
	3.728051894455e+00, 3.599364562602e+00, 3.461788914385e+00, 3.358452326773e+00, 3.278071217658e+00, 
	3.223963213267e+00, 3.194515928569e+00, 3.152361841578e+00, 3.097622782516e+00, 3.061060266106e+00, 
	3.040820331395e+00, 3.023571099422e+00, 3.008833872238e+00, 2.996157574458e+00, 2.974590419097e+00, 
	2.956003180211e+00, 2.948652082339e+00, 2.942211839218e+00, 2.936576848676e+00, 2.927017769758e+00, 
	2.918882839091e+00, 2.915463045799e+00, 2.909659618493e+00, 2.901934311942e+00, 2.898202659070e+00, 
	2.896568078229e+00, 2.896131022025e+00, 2.895967610598e+00, 2.895741819675e+00, 2.895475029213e+00, 
	2.895283805057e+00, 2.895133700098e+00, 2.895060034454e+00, 2.894876577076e+00, 2.894729292169e+00, 
	2.894636176304e+00, 2.894543973787e+00, 2.894483897654e+00, 2.894426095828e+00, 2.894387728240e+00, 
	2.894347661683e+00, 2.894329696892e+00, 2.894307157181e+00, 2.894287034873e+00, 2.894273960980e+00, 
	2.894264664704e+00, 2.894260984244e+00, 2.894253659439e+00, 2.894240885000e+00, 2.894199978912e+00, 
	2.894167704339e+00, 2.877804868441e+00, 2.871232545607e+00, 2.857368066849e+00, 2.866547019823e+00, 
	2.875394212120e+00, 2.860002755284e+00, 2.872161351233e+00, 2.876636205344e+00, 2.865227250937e+00, 
	2.879766526415e+00, 2.815940099554e+00, 2.866256918552e+00, 2.890904937050e+00, 2.795420495538e+00, 
	2.887206683189e+00, 2.839744416818e+00, 2.888188459355e+00, 2.882419650745e+00, 2.852666576404e+00, 
	2.857740501096e+00, 2.857839312462e+00, 2.853815173722e+00, 2.862058891503e+00, 2.849104247812e+00, 
	2.863805645997e+00, 2.873568083711e+00, 2.878916663060e+00, 2.853553821838e+00, 2.862085205051e+00, 
	2.871537907518e+00, 2.873468802323e+00, 2.874958998836e+00, 2.875965995334e+00, 2.876687709004e+00, 
	2.877259226799e+00, 2.877778057905e+00, 2.878206147409e+00, 2.878325164406e+00, 2.878442831026e+00, 
	2.878612588955e+00, 2.878862825705e+00, 2.878995977995e+00, 2.879044392930e+00, 2.879099971638e+00, 
	2.879148877387e+00, 2.879184141084e+00, 2.879175753944e+00, 2.879158908254e+00, 2.879092203805e+00, 
	2.879025439287e+00, 2.878984702267e+00, 2.878897870105e+00, 2.878775715056e+00, 2.878684426809e+00, 
	2.878537771359e+00, 2.878281365159e+00, 2.878102955460e+00, 2.877989185303e+00, 2.877874347642e+00, 
	2.877787832588e+00, 2.877660286319e+00, 2.877491773305e+00, 2.877375643787e+00, 2.877282113511e+00, 
	2.877110640646e+00, 2.876952291289e+00, 2.876836230573e+00, 2.876680639202e+00, 2.876446016628e+00, 
	2.876247808090e+00, 2.875766603786e+00, 2.875413031945e+00, 2.874775946210e+00, 2.874207469491e+00, 
	2.873160604841e+00, 2.871430859999e+00, 2.868712786052e+00, 2.866198544475e+00, 2.865027481818e+00, 
	2.863325159751e+00, 2.861233650048e+00, 2.860234205918e+00, 2.859153892364e+00, 2.858057919958e+00, 
	2.857689381783e+00, 2.857600783720e+00, 2.857461070928e+00, 2.858482222337e+00, 2.859438722845e+00, 
	2.861311000737e+00, 2.864497560588e+00, 2.864838559855e+00, 2.866926235984e+00, 2.868182670311e+00, 
	2.869627244868e+00, 2.872137662310e+00, 2.872390470426e+00, 2.874832543580e+00, 2.875604067195e+00, 
	2.877855648410e+00, 2.877788835769e+00, 2.883094977681e+00, 2.877277995343e+00, 2.877937246177e+00, 
	2.885182181626e+00, 2.878767848922e+00, 2.879109446358e+00, 2.879473131624e+00, 2.879836408315e+00, 
	2.880130627390e+00, 2.880313830060e+00, 2.880448089315e+00, 2.880595645224e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetSCATT01CrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::SCATT01).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.977320172947e+00, 2.794378839608e+00, 2.660038343729e+00, 
	2.517561123675e+00, 2.455820168666e+00, 2.620672500077e+00, 3.049090338735e+00, 3.307009338256e+00, 
	3.501010729471e+00, 3.743848928138e+00, 3.846842262481e+00, 3.556003320257e+00, 3.096457289130e+00, 
	2.724825666398e+00, 2.478804250759e+00, 2.222959324884e+00, 2.009129144096e+00, 1.984678752396e+00, 
	2.010285860762e+00, 2.048004414080e+00, 2.111143961186e+00, 2.198643435663e+00, 2.353714685764e+00, 
	2.457472226604e+00, 2.490578865862e+00, 2.499268251826e+00, 2.492854362327e+00, 2.452563732864e+00, 
	2.385143225056e+00, 2.329348036056e+00, 2.204614115726e+00, 1.874406023339e+00, 1.632696379898e+00, 
	1.457041514106e+00, 1.230836175070e+00, 1.059498109440e+00, 8.747066064460e-01, 7.453506347860e-01, 
	6.441908475142e-01, 5.686504201618e-01, 5.282143950379e-01, 4.256555792394e-01, 3.390522952020e-01, 
	2.867037405700e-01, 2.304516896096e-01, 1.970831791196e-01, 1.659135630800e-01, 1.434398907000e-01, 
	1.224595766000e-01, 1.055269952000e-01, 9.308453369000e-02, 7.643148860000e-02, 7.052561036000e-02, 
	6.196961210000e-02, 5.999406326000e-02, 5.718197820000e-02, 5.689367660000e-02, 5.050724710000e-02, 
	4.697550040000e-02, 4.683926390000e-02, 3.778594260000e-02, 4.104816630000e-02, 3.707835830000e-02, 
	3.131146210000e-02, 3.158804080000e-02, 3.007762850000e-02, 2.979208540000e-02, 2.188220460000e-02, 
	1.978352710000e-02, 2.726633950000e-02, 1.940890360000e-02, 2.197584480000e-02, 2.055440751000e-02, 
	2.119900948400e-02, 2.334758802000e-02, 2.460543058500e-02, 2.813885169000e-02, 2.241120750000e-02, 
	2.847525420000e-02, 2.104564908000e-02, 2.408685130000e-02, 1.276680330000e-02, 1.890000700000e-02, 
	8.682568500000e-03, 2.003142330000e-02, 2.349056210000e-02, 1.212343550000e-02, 1.858834863000e-02, 
	2.211074478000e-02, 2.273639680000e-02, 2.319429578000e-02, 2.347777370000e-02, 2.597710749788e-02, 
	2.662142802280e-02, 2.626693056663e-02, 2.811410651715e-02, 2.861780566964e-02, 2.874896361124e-02, 
	2.852777243815e-02, 2.842442243686e-02, 2.829629245487e-02, 2.830141488136e-02, 2.846286397646e-02, 
	2.877135666269e-02, 2.887859404919e-02, 2.894393365393e-02, 2.942140690748e-02, 2.969245719255e-02, 
	2.975888001899e-02, 2.981995473946e-02, 3.000671453699e-02, 3.008235422975e-02, 3.028187892427e-02, 
	3.047171940138e-02, 3.068815415217e-02, 3.085996702297e-02, 3.091889872566e-02, 3.127465850161e-02, 
	3.136256156582e-02, 3.134716544921e-02, 3.129030789253e-02, 3.138769521658e-02, 3.128076931678e-02, 
	3.117733280486e-02, 3.158142241695e-02, 3.177935756479e-02, 3.182856499365e-02, 3.168863361908e-02, 
	3.145060621141e-02, 3.194213433474e-02, 3.213190933506e-02, 3.250917360090e-02, 3.304621837690e-02, 
	3.321478989476e-02, 3.404875570751e-02, 3.562648408931e-02, 3.689256463622e-02, 3.804799892643e-02, 
	3.980001866728e-02, 4.355054759329e-02, 4.561845345559e-02, 4.921660414002e-02, 5.367183099801e-02, 
	5.194786591949e-02, 5.048021553639e+00, 6.038634287151e+00, 7.024989718268e+00, 8.019113643066e+00, 
	9.019169737430e+00, 1.002000058509e+01, 1.102041809191e+01, 1.202150100470e+01, 1.302184960927e+01, 
	1.402198348515e+01, 1.502261361015e+01, 1.602298308196e+01, 1.702334071075e+01, 1.802353610151e+01, 
	1.902386497161e+01, 2.002433980202e+01, 2.102456031856e+01, 2.202485609843e+01, 2.302502992082e+01, 
	2.402455153160e+01, 2.502444326548e+01, 2.602481852060e+01, 2.702509173745e+01, 2.802533691465e+01, 
	2.902525331282e+01, 3.002485248321e+01, 3.102479036618e+01, 3.200931531646e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetSCATT01CrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::SCATT01).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();

	std::vector<double> ref {3.017118782564e-02, 3.079845490096e-02, 3.092943192332e-02, 
	2.971895605718e-02, 2.622725430065e-02, 2.231561312752e-02, 2.082534849241e-02, 2.042874947594e-02, 
	2.066241155590e-02, 2.184355670439e-02, 2.417211660346e-02, 2.684940134138e-02, 2.945073473612e-02, 
	3.123594980768e-02, 3.229433825144e-02, 3.352595917981e-02, 3.439882748197e-02, 3.433429811193e-02, 
	3.388112223391e-02, 3.326432372728e-02, 3.260799601876e-02, 3.190643267244e-02, 3.070837836788e-02, 
	2.966956986164e-02, 2.917929776883e-02, 2.868650027251e-02, 2.815601101039e-02, 2.704808174664e-02, 
	2.594785330306e-02, 2.542014108435e-02, 2.446170228815e-02, 2.319864307319e-02, 2.267765062757e-02, 
	2.271290006300e-02, 2.343487674066e-02, 2.411620916796e-02, 2.503190543976e-02, 2.581624151686e-02, 
	2.652779338929e-02, 2.720378415685e-02, 2.759988454095e-02, 2.606319544132e-02, 2.077729659835e-02, 
	2.186358681496e-02, 2.134842081593e-02, 2.688441762987e-02, 2.587346011342e-02, 2.038690715241e-02, 
	3.919428803747e-02, 3.982537555652e-02, 5.482482281286e-02, 1.066994862617e-01, 1.090790020317e-02, 
	1.283590209001e-02, 1.524473352180e-02, 7.591208870294e-02, 1.190288003786e-02, 1.269024591171e-02, 
	1.298115776486e-02, 1.415632416604e-02, 1.424562046049e-02, 1.487570384046e-02, 1.599090234113e-02, 
	1.766417672174e-02, 1.881662833697e-02, 2.064688516064e-02, 2.498301787659e-02, 2.340199246861e-01, 
	2.261921086582e-02, 2.477571093774e-02, 2.560618527405e-02, 2.630093647927e-02, 2.728558039117e-02, 
	2.833853025656e-02, 2.924408565312e-02, 3.026773713934e-02, 3.127993658926e-02, 3.227751221691e-02, 
	3.325737540628e-02, 3.445105762479e-02, 3.605205214559e-02, 3.756350570321e-02, 3.896337293774e-02, 
	4.016654040254e-02, 4.085535207329e-02, 4.142382163024e-02, 4.203763299012e-02, 4.288167157913e-02, 
	4.375137501808e-02, 4.421334367274e-02, 4.475315198650e-02, 4.520201348427e-02, 4.555036207354e-02, 
	4.586547880044e-02, 4.616136642367e-02, 4.643008405337e-02, 4.651147407174e-02, 4.659317798645e-02, 
	4.671116553885e-02, 4.691795312546e-02, 4.704465260829e-02, 4.709954665822e-02, 4.718435768191e-02, 
	4.727462122633e-02, 4.736276563160e-02, 4.744879089772e-02, 4.753260935254e-02, 4.761958110035e-02, 
	4.767808549067e-02, 4.770902742021e-02, 4.776332127168e-02, 4.781600386286e-02, 4.785227825407e-02, 
	4.790573648483e-02, 4.797350682002e-02, 4.801765752095e-02, 4.804231135747e-02, 4.806324864007e-02, 
	4.807693290341e-02, 4.809747776717e-02, 4.812482325026e-02, 4.814377069925e-02, 4.815699326774e-02, 
	4.817759816104e-02, 4.819551140778e-02, 4.820825388528e-02, 4.822736752893e-02, 4.824965755757e-02, 
	4.827088569291e-02, 4.830840201758e-02, 4.834017961624e-02, 4.837804682318e-02, 4.841523051650e-02, 
	4.846171273523e-02, 4.854582233326e-02, 4.863623793634e-02, 4.870425332755e-02, 4.873453047848e-02, 
	4.877246671938e-02, 4.881993216368e-02, 4.884350585599e-02, 4.887248559455e-02, 4.891329841169e-02, 
	4.893373701351e-02, 4.894554201376e-02, 4.896604548620e-02, 4.899755517888e-02, 4.903437893709e-02, 
	4.907304521450e-02, 4.909818838849e-02, 4.911928731512e-02, 4.914797126302e-02, 4.916605999930e-02, 
	4.918754234033e-02, 4.921648044551e-02, 4.923454594456e-02, 4.925676703606e-02, 4.927644365017e-02, 
	4.929406183241e-02, 4.932239044424e-02, 4.935309215885e-02, 4.938948699640e-02, 4.943366533995e-02, 
	4.948066894417e-02, 4.953390545298e-02, 4.960833819433e-02, 4.972241995456e-02, 4.992382870186e-02, 
	5.025274064990e-02, 5.067600158740e-02, 5.137698332506e-02, 5.484002141786e-02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetTRANSPCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::TRANSP).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {3.173719907053e+00, 3.211885370392e+00, 3.234712726271e+00, 
	3.278891876325e+00, 3.390134731334e+00, 3.490471569923e+00, 3.528343721265e+00, 3.654049751744e+00, 
	3.753031420529e+00, 3.905631891862e+00, 4.097764517519e+00, 4.351041569743e+00, 4.600385860870e+00, 
	4.754443363602e+00, 4.838422639241e+00, 4.882966715116e+00, 4.887396715904e+00, 4.843168247604e+00, 
	4.835335249238e+00, 4.867188665920e+00, 4.925116168814e+00, 5.039712674337e+00, 5.365548394236e+00, 
	5.747515303396e+00, 5.963904164138e+00, 6.212466518174e+00, 6.481921907673e+00, 7.056861427136e+00, 
	7.653316574944e+00, 7.958832363944e+00, 8.538996284274e+00, 9.553773676661e+00, 1.021573332010e+01, 
	1.069159818589e+01, 1.128949422493e+01, 1.176725169056e+01, 1.235176339355e+01, 1.280959916521e+01, 
	1.319747915249e+01, 1.358008937984e+01, 1.375766570496e+01, 1.429261472076e+01, 1.483462800480e+01, 
	1.528020605943e+01, 1.572097861039e+01, 1.628258642088e+01, 1.695821663692e+01, 1.759063950930e+01, 
	1.814409052340e+01, 1.766749280480e+01, 1.998563556631e+01, 1.918352871140e+01, 2.100464488964e+01, 
	2.031293118790e+01, 2.281551523674e+01, 2.321339832180e+01, 2.874300642340e+01, 2.313622215290e+01, 
	2.147936499960e+01, 3.489960243610e+01, 2.483051355740e+01, 3.530939283370e+01, 5.029105044170e+01, 
	4.429172853790e+01, 4.671825175920e+01, 5.517189147150e+01, 9.917147131460e+01, 1.363342117954e+02, 
	1.277740164729e+02, 1.580791336605e+02, 9.466738919640e+01, 4.887324585520e+01, 1.451826465925e+02, 
	9.271018240516e+00, 1.663277271198e+01, 1.844080476941e+01, 1.127800104831e+01, 8.523228849250e+01, 
	2.748665384580e+01, 1.102683523509e+02, 1.071788171487e+02, 2.925019421967e+02, 1.527274989930e+02, 
	3.312614284315e+02, 1.639692837670e+01, 1.729859003790e+01, 3.828182905645e+02, 2.510695145137e+01, 
	1.688760875522e+01, 1.688203350320e+01, 1.748175530422e+01, 1.823289272630e+01, 1.908270929250e+01, 
	1.999232427198e+01, 2.112309946943e+01, 2.231894319348e+01, 2.275105289433e+01, 2.320876173639e+01, 
	2.394732522756e+01, 2.544357377756e+01, 2.649972840755e+01, 2.702101688512e+01, 2.787629173602e+01, 
	2.889605814334e+01, 3.001423700595e+01, 3.124601946635e+01, 3.260580579309e+01, 3.421077084281e+01, 
	3.542338521998e+01, 3.608297724616e+01, 3.741635844256e+01, 3.883315743367e+01, 3.990902773908e+01, 
	4.167277642360e+01, 4.425368320685e+01, 4.615927683198e+01, 4.734204502327e+01, 4.840170603250e+01, 
	4.910831638243e+01, 5.024249500755e+01, 5.185940212311e+01, 5.305066302078e+01, 5.390611179568e+01, 
	5.533720559320e+01, 5.665396968858e+01, 5.761205122444e+01, 5.930724768201e+01, 6.106022138238e+01, 
	6.335346078579e+01, 6.731113173567e+01, 7.173401533866e+01, 7.715670984640e+01, 8.367745208162e+01, 
	9.315283990011e+01, 1.238433694443e+02, 1.840660802059e+02, 2.659927612254e+02, 3.338849061911e+02, 
	4.682736084513e+02, 7.759602779524e+02, 1.053593676547e+03, 1.707924216396e+03, 3.374572175469e+03, 
	4.488729394234e+03, 4.962333050646e+03, 5.209671204013e+03, 3.956915744282e+03, 2.395302106457e+03, 
	1.506355995363e+03, 1.096101184215e+03, 1.016033610945e+03, 8.647123890553e+02, 8.006506260907e+02, 
	7.533350859904e+02, 6.764892879899e+02, 6.991993735780e+02, 6.298541841893e+02, 6.398275228985e+02, 
	5.232414240284e+02, 6.398044263980e+02, 5.217915256814e+02, 7.931352883006e+02, 8.449776208052e+02, 
	6.329099274684e+02, 9.652967908045e+02, 1.055064538773e+03, 1.182611807554e+03, 1.385027793962e+03, 
	1.670468579451e+03, 1.981739727003e+03, 2.408822538127e+03, 3.736428136093e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-7));
}

TEST_F(XSTests, GetTRANSPCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::TRANSP).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();

	std::vector<double> ref {4.510932652174e+00, 4.773753625099e+00, 4.880292548077e+00, 
	4.898464123943e+00, 4.789652565699e+00, 4.546505336872e+00, 4.281216661508e+00, 4.199750330524e+00, 
	4.247935668444e+00, 4.491095423296e+00, 4.970692823397e+00, 5.522741658659e+00, 6.059269105264e+00, 
	6.427499990192e+00, 6.645962651749e+00, 6.900516020820e+00, 7.081155982518e+00, 7.067871931888e+00, 
	6.974375787766e+00, 6.846987556273e+00, 6.711580793981e+00, 6.566988637328e+00, 6.320218501632e+00, 
	6.106416420138e+00, 6.005600732231e+00, 5.904308339727e+00, 5.795330788990e+00, 5.567903068253e+00, 
	5.342246246697e+00, 5.234113738916e+00, 5.038251447712e+00, 4.782462556927e+00, 4.677772289372e+00, 
	4.687332909937e+00, 4.838523153259e+00, 4.981206720832e+00, 5.173430104560e+00, 5.338507848483e+00, 
	5.488687126611e+00, 5.631580125843e+00, 5.715465945459e+00, 5.397887004559e+00, 4.300286703402e+00, 
	4.539540643185e+00, 4.448989449184e+00, 5.688604492370e+00, 5.432422359887e+00, 4.303330212848e+00, 
	8.169236001963e+00, 8.366849014443e+00, 1.144211487719e+01, 2.256497141374e+01, 2.347107159797e+00, 
	2.658997137910e+00, 3.294891346478e+00, 1.598634761130e+01, 2.725314069962e+00, 2.888444724088e+00, 
	2.949712772235e+00, 3.162623665834e+00, 2.929436339540e+00, 3.079117246160e+00, 3.305901117659e+00, 
	3.637071863278e+00, 3.877055491663e+00, 4.262414144839e+00, 5.270042812123e+00, 1.145991790753e+02, 
	4.787072699134e+00, 5.161870269062e+00, 5.330846754726e+00, 5.474944083521e+00, 5.682074539609e+00, 
	5.905773539743e+00, 6.099799014347e+00, 6.320607162861e+00, 6.540464983411e+00, 6.758639407783e+00, 
	6.974452604594e+00, 7.239700742375e+00, 7.599921877854e+00, 7.945486364297e+00, 8.272278727062e+00, 
	8.559228259597e+00, 8.726985987927e+00, 8.867921808370e+00, 9.022828437010e+00, 9.242122948421e+00, 
	9.476928094982e+00, 9.606713246327e+00, 9.765437998013e+00, 9.902184726516e+00, 1.001472473793e+01, 
	1.012012252120e+01, 1.022566733358e+01, 1.032525871595e+01, 1.035716642593e+01, 1.038928362201e+01, 
	1.043765623446e+01, 1.052604194687e+01, 1.058300414739e+01, 1.060845905334e+01, 1.064856394232e+01, 
	1.069311617877e+01, 1.073840673437e+01, 1.078430110910e+01, 1.083085579065e+01, 1.088186761890e+01, 
	1.091718001451e+01, 1.093705407258e+01, 1.097196537873e+01, 1.100683239614e+01, 1.103190632175e+01, 
	1.107048336352e+01, 1.112199609318e+01, 1.115751724248e+01, 1.117790598864e+01, 1.119586565136e+01, 
	1.120818296710e+01, 1.122668472223e+01, 1.125196217675e+01, 1.127082402930e+01, 1.128406310673e+01, 
	1.130479920184e+01, 1.132402068859e+01, 1.133849234611e+01, 1.136086363247e+01, 1.138989214244e+01, 
	1.141911631431e+01, 1.148524089798e+01, 1.155919902038e+01, 1.176775165318e+01, 1.222301666948e+01, 
	1.314018268726e+01, 1.218112277767e+01, 1.190956896206e+01, 1.199627004667e+01, 1.205110466952e+01, 
	1.212986213328e+01, 1.224093016784e+01, 1.230246529414e+01, 1.238603261441e+01, 1.251589270159e+01, 
	1.258756476299e+01, 1.263173095799e+01, 1.271297585451e+01, 1.285084374482e+01, 1.303383322106e+01, 
	1.325860135479e+01, 1.342374971161e+01, 1.357963721268e+01, 1.381488282874e+01, 1.397740144000e+01, 
	1.418991765766e+01, 1.450363611955e+01, 1.471540055406e+01, 1.499454743296e+01, 1.525260245635e+01, 
	1.549402463817e+01, 1.589341710956e+01, 1.633687930784e+01, 1.686537111300e+01, 1.749922283466e+01, 
	1.815365383106e+01, 1.886281769455e+01, 1.979713806181e+01, 2.111037848005e+01, 2.315042217130e+01, 
	2.598991415935e+01, 2.907012209841e+01, 3.329222041667e+01, 4.658250047858e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNWT0CrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NWT0).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 9.927254947800e-01, 
	9.904594952200e-01, 9.876591917200e-01, 9.853572417000e-01, 9.823629483600e-01, 9.799078814000e-01, 
	9.777566456000e-01, 9.754375946000e-01, 9.744370338000e-01, 9.712474384000e-01, 9.679048806000e-01, 
	9.650458582000e-01, 9.622865282000e-01, 9.585066214000e-01, 9.539826884000e-01, 9.497126564000e-01, 
	9.461448006000e-01, 9.497869946000e-01, 9.340967386000e-01, 9.395404420000e-01, 9.281219990000e-01, 
	9.313789756000e-01, 9.159398898000e-01, 9.144309982000e-01, 8.831904008000e-01, 9.160970002000e-01, 
	9.251857624000e-01, 8.544494956000e-01, 9.074819982000e-01, 8.710950614000e-01, 8.033185452000e-01, 
	8.391411304000e-01, 8.093629330000e-01, 7.781021600000e-01, 6.547245680000e-01, 6.769364480000e-01, 
	4.989752760000e-01, 6.572146720000e-01, 6.520598240000e-01, 7.698033900000e-01, 6.283408100000e-01, 
	9.829632099800e-01, 9.429202564000e-01, 9.334250838000e-01, 9.880464235400e-01, 6.949823200000e-01, 
	8.818671182000e-01, 7.306847880000e-01, 7.047177260000e-01, 2.011949420000e-01, 5.436229100000e-01, 
	2.546818260000e-01, 9.303652048000e-01, 9.337575958000e-01, 1.553856140000e-01, 8.702267856000e-01, 
	9.335841910000e-01, 9.353933036000e-01, 9.325241596000e-01, 9.281173348000e-01, 9.226782694000e-01, 
	9.167245700000e-01, 9.091982766000e-01, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-7));
}

TEST_F(XSTests, GetNWT0CrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NWT0).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();
	std::vector<double> ref(172, 1.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetLambdas)
{	
    std::vector<double> lambdas = library_->getNuclide("Pu239")->getLambdas();
	std::vector<double> ref {1.248109990000e-02, 2.994666990000e-02, 1.071553010000e-01, 
	3.176192940000e-01, 1.352380040000e+00, 1.069116020000e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(lambdas, ref, 1.0E-9));
}

TEST_F(XSTests, GetPotXS)
{	
    double potXS = library_->getNuclide("Pu239")->getPotXS();
    EXPECT_EQ(potXS, 11.1471);
}

TEST_F(XSTests, GetTotalCrossSectionResonantU238)
{	
    std::vector<double> xs = library_->getNuclide("U238")->getXSSet(XSKind::NTOT0).getXSNoInterp(2.93000000E+02, 2.11442700E+03).getValues();

	PrintFuncs::createCppVector(xs, "%13.12e");

	std::cout << std::scientific << std::endl;
	for(auto i : xs)
		std::cout << i << std::endl;

	std::vector<double> ref {6.152112010000e+00, 5.993115900000e+00, 5.883075240000e+00, 
	5.795361040000e+00, 5.841610910000e+00, 6.088483810000e+00, 6.566021920000e+00, 6.986002920000e+00, 
	7.294635770000e+00, 7.677556990000e+00, 7.935103890000e+00, 7.931162830000e+00, 7.738595010000e+00, 
	7.526566980000e+00, 7.370854850000e+00, 7.168050770000e+00, 6.962312220000e+00, 6.901368140000e+00, 
	6.930066110000e+00, 7.006326200000e+00, 7.134714130000e+00, 7.290252210000e+00, 7.670152190000e+00, 
	8.091972350000e+00, 8.328283310000e+00, 8.575904850000e+00, 8.828931810000e+00, 9.332166670000e+00, 
	9.822374340000e+00, 1.004757020000e+01, 1.047307970000e+01, 1.126688960000e+01, 1.179641449467e+01, 
	1.212711191576e+01, 1.250544834610e+01, 1.278349529320e+01, 1.311113764300e+01, 1.336780576060e+01, 
	1.358167975250e+01, 1.377732589120e+01, 1.388614012670e+01, 1.446170918990e+01, 1.479276986190e+01, 
	1.511573646380e+01, 1.478413794500e+01, 1.555294698590e+01, 1.636372771200e+01, 1.427928114010e+01, 
	1.787064130200e+01, 2.270317807600e+01, 2.117238827200e+01, 2.079875421500e+01, 2.470131757000e+01, 
	1.557524921400e+01, 2.057712034000e+01, 2.136607422000e+01, 3.789491222000e+01, 1.812668475300e+01, 
	1.728830714300e+01, 2.123576006000e+01, 1.599109385900e+01, 2.238327007000e+01, 3.063064906000e+01, 
	4.255389980000e+01, 1.353512944480e+01, 5.624411780000e+01, 1.624063908700e+01, 1.442688829801e+01, 
	6.632281510000e+01, 1.109107988499e+01, 1.210505020301e+01, 1.316315850642e+01, 1.656469774548e+01, 
	4.587739800200e+01, 3.205202600000e+02, 6.419655286140e+00, 8.528573939250e+00, 1.031770775771e+01, 
	1.382686463340e+01, 2.273076170000e+02, 7.170515739930e+00, 8.283178200380e+00, 9.073131314190e+00, 
	1.020709101810e+01, 1.024777876227e+01, 1.112843298106e+01, 1.382691286830e+01, 2.609643860000e+02, 
	1.153026807580e+01, 9.328058463880e+00, 9.210301251980e+00, 9.086265279280e+00, 9.126378154510e+00, 
	9.172690661510e+00, 9.221905967940e+00, 9.270485880000e+00, 9.284809110000e+00, 9.299348830000e+00, 
	9.320536610000e+00, 9.358437540000e+00, 9.382031440000e+00, 9.392501830000e+00, 9.408819200000e+00, 
	9.426440240000e+00, 9.444002150000e+00, 9.461503030000e+00, 9.478914260000e+00, 9.497588160000e+00, 
	9.510313030000e+00, 9.517325400000e+00, 9.529644970000e+00, 9.541874890000e+00, 9.550616260000e+00, 
	9.563488960000e+00, 9.580722810000e+00, 9.592082980000e+00, 9.598444940000e+00, 9.604002000000e+00, 
	9.607780460000e+00, 9.613454820000e+00, 9.621088980000e+00, 9.626558300000e+00, 9.630394940000e+00, 
	9.636380200000e+00, 9.641733170000e+00, 9.645641330000e+00, 9.651506420000e+00, 9.658350940000e+00, 
	9.665209770000e+00, 9.677496910000e+00, 9.688255310000e+00, 9.701643940000e+00, 9.715280530000e+00, 
	9.733458520000e+00, 9.769242290000e+00, 9.813118930000e+00, 9.850282670000e+00, 9.868723870000e+00, 
	9.893948550000e+00, 9.928510670000e+00, 9.947278020000e+00, 9.972332950000e+00, 1.001116470000e+01, 
	1.003246020000e+01, 1.004557420000e+01, 1.006962390000e+01, 1.011033340000e+01, 1.016421510000e+01, 
	1.023036960000e+01, 1.027889160000e+01, 1.032467560000e+01, 1.039366630000e+01, 1.044100760000e+01, 
	1.050312810000e+01, 1.059504600000e+01, 1.065682890000e+01, 1.073862930000e+01, 1.081429000000e+01, 
	1.088509080000e+01, 1.100222210000e+01, 1.113240050000e+01, 1.128762050000e+01, 1.147390170000e+01, 
	1.166629220000e+01, 1.187488460000e+01, 1.214987470000e+01, 1.253657820000e+01, 1.313754270000e+01, 
	1.397444150000e+01, 1.488244440000e+01, 1.612728500000e+01, 2.005147360000e+01};
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}