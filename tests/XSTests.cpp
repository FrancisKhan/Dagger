#include "gtest/gtest.h"
#include "file_tools.h"
#include "network_tools.h"
#include "Library.h"
#include "additionalPrintFuncs.h"


class XSTests : public ::testing::Test 
{
 protected:
	static std::string* url_;
	static std::string* target_;
	static Library* library_;
	static std::vector<std::string>* nucVec_;
	static std::vector < std::shared_ptr<Nuclide> >* nuclides_;

  	static void SetUpTestSuite() 
	{
    	library_ = new Library;
		url_ = new std::string("http://merlin.polymtl.ca/downloads/libraries/ascii/draglibendfb7r0.gz");
    	target_ =  new std::string(File::getPrePath() + "draglibendfb7r0.gz");
		library_->downloadLibrary(*url_, *target_);
		library_->setXSLibraryPath(*target_);
		nucVec_ = new std::vector<std::string> {"Pu239", "La139", "U238"};
		// nucVec_ = new std::vector<std::string> {"U238"};
		nuclides_ = new std::vector < std::shared_ptr<Nuclide> > {library_->readNuclides(*nucVec_)};
  	}

	static void TearDownTestSuite() 
	{
    	delete library_;
		delete url_;
		delete target_;
		delete nucVec_;
		delete nuclides_;
    	library_ = nullptr;
		url_ = nullptr;
		target_ = nullptr;
		nucVec_ = nullptr;
		nuclides_ = nullptr;
  	}

	virtual void SetUp() {}
  	virtual void TearDown() {}
};

Library* XSTests::library_ = nullptr;
std::string* XSTests::url_ = nullptr;
std::string* XSTests::target_ = nullptr;
std::vector<std::string>* XSTests::nucVec_ = nullptr;
std::vector < std::shared_ptr<Nuclide> >* XSTests::nuclides_ = nullptr;

TEST_F(XSTests, GetNuclides)
{	
    size_t numberOfNuclides = library_->getNumberOfNuclidesRead();
    EXPECT_EQ(numberOfNuclides, 3);
}

TEST_F(XSTests, GetLibraryNuclides)
{	
    std::vector<std::string> nuclideVec = library_->getLibraryNuclides();

    std::vector<std::string> refVec {"Ag107", "Ag109", "Ag111", "Al27", "Am241", 
	"Am242", "Am242m", "Am243", "As75", "B10", "B11", "Ba134", "Ba135", "Ba136", 
	"Ba137", "Ba138", "Ba140", "Be7", "Be9", "Bi209", "Bk249", "Br79", "Br81", 
	"C0", "C0_GR", "Ca40", "Ca42", "Ca43", "Ca44", "Ca46", "Ca48", 
	"Cd106", "Cd108", "Cd110", "Cd111", "Cd112", "Cd113", "Cd114", 
	"Cd115m", "Cd116", "Ce140", "Ce141", "Ce142", "Ce143", "Ce144", 
	"Cf249", "Cf250", "Cf251", "Cf252", "Cf253", "Cl35", "Cl37", 
	"Cm241", "Cm242", "Cm243", "Cm244", "Cm245", "Cm246", "Cm247", 
	"Cm248", "Co59", "Cr50", "Cr52", "Cr53", "Cr54", "Cs133", 
	"Cs134", "Cs135", "Cs136", "Cs137", "Cu63", "Cu65", "DEPL-CHAIN", 
	"Dy160", "Dy161", "Dy162", "Dy163", "Dy164", "Er166", "Er167", 
	"Eu151", "Eu152", "Eu153", "Eu154", "Eu155", "Eu156", "Eu157", 
	"F19", "Fe54", "Fe56", "Fe57", "Fe58", "Gd152", "Gd154", "Gd155", 
	"Gd156", "Gd157", "Gd158", "Gd160", "Ge72", "Ge73", "Ge74", "Ge76", 
	"H1", "H1_CH2", "H1_H2O", "H1_ZRH", "H2", "H2_D2O", "H3", "He3", 
	"He4", "Hf174", "Hf176", "Hf177", "Hf178", "Hf179", "Hf180", 
	"Ho165", "I127", "I129", "I130", "I131", "I135", "In113", "In115", 
	"K39", "K40", "K41", "Kr80", "Kr82", "Kr83", "Kr84", "Kr85", "Kr86", 
	"La138", "La139", "La140", "Li6", "Li7", "Mg24", "Mg25", "Mg26", 
	"Mn55", "Mo100", "Mo92", "Mo94", "Mo95", "Mo96", "Mo97", "Mo99", 
	"N14", "N15", "Na23", "Nb94", "Nb95", "Nd142", "Nd143", "Nd144", 
	"Nd145", "Nd146", "Nd147", "Nd148", "Nd150", "Ni58", "Ni60", "Ni61", 
	"Ni62", "Ni64", "Np236", "Np237", "Np238", "Np239", "O16", "O17", 
	"P31", "Pa231", "Pa233", "Pb204", "Pb206", "Pb207", 
	"Pb208", "Pd104", "Pd105", "Pd106", "Pd107", "Pd108", "Pd110", "Pm147", 
	"Pm148", "Pm148m", "Pm149", "Pm151", "Pr141", "Pr142", "Pr143", "Pu236", 
	"Pu237", "Pu238", "Pu239", "Pu240", "Pu241", "Pu242", "Pu243", "Pu244", 
	"Rb85", "Rb87", "Rh103", "Rh105", "Ru100", "Ru101", "Ru102", "Ru103", 
	"Ru104", "Ru105", "Ru106", "Ru99", "S32", "S33", "S34", "S36", 
	"Sb121", "Sb123", "Sb124", "Sb125", "Sb126", "Se76", "Se77", "Se78", 
	"Se79", "Se80", "Se82", "Si28", "Si29", "Si30", "Sm147", "Sm148", 
	"Sm149", "Sm150", "Sm151", "Sm152", "Sm153", "Sm154", "Sn112", 
	"Sn114", "Sn115", "Sn116", "Sn117", "Sn118", "Sn119", "Sn120", "Sn122", 
	"Sn123", "Sn124", "Sn125", "Sn126", "Sr86", "Sr87", "Sr88", "Sr89", 
	"Sr90", "Tb159", "Tb160", "Tc99", "Te122", "Te123", "Te124", "Te125", 
	"Te126", "Te127m", "Te128", "Te129m", "Te130", "Te132", "Th230", "Th232", 
	"Ti46", "Ti47", "Ti48", "Ti49", "Ti50", "U232", "U233", "U234", "U235", 
	"U236", "U237", "U238", "V0", "W182", "W183", "W184", "W186", "Xe128", 
	"Xe129", "Xe130", "Xe131", "Xe132", "Xe133", "Xe134", "Xe135", "Xe136", 
	"Y89", "Y90", "Y91", "Zn0", "Zr90", "Zr90_ZRH", "Zr91", "Zr92", "Zr93", 
	"Zr94", "Zr95", "Zr96"};

    bool areEqual = std::equal(refVec.begin(), refVec.end(), nuclideVec.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNuclide)
{	
	size_t size = library_->getNuclide("La139")->getCopyOfXSSets().size();
    EXPECT_EQ(size, 21);
}

TEST_F(XSTests, NonFissionableNuclide)
{	
	bool notFissionable = library_->getNuclide("La139")->isFissionable();
    EXPECT_FALSE(notFissionable);
}

TEST_F(XSTests, FissionableNuclide)
{	
	bool fissionable = library_->getNuclide("Pu239")->isFissionable();
    EXPECT_TRUE(fissionable);
}

TEST_F(XSTests, NonResonantNuclide)
{	
	bool notFissionable = library_->getNuclide("La139")->isResonant();
    EXPECT_FALSE(notFissionable);
}

TEST_F(XSTests, ResonantNuclide)
{	
	bool fissionable = library_->getNuclide("Pu239")->isResonant();
    EXPECT_TRUE(fissionable);
}


TEST_F(XSTests, GetTotalCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetINELCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NINEL).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetELASCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NELAS).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetN2NCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::N2N).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetN3NCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::N3N).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetN4NCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::N4N).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNNPCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NNP).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNGCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NG).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNPCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NP).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNDCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::ND).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNTCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NT).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNACrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NA).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetTotalCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetINELCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NINEL).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetELASCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NELAS).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetN2NCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::N2N).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetN3NCrossSectionSetResonant)
{	  
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::N3N).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetN4NCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::N4N).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNNPCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NNP).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNGCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NG).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNPCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NP).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNDCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::ND).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNTCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NT).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNACrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NA).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNFTOTCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NFTOT).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNUSIGFCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NUSIGF).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetCHICrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::CHI).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetNUCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NU).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetSCATT00CrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::SCATT00).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetSCATT00CrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::SCATT00).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetSCATT01CrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::SCATT01).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetTRANSPCrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::TRANSP).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetTRANSPCrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::TRANSP).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNWT0CrossSectionSetNonResonant)
{	
    size_t size = library_->getNuclide("La139")->getXSSet(XSKind::NWT0).getSize();
    EXPECT_EQ(size, 5);
}

TEST_F(XSTests, GetNWT0CrossSectionSetResonant)
{	
    size_t size = library_->getNuclide("Pu239")->getXSSet(XSKind::NWT0).getSize();
    EXPECT_EQ(size, 95);
}

TEST_F(XSTests, GetTotalCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {4.54110384e+00, 4.80455208e+00, 4.91122198e+00, 
	4.92818308e+00, 4.81587982e+00, 4.56882095e+00, 4.30204201e+00, 4.22017908e+00, 
	4.26859808e+00, 4.51293898e+00, 4.99486494e+00, 5.54959106e+00, 6.08871984e+00, 
	6.45873594e+00, 6.67825699e+00, 6.93404198e+00, 7.11555481e+00, 7.10220623e+00, 
	7.00825691e+00, 6.88025188e+00, 6.74418879e+00, 6.59889507e+00, 6.35092688e+00, 
	6.13608599e+00, 6.03478003e+00, 5.93299484e+00, 5.82348680e+00, 5.59495115e+00, 
	5.36819410e+00, 5.25953388e+00, 5.06271315e+00, 4.80566120e+00, 4.70044994e+00, 
	4.71004581e+00, 4.86195803e+00, 5.00532293e+00, 5.19846201e+00, 5.36432409e+00, 
	5.51521492e+00, 5.65878391e+00, 5.74306583e+00, 5.42385197e+00, 4.32109118e+00, 
	4.56141996e+00, 4.47037601e+00, 5.72132683e+00, 5.45120478e+00, 4.33354521e+00, 
	8.20845509e+00, 8.40700722e+00, 1.14971905e+01, 2.26723309e+01, 2.35801911e+00, 
	2.66417193e+00, 3.31265807e+00, 1.60623894e+01, 2.73721600e+00, 2.90113401e+00, 
	2.96272206e+00, 3.17677999e+00, 2.94368100e+00, 3.09399199e+00, 3.32189202e+00, 
	3.65472603e+00, 3.89585996e+00, 4.28305817e+00, 5.29422522e+00, 1.14840103e+02, 
	4.80964518e+00, 5.18665504e+00, 5.35645485e+00, 5.50124216e+00, 5.70934391e+00, 
	5.93407679e+00, 6.12901402e+00, 6.35085583e+00, 6.57172298e+00, 6.79089022e+00, 
	7.00767994e+00, 7.27411509e+00, 7.63594389e+00, 7.98301697e+00, 8.31119919e+00, 
	8.59934044e+00, 8.76777935e+00, 8.90929127e+00, 9.06481647e+00, 9.28493786e+00, 
	9.52058983e+00, 9.65082455e+00, 9.81008053e+00, 9.94725704e+00, 1.00601263e+01, 
	1.01658087e+01, 1.02716179e+01, 1.03714695e+01, 1.04034576e+01, 1.04356575e+01, 
	1.04841280e+01, 1.05726910e+01, 1.06297464e+01, 1.06552401e+01, 1.06954088e+01, 
	1.07400303e+01, 1.07853889e+01, 1.08313599e+01, 1.08779898e+01, 1.09290581e+01, 
	1.09644089e+01, 1.09843025e+01, 1.10192394e+01, 1.10541286e+01, 1.10792189e+01, 
	1.11178293e+01, 1.11693687e+01, 1.12048855e+01, 1.12252598e+01, 1.12432194e+01, 
	1.12555199e+01, 1.12740107e+01, 1.12992697e+01, 1.13180981e+01, 1.13313208e+01, 
	1.13520174e+01, 1.13711786e+01, 1.13855906e+01, 1.14078608e+01, 1.14366713e+01, 
	1.14655886e+01, 1.15300016e+01, 1.16005402e+01, 1.17829800e+01, 1.21841021e+01, 
	1.32906504e+01, 1.21755733e+01, 1.19541607e+01, 1.20430355e+01, 1.20980005e+01, 
	1.21767998e+01, 1.22878103e+01, 1.23493004e+01, 1.24327793e+01, 1.25624542e+01, 
	1.26340332e+01, 1.26781158e+01, 1.27592268e+01, 1.28968506e+01, 1.30794840e+01, 
	1.33037720e+01, 1.34685259e+01, 1.36240377e+01, 1.38586750e+01, 1.40207281e+01, 
	1.42325993e+01, 1.45453300e+01, 1.47563810e+01, 1.50345287e+01, 1.52916317e+01, 
	1.55320902e+01, 1.59297228e+01, 1.63711815e+01, 1.68970661e+01, 1.75275230e+01, 
	1.81780815e+01, 1.88826370e+01, 1.98104248e+01, 2.11133747e+01, 2.31346550e+01, 
	2.59432449e+01, 2.89832954e+01, 3.31386414e+01, 4.61073036e+01};

    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetInelCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NINEL).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {4.447515010000e-01, 5.349293950000e-01, 6.283624770000e-01, 
	9.158861040000e-01, 1.549721000000e+00, 2.121810910000e+00, 2.143987890000e+00, 2.141583920000e+00, 
	2.166430950000e+00, 2.238928080000e+00, 2.297224040000e+00, 2.186503890000e+00, 1.910918950000e+00, 
	1.746662970000e+00, 1.650012970000e+00, 1.460515020000e+00, 1.046635990000e+00, 7.282916900000e-01, 
	6.190413830000e-01, 5.911514760000e-01, 5.618448260000e-01, 5.292968750000e-01, 4.670261140000e-01, 
	4.121496980000e-01, 3.885838090000e-01, 3.672207000000e-01, 3.474386040000e-01, 3.094880880000e-01, 
	2.688175140000e-01, 2.456472070000e-01, 1.760980930000e-01, 8.898680100000e-03, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};

    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}
TEST_F(XSTests, GetNELASCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NELAS).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {2.429012060000e+00, 2.686244960000e+00, 2.790549990000e+00, 
	2.794680120000e+00, 2.661604880000e+00, 2.405356880000e+00, 2.157815930000e+00, 2.078270910000e+00, 
	2.101687910000e+00, 2.273197890000e+00, 2.695882080000e+00, 3.359647040000e+00, 4.172575950000e+00, 
	4.705593110000e+00, 5.020867820000e+00, 5.464770790000e+00, 6.058945180000e+00, 6.363969800000e+00, 
	6.379611970000e+00, 6.280093190000e+00, 6.173826220000e+00, 6.061454770000e+00, 5.876248840000e+00, 
	5.716545100000e+00, 5.638840200000e+00, 5.558407780000e+00, 5.468607900000e+00, 5.277699950000e+00, 
	5.091102120000e+00, 5.005260940000e+00, 4.876832960000e+00, 4.783126830000e+00, 4.684410100000e+00, 
	4.691689970000e+00, 4.840827940000e+00, 4.981563090000e+00, 5.170715810000e+00, 5.332732200000e+00, 
	5.479714870000e+00, 5.619349960000e+00, 5.701167110000e+00, 5.383648870000e+00, 4.291884900000e+00, 
	4.516266820000e+00, 4.409871100000e+00, 5.559172150000e+00, 5.337946890000e+00, 4.219676020000e+00, 
	8.096192360000e+00, 8.226861000000e+00, 1.132513050000e+01, 2.204103090000e+01, 2.253197910000e+00, 
	2.650654080000e+00, 3.149260040000e+00, 1.568089960000e+01, 2.458720920000e+00, 2.621361020000e+00, 
	2.681456090000e+00, 2.924199100000e+00, 2.942646030000e+00, 3.072798010000e+00, 3.303159000000e+00, 
	3.648792980000e+00, 3.886845110000e+00, 4.264921190000e+00, 5.160118100000e+00, 4.834296040000e+01, 
	4.672441960000e+00, 5.117808820000e+00, 5.289350990000e+00, 5.432856080000e+00, 5.636233810000e+00, 
	5.853716850000e+00, 6.040779110000e+00, 6.252242090000e+00, 6.461321830000e+00, 6.667385100000e+00, 
	6.869783880000e+00, 7.116349220000e+00, 7.447066780000e+00, 7.759282110000e+00, 8.048434260000e+00, 
	8.296960830000e+00, 8.439238550000e+00, 8.556670190000e+00, 8.683460240000e+00, 8.857802390000e+00, 
	9.037423130000e+00, 9.132843970000e+00, 9.244335170000e+00, 9.337035180000e+00, 9.408973690000e+00, 
	9.474043850000e+00, 9.535139080000e+00, 9.590622900000e+00, 9.607426640000e+00, 9.624295230000e+00, 
	9.648653030000e+00, 9.691338540000e+00, 9.717484470000e+00, 9.728816990000e+00, 9.746318820000e+00, 
	9.764943120000e+00, 9.783130650000e+00, 9.800879480000e+00, 9.818170550000e+00, 9.836108210000e+00, 
	9.848174100000e+00, 9.854554180000e+00, 9.865748410000e+00, 9.876609800000e+00, 9.884086610000e+00, 
	9.895103450000e+00, 9.909067150000e+00, 9.918164250000e+00, 9.923242570000e+00, 9.927554130000e+00, 
	9.930374150000e+00, 9.934601780000e+00, 9.940235140000e+00, 9.944133760000e+00, 9.946855550000e+00, 
	9.951097490000e+00, 9.954785350000e+00, 9.957405090000e+00, 9.961339000000e+00, 9.965924260000e+00, 
	9.970291140000e+00, 9.978005410000e+00, 9.984537120000e+00, 9.992317200000e+00, 9.999952320000e+00, 
	1.000949000000e+01, 1.002674290000e+01, 1.004524040000e+01, 1.005912490000e+01, 1.006529050000e+01, 
	1.007300000000e+01, 1.008263020000e+01, 1.008740040000e+01, 1.009323980000e+01, 1.010143380000e+01, 
	1.010552310000e+01, 1.010787580000e+01, 1.011195660000e+01, 1.011818030000e+01, 1.012539390000e+01, 
	1.013285260000e+01, 1.013763620000e+01, 1.014158730000e+01, 1.014685540000e+01, 1.015011880000e+01, 
	1.015389920000e+01, 1.015885070000e+01, 1.016184140000e+01, 1.016539860000e+01, 1.016847130000e+01, 
	1.017111970000e+01, 1.017524240000e+01, 1.017952160000e+01, 1.018437670000e+01, 1.019003300000e+01, 
	1.019584080000e+01, 1.020222760000e+01, 1.021095560000e+01, 1.022404480000e+01, 1.024673560000e+01, 
	1.028336620000e+01, 1.033020590000e+01, 1.040754990000e+01, 1.079764370000e+01};

    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetN2NCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::N2N).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {1.558256980000e+00, 1.569924000000e+00, 1.485064980000e+00, 
	1.214172010000e+00, 6.031588910000e-01, 4.122620820000e-02, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetN3NCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::N3N).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {8.076292280000e-02, 3.166747920000e-04, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetN4NCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::N4N).getXSNoInterp(293.0, Numerics::DINF).getValues();
    std::vector<double> ref(172, 0.000000000000e+00);
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNNPCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NNP).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {4.045118110000e-03, 1.051674010000e-03, 2.558401030000e-04, 
	3.257911890000e-05, 1.050379980000e-06, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNGCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NG).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {1.05950504e-03, 9.97772557e-04, 9.98312258e-04, 
	1.01523101e-03, 8.04598676e-04, 3.60931503e-04, 2.28132296e-04, 3.21953004e-04, 
	4.78444912e-04, 8.13469815e-04, 1.75857905e-03, 3.43982503e-03, 5.22513315e-03, 
	6.48058578e-03, 7.37583404e-03, 8.75606574e-03, 9.97378957e-03, 9.94500145e-03, 
	9.60356742e-03, 9.00797546e-03, 8.51736683e-03, 8.14251229e-03, 7.65158515e-03, 
	7.39035383e-03, 7.35607091e-03, 7.36624887e-03, 7.44071789e-03, 7.76361814e-03, 
	8.27548560e-03, 8.62626266e-03, 9.78147332e-03, 1.36347497e-02, 1.60401799e-02, 
	1.83553807e-02, 2.11307798e-02, 2.37601008e-02, 2.77456306e-02, 3.15924101e-02, 
	3.54999788e-02, 3.94336805e-02, 4.18988690e-02, 4.02034707e-02, 2.92051509e-02, 
	4.51526493e-02, 6.05048314e-02, 1.62154496e-01, 1.13257602e-01, 1.13868698e-01, 
	1.12263203e-01, 1.80145994e-01, 1.72051594e-01, 6.31296217e-01, 1.04820698e-01, 
	1.35181397e-02, 1.63397595e-01, 3.81491214e-01, 2.78494805e-01, 2.79772997e-01, 
	2.81265795e-01, 2.52580494e-01, 1.03550300e-03, 2.11940892e-02, 1.87321901e-02, 
	5.93377696e-03, 9.01488960e-03, 1.81366205e-02, 1.34107500e-01, 6.64971085e+01, 
	1.37203202e-01, 6.88466206e-02, 6.71038330e-02, 6.83850423e-02, 7.31092021e-02, 
	8.03599730e-02, 8.82344916e-02, 9.86144692e-02, 1.10401101e-01, 1.23505697e-01, 
	1.37896895e-01, 1.57765999e-01, 1.88877493e-01, 2.23735094e-01, 2.62765110e-01, 
	3.02379191e-01, 3.28539997e-01, 3.52620989e-01, 3.81355494e-01, 4.27136898e-01, 
	4.83166903e-01, 5.17981827e-01, 5.65746427e-01, 6.10222518e-01, 6.51152074e-01, 
	6.91765606e-01, 7.36479580e-01, 7.80843496e-01, 7.96029925e-01, 8.11353981e-01, 
	8.35471690e-01, 8.81355882e-01, 9.12267208e-01, 9.26425695e-01, 9.49088573e-01, 
	9.75080729e-01, 1.00225401e+00, 1.03047705e+00, 1.05981803e+00, 1.09295404e+00, 
	1.11623299e+00, 1.12975204e+00, 1.15349305e+00, 1.17752397e+00, 1.19513798e+00, 
	1.22272599e+00, 1.26029599e+00, 1.28672099e+00, 1.30201995e+00, 1.31566703e+00, 
	1.32515204e+00, 1.33940804e+00, 1.35903299e+00, 1.37396502e+00, 1.38446796e+00, 
	1.40092003e+00, 1.41639698e+00, 1.42818499e+00, 1.44651699e+00, 1.47073996e+00, 
	1.49529505e+00, 1.55199301e+00, 1.61600101e+00, 1.79066098e+00, 2.18414903e+00, 
	3.28116989e+00, 2.14883089e+00, 1.90892196e+00, 1.98389995e+00, 2.03270507e+00, 
	2.10379791e+00, 2.20517993e+00, 2.26189590e+00, 2.33953500e+00, 2.46102810e+00, 
	2.52850509e+00, 2.57024288e+00, 2.64727592e+00, 2.77867103e+00, 2.95409489e+00, 
	3.17091894e+00, 3.33088994e+00, 3.48245192e+00, 3.71182489e+00, 3.87060905e+00, 
	4.07869816e+00, 4.38648176e+00, 4.59453392e+00, 4.86912823e+00, 5.12316608e+00, 
	5.36096716e+00, 5.75448084e+00, 6.19165611e+00, 6.71268511e+00, 7.33749199e+00, 
	7.98223686e+00, 8.68041039e+00, 9.59947491e+00, 1.08893299e+01, 1.28879299e+01, 
	1.56598902e+01, 1.86530800e+01, 2.27311001e+01, 3.53096619e+01};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNPCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NP).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {1.071885970000e-02, 6.420323160000e-03, 3.727999050000e-03, 
	1.396810990000e-03, 3.291243920000e-04, 5.680412870000e-05, 7.797046240000e-06, 1.539612980000e-06, 
	4.863396730000e-07, 5.705743080000e-08, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNDCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::ND).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {7.318424060000e-03, 1.411000970000e-03, 2.852354960000e-04, 
	6.104844210000e-05, 6.374662920000e-06, 2.669827100000e-07, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNTCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NT).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {1.394583960000e-03, 5.882810220000e-04, 1.046886970000e-04, 
	5.819452780000e-06, 1.301938020000e-08, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetNACrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NA).getXSNoInterp(293.0, Numerics::DINF).getValues();

	std::vector<double> ref {3.418340110000e-03, 2.638333940000e-03, 1.869717030000e-03, 
	9.334255010000e-04, 2.537275140000e-04, 8.535716010000e-06, 1.632354040000e-06, 4.526181950000e-07, 
	1.610878970000e-07, 9.275759720000e-09, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};
    
    bool areEqual = std::equal(ref.begin(), ref.end(), xs.begin());
    EXPECT_TRUE(areEqual);
}

TEST_F(XSTests, GetTotalCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184841969636e+01, 
	1.214856970075e+01, 1.252030040133e+01, 1.282671979688e+01, 1.322639000476e+01, 1.355493978994e+01, 
	1.384354999333e+01, 1.415532979652e+01, 1.429019011444e+01, 1.472055030877e+01, 1.517315030841e+01, 
	1.556156978953e+01, 1.593746029571e+01, 1.645401959732e+01, 1.707496020823e+01, 1.766385939433e+01, 
	1.815765011581e+01, 1.765351978925e+01, 1.983901015198e+01, 1.907672022855e+01, 2.068054052632e+01, 
	2.022116083348e+01, 2.241267926442e+01, 2.262879029891e+01, 2.718057014217e+01, 2.239027940419e+01, 
	2.109610052869e+01, 3.150361178270e+01, 2.362838937538e+01, 3.166311117067e+01, 4.245013883086e+01, 
	3.495143952657e+01, 3.913117943817e+01, 4.453943906125e+01, 6.852087241144e+01, 6.217900059621e+01, 
	9.625029772673e+01, 6.945749995146e+01, 6.341894819906e+01, 4.167737163166e+01, 7.027939783687e+01, 
	9.292473244618e+00, 1.582964026377e+01, 1.770193015844e+01, 1.130431990174e+01, 5.606060162327e+01, 
	2.673521899257e+01, 4.897659376665e+01, 5.496423282924e+01, 1.797983245254e+02, 8.497912252417e+01, 
	1.566574106095e+02, 1.640758977588e+01, 1.729597066594e+01, 1.957150420258e+02, 2.465657966994e+01, 
	1.690960949111e+01, 1.690476985796e+01, 1.750460959878e+01, 1.825634046885e+01, 1.910796640119e+01, 
	2.001890568242e+01, 2.114802643228e+01, 2.234705730000e+01, 2.277967070000e+01, 2.323751070000e+01, 
	2.397585300000e+01, 2.547199820000e+01, 2.652802470000e+01, 2.704931830000e+01, 2.790475460000e+01, 
	2.892482950000e+01, 3.004311560000e+01, 3.127496340000e+01, 3.263522720000e+01, 3.424046330000e+01, 
	3.545314410000e+01, 3.615590290000e+01, 3.750438690000e+01, 3.894052510000e+01, 4.003324890000e+01, 
	4.181996540000e+01, 4.442055510000e+01, 4.634222030000e+01, 4.754021840000e+01, 4.861132050000e+01, 
	4.934902570000e+01, 5.051786420000e+01, 5.216800310000e+01, 5.339654920000e+01, 5.430440900000e+01, 
	5.581042480000e+01, 5.719990540000e+01, 5.824167250000e+01, 5.990179440000e+01, 6.198534770000e+01, 
	6.414483640000e+01, 6.848094180000e+01, 7.261368560000e+01, 7.859405520000e+01, 8.532044980000e+01, 
	9.639286040000e+01, 1.256131740000e+02, 1.853210910000e+02, 2.717651670000e+02, 3.362558900000e+02, 
	4.740415040000e+02, 7.880563960000e+02, 1.065822020000e+03, 1.719322020000e+03, 3.390229980000e+03, 
	4.531291020000e+03, 5.051602050000e+03, 5.271365230000e+03, 4.064494140000e+03, 2.445622070000e+03, 
	1.527390010000e+03, 1.194104980000e+03, 1.027132930000e+03, 8.780121460000e+02, 8.150252080000e+02, 
	7.674264530000e+02, 7.292557370000e+02, 7.175814210000e+02, 7.147854000000e+02, 7.182047120000e+02, 
	7.267935790000e+02, 7.469873050000e+02, 7.758085940000e+02, 8.157407840000e+02, 8.686016240000e+02, 
	9.267017210000e+02, 9.923900760000e+02, 1.081651000000e+03, 1.210182980000e+03, 1.413644040000e+03, 
	1.700150020000e+03, 2.012504030000e+03, 2.440680910000e+03, 3.769398930000e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetInelCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NINEL).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {4.045647980000e-01, 4.588080940000e-01, 4.901109040000e-01, 
	5.601137280000e-01, 6.439865230000e-01, 7.595742940000e-01, 9.639034870000e-01, 1.371742960000e+00, 
	1.689239030000e+00, 1.756311060000e+00, 1.754394050000e+00, 1.816218020000e+00, 1.878677960000e+00, 
	1.880898000000e+00, 1.861026050000e+00, 1.830957060000e+00, 1.723109010000e+00, 1.612424020000e+00, 
	1.582736970000e+00, 1.562841060000e+00, 1.518908980000e+00, 1.463665960000e+00, 1.377563000000e+00, 
	1.320667980000e+00, 1.274271010000e+00, 1.221135020000e+00, 1.209246990000e+00, 1.157217030000e+00, 
	1.090363030000e+00, 1.056154970000e+00, 9.982910750000e-01, 8.578732010000e-01, 7.450994358678e-01, 
	6.631208417804e-01, 5.543445328002e-01, 4.884811517194e-01, 4.451552248442e-01, 4.218902262308e-01, 
	4.078312545653e-01, 3.972193189727e-01, 3.923358378814e-01, 3.778806046818e-01, 3.581483053109e-01, 
	3.323802288249e-01, 2.918204878700e-01, 9.900688334737e-02, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}
TEST_F(XSTests, GetELASCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NELAS).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.963807110000e+00, 2.835283990000e+00, 2.744492050000e+00, 
	2.654577970000e+00, 2.637077090000e+00, 2.850734000000e+00, 3.338305000000e+00, 3.629471060000e+00, 
	3.861335040000e+00, 4.185042860000e+00, 4.416890140000e+00, 4.256444930000e+00, 3.919902090000e+00, 
	3.658545970000e+00, 3.474850890000e+00, 3.311146020000e+00, 3.223912000000e+00, 3.334130050000e+00, 
	3.455200910000e+00, 3.589910980000e+00, 3.788031100000e+00, 4.054468150000e+00, 4.628398900000e+00, 
	5.210954190000e+00, 5.520532130000e+00, 5.805912020000e+00, 6.080667020000e+00, 6.648131850000e+00, 
	7.223853110000e+00, 7.526791100000e+00, 8.062560080000e+00, 8.865701680000e+00, 9.368748388629e+00, 
	9.713898719784e+00, 1.014990999777e+01, 1.047421979683e+01, 1.087496959718e+01, 1.115477989935e+01, 
	1.135042989133e+01, 1.163879010344e+01, 1.172936041289e+01, 1.200136030980e+01, 1.223021010074e+01, 
	1.248191979726e+01, 1.266848970461e+01, 1.289803970024e+01, 1.332952012862e+01, 1.348290947577e+01, 
	1.351062010797e+01, 1.328416958864e+01, 1.364801970821e+01, 1.290029998972e+01, 1.335053011550e+01, 
	1.259443968445e+01, 1.297920039266e+01, 1.331185042760e+01, 1.477222951444e+01, 1.316700957904e+01, 
	1.255282040829e+01, 1.504880948563e+01, 1.186728044163e+01, 1.433077997648e+01, 1.516132055137e+01, 
	1.270599957433e+01, 1.293067967365e+01, 1.314875997901e+01, 1.633583016941e+01, 1.267334920494e+01, 
	1.202220905744e+01, 1.686266098904e+01, 1.073265988460e+01, 9.442245016832e+00, 1.242460950174e+01, 
	7.378073098768e+00, 8.499120040365e+00, 9.081432586718e+00, 9.902210731652e+00, 1.061363989921e+01, 
	1.127652031473e+01, 9.612646829366e+00, 1.134358990058e+01, 1.202847992012e+01, 1.061725042679e+01, 
	7.014635007553e+00, 7.486850893325e+00, 8.804161594492e+00, 1.086325994362e+01, 7.373575851966e+00, 
	8.287042516475e+00, 8.516508987264e+00, 8.723719488966e+00, 8.877930408616e+00, 8.988033248742e+00, 
	9.085948715104e+00, 9.177890929802e+00, 9.263100620000e+00, 9.289687160000e+00, 9.316786770000e+00, 
	9.356989860000e+00, 9.430857660000e+00, 9.478517530000e+00, 9.500235560000e+00, 9.534728050000e+00, 
	9.573331830000e+00, 9.613111500000e+00, 9.654351230000e+00, 9.697266580000e+00, 9.744951250000e+00, 
	9.779172900000e+00, 9.798193930000e+00, 9.833415990000e+00, 9.869482040000e+00, 9.895849230000e+00, 
	9.937178610000e+00, 9.994183540000e+00, 1.003434180000e+01, 1.005833910000e+01, 1.007944010000e+01, 
	1.009368420000e+01, 1.011576560000e+01, 1.014636230000e+01, 1.016850850000e+01, 1.018455790000e+01, 
	1.021058370000e+01, 1.023411560000e+01, 1.025140480000e+01, 1.027837470000e+01, 1.031139950000e+01, 
	1.034461020000e+01, 1.040833950000e+01, 1.046663380000e+01, 1.054545690000e+01, 1.063008310000e+01, 
	1.075667950000e+01, 1.104907700000e+01, 1.152562330000e+01, 1.207560060000e+01, 1.241927810000e+01, 
	1.301952840000e+01, 1.409202770000e+01, 1.483322050000e+01, 1.600901030000e+01, 1.729871940000e+01, 
	1.686931420000e+01, 1.567975230000e+01, 1.250068570000e+01, 8.060533520000e+00, 6.130120280000e+00, 
	6.143306730000e+00, 6.387447360000e+00, 6.608720780000e+00, 6.881793020000e+00, 7.034045700000e+00, 
	7.188091280000e+00, 7.363411430000e+00, 7.455162530000e+00, 7.548939230000e+00, 7.621325970000e+00, 
	7.675101760000e+00, 7.747592450000e+00, 7.809171200000e+00, 7.864903450000e+00, 7.915449140000e+00, 
	7.955293180000e+00, 7.988814350000e+00, 8.023368840000e+00, 8.060726170000e+00, 8.105415340000e+00, 
	8.157147410000e+00, 8.209897040000e+00, 8.286096570000e+00, 8.633875850000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetN2NCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::N2N).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {1.121985020000e-01, 1.626157020000e-01, 2.167616040000e-01, 
	2.925193010000e-01, 3.255606890000e-01, 2.495885940000e-01, 1.381752940000e-01, 6.794351340000e-02, 
	4.514005970000e-03, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetN3NCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::N3N).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {3.179849090000e-01, 1.265338960000e-01, 2.607551960000e-02, 
	5.865367710000e-04, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 
	0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00, 0.000000000000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetN4NCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::N4N).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref(171, 0.000000000000e+00);
	ref.insert(ref.begin(), 1.824667920000e-05);

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNNPCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NNP).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNGCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NG).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.210438950000e-03, 2.118142090000e-03, 2.229847010000e-03, 
	2.448844020000e-03, 2.181936060000e-03, 9.069116200000e-04, 3.745626890000e-04, 4.630720940000e-04, 
	8.187838830000e-04, 1.608195950000e-03, 2.030418020000e-03, 2.599681960000e-03, 3.899808040000e-03, 
	5.681205080000e-03, 7.182520810000e-03, 9.426450360000e-03, 1.306570040000e-02, 1.689573940000e-02, 
	1.980582070000e-02, 2.347821000000e-02, 2.835730090000e-02, 3.475702180000e-02, 6.198799980000e-02, 
	8.738352360000e-02, 9.997683020000e-02, 1.113997030000e-01, 1.233917030000e-01, 1.515721980000e-01, 
	1.821082980000e-01, 1.883980930000e-01, 1.922121050000e-01, 2.086540010000e-01, 2.226815049912e-01, 
	2.377177070703e-01, 2.699285039583e-01, 3.091817120602e-01, 3.697135869425e-01, 4.204891032159e-01, 
	4.744931098312e-01, 5.539991225395e-01, 5.858563243082e-01, 6.974320195216e-01, 8.134179957478e-01, 
	9.624480163188e-01, 1.118059041262e+00, 1.283171969878e+00, 1.655017950465e+00, 1.931271028805e+00, 
	2.111905029232e+00, 2.323813051040e+00, 2.677136980102e+00, 3.744033985964e+00, 3.507113944816e+00, 
	2.913309121143e+00, 3.675175931921e+00, 3.988579987045e+00, 4.612208263333e+00, 3.690579897188e+00, 
	4.232520845075e+00, 6.663960193751e+00, 4.361328917311e+00, 9.702632685277e+00, 1.268296897455e+01, 
	8.085019813986e+00, 1.304023917461e+01, 1.200769064923e+01, 1.444558089138e+01, 1.519317743400e+01, 
	1.470624909760e+01, 3.931187087632e+01, 2.539554984057e+01, 4.824945995837e+00, 4.695435238769e+01, 
	6.776065066853e-01, 5.532972858041e+00, 2.098202064301e+00, 5.542962071267e-01, 2.445923884327e+01, 
	5.798938865799e+00, 1.620491992214e+01, 1.929468890851e+01, 5.798407499455e+01, 3.294635643883e+01, 
	3.131944974869e+01, 3.227486115326e+00, 4.158438877482e+00, 8.483041403006e+01, 4.751600971830e+00, 
	1.515262029364e+00, 1.381262937320e+00, 1.399224065876e+00, 1.474848008923e+00, 1.589622934654e+00, 
	1.720920999098e+00, 1.896367980306e+00, 2.088691950000e+00, 2.160296920000e+00, 2.236762050000e+00, 
	2.362380980000e+00, 2.623322010000e+00, 2.811904910000e+00, 2.906919960000e+00, 3.064605000000e+00, 
	3.256383900000e+00, 3.470972060000e+00, 3.712563040000e+00, 3.985640050000e+00, 4.315779210000e+00, 
	4.570602890000e+00, 4.720889090000e+00, 5.014101980000e+00, 5.332059860000e+00, 5.578628060000e+00, 
	5.989936830000e+00, 6.604566100000e+00, 7.069540980000e+00, 7.365107060000e+00, 7.632099150000e+00, 
	7.817678930000e+00, 8.114411350000e+00, 8.537829400000e+00, 8.857111930000e+00, 9.095368390000e+00, 
	9.494606970000e+00, 9.866692540000e+00, 1.014824010000e+01, 1.060124020000e+01, 1.117661000000e+01, 
	1.178077030000e+01, 1.301830960000e+01, 1.421862030000e+01, 1.600366020000e+01, 1.804838940000e+01, 
	2.153186990000e+01, 3.112556080000e+01, 5.190385820000e+01, 8.331920620000e+01, 1.073645020000e+02, 
	1.598735050000e+02, 2.818384090000e+02, 3.912062070000e+02, 6.520731810000e+02, 1.328410030000e+03, 
	1.796697020000e+03, 2.014702030000e+03, 2.118279050000e+03, 1.642212040000e+03, 9.845366820000e+02, 
	6.037647710000e+02, 4.626731870000e+02, 3.899743960000e+02, 3.226406860000e+02, 2.926697080000e+02, 
	2.679342040000e+02, 2.448419950000e+02, 2.351985930000e+02, 2.277958980000e+02, 2.235160060000e+02, 
	2.218421940000e+02, 2.216761930000e+02, 2.243312990000e+02, 2.300305940000e+02, 2.391634060000e+02, 
	2.502924960000e+02, 2.637019040000e+02, 2.827551880000e+02, 3.112124940000e+02, 3.576521000000e+02, 
	4.245172120000e+02, 4.984816890000e+02, 6.008574830000e+02, 9.216624760000e+02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNPCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NP).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNDCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::ND).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNTCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NT).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNACrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NA).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();
	std::vector<double> ref(172, 0.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNFTOTCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NFTOT).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.350255970000e+00, 2.420903920000e+00, 2.415081980000e+00, 
	2.286206960000e+00, 2.237148050000e+00, 2.250340940000e+00, 2.136674880000e+00, 1.891438010000e+00, 
	1.698135970000e+00, 1.706519010000e+00, 1.771293040000e+00, 1.831783060000e+00, 1.894363050000e+00, 
	1.934142950000e+00, 1.974167940000e+00, 1.954396960000e+00, 1.936439990000e+00, 1.864397050000e+00, 
	1.787876960000e+00, 1.738963010000e+00, 1.700963020000e+00, 1.685464020000e+00, 1.651312950000e+00, 
	1.585983040000e+00, 1.559703950000e+00, 1.573289040000e+00, 1.561470030000e+00, 1.552503940000e+00, 
	1.542135950000e+00, 1.516837000000e+00, 1.490543960000e+00, 1.495951060000e+00, 1.514602019880e+00, 
	1.536980050529e+00, 1.549537999839e+00, 1.558412999441e+00, 1.540471050534e+00, 1.562016039763e+00, 
	1.615322959530e+00, 1.570201011300e+00, 1.587648040701e+00, 1.649304041323e+00, 1.777129041285e+00, 
	1.790622040660e+00, 1.864601989474e+00, 2.175808102479e+00, 2.090421932215e+00, 2.249670923252e+00, 
	2.535126103196e+00, 2.045542909890e+00, 3.513854959974e+00, 2.432390116669e+00, 3.822894097896e+00, 
	4.713406156434e+00, 5.758307080893e+00, 5.328353102092e+00, 7.796127880518e+00, 5.532695885904e+00, 
	4.310752078103e+00, 9.790837929574e+00, 7.399777095312e+00, 7.629692320025e+00, 1.460584100913e+01, 
	1.416041935528e+01, 1.316027042762e+01, 1.938298988400e+01, 3.773946130230e+01, 3.431248910394e+01, 
	6.952183873111e+01, 1.328295879340e+01, 2.729074150041e+01, 2.741017905949e+01, 1.090044030770e+01, 
	1.236793959291e+00, 1.797549051484e+00, 6.522293995077e+00, 8.478112840739e-01, 2.098772900475e+01, 
	9.659767454456e+00, 2.315902854056e+01, 2.432595095805e+01, 1.097856832301e+02, 4.141550607072e+01, 
	1.183233047005e+02, 5.693247902870e+00, 4.333365044409e+00, 1.000212990362e+02, 1.253139968931e+01, 
	7.107301125012e+00, 7.007000863739e+00, 7.381663128575e+00, 7.903564129089e+00, 8.530307619859e+00, 
	9.212037587644e+00, 1.007376001001e+01, 1.099526020000e+01, 1.132968040000e+01, 1.168396000000e+01, 
	1.225648020000e+01, 1.341782000000e+01, 1.423760030000e+01, 1.464216040000e+01, 1.530541990000e+01, 
	1.609510990000e+01, 1.695903020000e+01, 1.790805050000e+01, 1.895232960000e+01, 2.017974090000e+01, 
	2.110337070000e+01, 2.163681980000e+01, 2.265686990000e+01, 2.373897930000e+01, 2.455876920000e+01, 
	2.589285090000e+01, 2.782180020000e+01, 2.923833080000e+01, 3.011677930000e+01, 3.089978030000e+01, 
	3.143766020000e+01, 3.228768920000e+01, 3.348379900000e+01, 3.437091830000e+01, 3.502447890000e+01, 
	3.610523990000e+01, 3.709909820000e+01, 3.784201810000e+01, 3.902217860000e+01, 4.049732970000e+01, 
	4.201945880000e+01, 4.505429840000e+01, 4.792842860000e+01, 5.204494860000e+01, 5.664199070000e+01, 
	6.410430150000e+01, 8.343853000000e+01, 1.218917010000e+02, 1.763704070000e+02, 2.164721070000e+02, 
	3.011484990000e+02, 4.921260070000e+02, 6.597822880000e+02, 1.051239990000e+03, 2.044521000000e+03, 
	2.717725100000e+03, 3.021219970000e+03, 3.140584960000e+03, 2.414220950000e+03, 1.454956050000e+03, 
	9.174818730000e+02, 7.250443120000e+02, 6.305501710000e+02, 5.484896850000e+02, 5.153214110000e+02, 
	4.923041990000e+02, 4.770502930000e+02, 4.749276120000e+02, 4.794404910000e+02, 4.870675050000e+02, 
	4.972763060000e+02, 5.175634770000e+02, 5.436680910000e+02, 5.778452760000e+02, 6.215227050000e+02, 
	6.684539180000e+02, 7.206995240000e+02, 7.908728030000e+02, 8.909094240000e+02, 1.047885990000e+03, 
	1.267475950000e+03, 1.505812010000e+03, 1.831536990000e+03, 2.839102050000e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNUSIGFCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NUSIGF).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {1.288118360000e+01, 1.252699470000e+01, 1.202330590000e+01, 
	1.080385590000e+01, 1.002067470000e+01, 9.495697020000e+00, 8.501502040000e+00, 7.238233570000e+00, 
	6.330739020000e+00, 6.142384050000e+00, 6.131842610000e+00, 6.151956080000e+00, 6.209856990000e+00, 
	6.235605720000e+00, 6.306510930000e+00, 6.160966400000e+00, 5.998360630000e+00, 5.707031730000e+00, 
	5.436612610000e+00, 5.257878300000e+00, 5.117915150000e+00, 5.049915790000e+00, 4.911979680000e+00, 
	4.688170910000e+00, 4.599024300000e+00, 4.628949640000e+00, 4.585376740000e+00, 4.544206620000e+00, 
	4.501314160000e+00, 4.422282220000e+00, 4.336975570000e+00, 4.341151710000e+00, 4.389623602104e+00, 
	4.451967350695e+00, 4.487665071134e+00, 4.513113569892e+00, 4.460806444004e+00, 4.522778438393e+00, 
	4.676818406439e+00, 4.545941862577e+00, 4.596336392726e+00, 4.774531633552e+00, 5.144307489960e+00, 
	5.183199330081e+00, 5.397172458660e+00, 6.297841513134e+00, 6.050571789702e+00, 6.511419931715e+00, 
	7.337536299250e+00, 5.920475591421e+00, 1.017017556849e+01, 7.040035179633e+00, 1.106450282454e+01, 
	1.364184487294e+01, 1.666604348602e+01, 1.542160538967e+01, 2.256387208747e+01, 1.601272838317e+01, 
	1.247603938648e+01, 2.817612080781e+01, 2.124648092000e+01, 2.180083938091e+01, 4.186833003019e+01, 
	4.071678859344e+01, 3.763840982809e+01, 5.567107415245e+01, 1.085626993604e+02, 9.831307334075e+01, 
	2.002066563772e+02, 3.740401846985e+01, 7.822227314209e+01, 7.924022362733e+01, 3.047131355751e+01, 
	3.570879785345e+00, 5.104579891702e+00, 1.883761426557e+01, 2.443747905519e+00, 5.987099452459e+01, 
	2.760510838283e+01, 6.618478349970e+01, 6.942176478547e+01, 3.142131212870e+02, 1.179970968428e+02, 
	3.388549520602e+02, 1.635993546686e+01, 1.247539684829e+01, 2.854161796756e+02, 3.586593340255e+01, 
	2.040888460801e+01, 2.013439841582e+01, 2.122197879507e+01, 2.273038165623e+01, 2.453903115404e+01, 
	2.650542026495e+01, 2.899004554863e+01, 3.164662550000e+01, 3.261050420000e+01, 3.363161090000e+01, 
	3.528165820000e+01, 3.862806320000e+01, 4.098999400000e+01, 4.215542980000e+01, 4.406583400000e+01, 
	4.634021760000e+01, 4.882817080000e+01, 5.156042480000e+01, 5.456676860000e+01, 5.809933470000e+01, 
	6.075714110000e+01, 6.229217910000e+01, 6.522694400000e+01, 6.833936310000e+01, 7.069714360000e+01, 
	7.453378300000e+01, 8.007923890000e+01, 8.415121460000e+01, 8.667604060000e+01, 8.892600250000e+01, 
	9.047129820000e+01, 9.291347500000e+01, 9.634989930000e+01, 9.889868930000e+01, 1.007761690000e+02, 
	1.038797610000e+02, 1.067335360000e+02, 1.088668590000e+02, 1.122556760000e+02, 1.164914170000e+02, 
	1.208602220000e+02, 1.295699310000e+02, 1.378178410000e+02, 1.496255800000e+02, 1.628100740000e+02, 
	1.842018130000e+02, 2.395963900000e+02, 3.496792910000e+02, 5.055339660000e+02, 6.202045900000e+02, 
	8.622775880000e+02, 1.408107540000e+03, 1.887198490000e+03, 3.005660160000e+03, 5.843443360000e+03, 
	7.766737300000e+03, 8.633815430000e+03, 8.974985350000e+03, 6.900360840000e+03, 4.160438960000e+03, 
	2.625482180000e+03, 2.076084230000e+03, 1.806424680000e+03, 1.572476320000e+03, 1.478051760000e+03, 
	1.412729610000e+03, 1.369804930000e+03, 1.364162960000e+03, 1.377645020000e+03, 1.399993650000e+03, 
	1.429635010000e+03, 1.488397710000e+03, 1.563891970000e+03, 1.662620730000e+03, 1.788703490000e+03, 
	1.924073000000e+03, 2.074708010000e+03, 2.277007570000e+03, 2.565348390000e+03, 3.017739010000e+03, 
	3.650495120000e+03, 4.337209960000e+03, 5.275646000000e+03, 8.178303710000e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetCHICrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::CHI).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {4.041287865000e-06, 2.104593475000e-05, 3.129277685000e-05, 
	2.384248655000e-04, 6.688557350000e-04, 2.494362880000e-03, 6.378784300000e-03, 5.487499750000e-03, 
	7.439535600000e-03, 2.158563025000e-02, 3.102752380000e-02, 3.965510800000e-02, 4.586061465000e-02, 
	2.416964995000e-02, 2.435877920000e-02, 4.755625130000e-02, 4.385623335000e-02, 2.004352025000e-02, 
	1.867738550000e-02, 1.726476660000e-02, 1.586511915000e-02, 1.448166930000e-02, 3.571301700000e-02, 
	9.567573650000e-03, 8.514526300000e-03, 7.546432300000e-03, 6.647437350000e-03, 1.545908490000e-02, 
	3.909866325000e-03, 3.410303965000e-03, 7.772096450000e-03, 6.335947650000e-03, 1.089446130000e-03, 
	2.458660400000e-03, 1.129831420000e-03, 8.400049400000e-04, 8.750612050000e-04, 2.153463140000e-04, 
	3.942630430000e-04, 9.001058050000e-05, 1.194118670000e-04, 3.346743470000e-04, 5.707506000000e-05, 
	1.283271415000e-04, 5.834411800000e-05, 4.284404715000e-05, 4.453873770000e-05, 1.095293920000e-05, 
	2.774518725000e-05, 2.915148345000e-06, 1.695948960000e-05, 2.890732960000e-06, 6.503782500000e-06, 
	8.310414600000e-07, 2.155928315000e-06, 2.226288645000e-06, 8.910203050000e-07, 1.434467665000e-06, 
	5.744522000000e-07, 1.617226415000e-06, 5.173912450000e-07, 3.873527420000e-07, 5.080412400000e-07, 
	2.394930050000e-07, 4.703054655000e-08, 1.624097765000e-07, 5.081149700000e-08, 2.324032345000e-08, 
	3.470418265000e-08, 1.072759660000e-08, 8.646811250000e-09, 6.941515350000e-09, 1.312806130000e-08, 
	6.863714950000e-09, 8.124755100000e-09, 7.091968350000e-09, 6.193658050000e-09, 5.411948200000e-09, 
	4.731389945000e-09, 6.009927200000e-09, 6.358233050000e-09, 3.780344040000e-09, 4.013337220000e-09, 
	2.027096270000e-09, 1.054308195000e-09, 1.226978295000e-09, 1.052180900000e-09, 1.684097640000e-09, 
	9.267290800000e-10, 3.301479370000e-10, 9.473021250000e-10, 1.279882730000e-10, 5.927984750000e-10, 
	7.481217050000e-11, 4.785986050000e-10, 4.187973925000e-11, 1.039870065000e-10, 4.295369960000e-11, 
	1.612164290000e-10, 1.909038345000e-10, 2.455710980000e-11, 6.509820450000e-11, 7.256182450000e-11, 
	7.184863800000e-11, 6.720211900000e-11, 6.656595400000e-11, 6.206918300000e-11, 6.915425850000e-11, 
	1.908293660000e-11, 2.662365295000e-11, 5.292373150000e-11, 2.442506440000e-11, 2.806719615000e-11, 
	4.835648895000e-11, 4.798447750000e-11, 1.468960715000e-11, 1.977510170000e-11, 9.498451500000e-12, 
	9.483570200000e-12, 1.892249725000e-11, 1.886297715000e-11, 7.239142450000e-12, 1.084220300000e-11, 
	1.730631435000e-11, 7.195994650000e-12, 1.005960070000e-11, 1.577307555000e-11, 1.430218095000e-11, 
	1.426696000000e-11, 3.551330410000e-11, 7.076244550000e-12, 4.227256740000e-11, 7.014608500000e-12, 
	5.232889450000e-11, 5.527158250000e-11, 5.810856650000e-11, 2.712508345000e-11, 1.013558510000e-11, 
	3.498330445000e-11, 2.207745620000e-11, 6.004481650000e-12, 2.726349875000e-11, 1.985512450000e-11, 
	3.631510890000e-12, 9.561213800000e-12, 1.315750635000e-11, 2.097874650000e-11, 1.828243635000e-11, 
	2.016074805000e-11, 5.837271200000e-12, 1.294617885000e-11, 1.291095790000e-11, 3.866388545000e-12, 
	1.222274885000e-11, 9.627085600000e-12, 3.204605420000e-12, 9.600668350000e-12, 1.917747210000e-12, 
	6.386769600000e-12, 5.740566450000e-12, 5.096742450000e-12, 5.091109850000e-12, 4.450098710000e-12, 
	3.176001995000e-12, 3.173801715000e-12, 3.171601435000e-12, 3.169401155000e-12, 3.167200875000e-12, 
	1.962560105000e-12, 1.202441360000e-12, 1.265384500000e-12, 1.897416685000e-12};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNUCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NU).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {5.480757740613e+00, 5.174511304026e+00, 4.978425577090e+00, 
	4.725668362063e+00, 4.479218395939e+00, 4.219670384702e+00, 3.978846814542e+00, 3.826841552159e+00, 
	3.728051894455e+00, 3.599364562602e+00, 3.461788914385e+00, 3.358452326773e+00, 3.278071217658e+00, 
	3.223963213267e+00, 3.194515928569e+00, 3.152361841578e+00, 3.097622782516e+00, 3.061060266106e+00, 
	3.040820331395e+00, 3.023571099422e+00, 3.008833872238e+00, 2.996157574458e+00, 2.974590419097e+00, 
	2.956003180211e+00, 2.948652082339e+00, 2.942211839218e+00, 2.936576848676e+00, 2.927017769758e+00, 
	2.918882839091e+00, 2.915463045799e+00, 2.909659618493e+00, 2.901934311942e+00, 2.898202659502e+00, 
	2.896568077875e+00, 2.896131022020e+00, 2.895967610326e+00, 2.895741820307e+00, 2.895475029231e+00, 
	2.895283806157e+00, 2.895133699356e+00, 2.895060035281e+00, 2.894876574560e+00, 2.894729291150e+00, 
	2.894636172450e+00, 2.894543977282e+00, 2.894483895873e+00, 2.894426094779e+00, 2.894387736630e+00, 
	2.894347657894e+00, 2.894329697410e+00, 2.894307159611e+00, 2.894287035368e+00, 2.894273956120e+00, 
	2.894264661305e+00, 2.894260978425e+00, 2.894253645394e+00, 2.894240888975e+00, 2.894199990996e+00, 
	2.894167690566e+00, 2.877804842699e+00, 2.871232558270e+00, 2.857368091200e+00, 2.866547020745e+00, 
	2.875394264243e+00, 2.860002766287e+00, 2.872161337628e+00, 2.876636168459e+00, 2.865227091015e+00, 
	2.879766416298e+00, 2.815940262378e+00, 2.866256790454e+00, 2.890904997568e+00, 2.795420432327e+00, 
	2.887206683473e+00, 2.839744421711e+00, 2.888188462493e+00, 2.882419650958e+00, 2.852666646832e+00, 
	2.857740469735e+00, 2.857839368512e+00, 2.853815043251e+00, 2.862059168758e+00, 2.849104309900e+00, 
	2.863805679852e+00, 2.873568083802e+00, 2.878916666480e+00, 2.853554017253e+00, 2.862085185357e+00, 
	2.871537908559e+00, 2.873468807463e+00, 2.874958993038e+00, 2.875965992681e+00, 2.876687717206e+00, 
	2.877259239639e+00, 2.877778061003e+00, 2.878206147409e+00, 2.878325164406e+00, 2.878442831026e+00, 
	2.878612588955e+00, 2.878862825705e+00, 2.878995977995e+00, 2.879044392930e+00, 2.879099971638e+00, 
	2.879148877387e+00, 2.879184141084e+00, 2.879175753944e+00, 2.879158908254e+00, 2.879092203805e+00, 
	2.879025439287e+00, 2.878989596244e+00, 2.878903585883e+00, 2.878782707393e+00, 2.878692454995e+00, 
	2.878546796097e+00, 2.878291063998e+00, 2.878112816208e+00, 2.877998332312e+00, 2.877884620429e+00, 
	2.877799989708e+00, 2.877674968452e+00, 2.877507994239e+00, 2.877394442499e+00, 2.877306734177e+00, 
	2.877138090973e+00, 2.876984648646e+00, 2.876877726561e+00, 2.876714730633e+00, 2.876520942565e+00, 
	2.876291733676e+00, 2.875861695807e+00, 2.875492583957e+00, 2.874929921633e+00, 2.874370621300e+00, 
	2.873470401982e+00, 2.871531773151e+00, 2.868770294706e+00, 2.866319665521e+00, 2.865055450308e+00, 
	2.863296980936e+00, 2.861274389020e+00, 2.860335180747e+00, 2.859156984696e+00, 2.858098967925e+00, 
	2.857808282376e+00, 2.857724864701e+00, 2.857743211634e+00, 2.858214298903e+00, 2.859494594356e+00, 
	2.861617495957e+00, 2.863389444810e+00, 2.864838934442e+00, 2.866920496417e+00, 2.868213368297e+00, 
	2.869627382561e+00, 2.871405698937e+00, 2.872359756585e+00, 2.873443202777e+00, 2.874331864943e+00, 
	2.874930883998e+00, 2.875778095138e+00, 2.876556479751e+00, 2.877276667396e+00, 2.877937484199e+00, 
	2.878392882724e+00, 2.878742028974e+00, 2.879107185584e+00, 2.879471606083e+00, 2.879835248107e+00, 
	2.880129693980e+00, 2.880313034560e+00, 2.880447421376e+00, 2.880595190300e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetSCATT00CrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::SCATT00).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {4.546063210255e+00, 3.998428375143e+00, 3.745974170232e+00, 
	3.801414403734e+00, 3.932158460226e+00, 4.109471444626e+00, 4.578532902199e+00, 5.137081512759e+00, 
	5.559591994559e+00, 5.941345619736e+00, 6.171284064383e+00, 6.072664116346e+00, 5.798581961521e+00, 
	5.539445729888e+00, 5.335876908889e+00, 5.142102469707e+00, 4.947020870598e+00, 4.946554094864e+00, 
	5.037934196107e+00, 5.152751900537e+00, 5.306938491496e+00, 5.518134919462e+00, 6.005961687901e+00, 
	6.531624601872e+00, 6.794809672268e+00, 7.027051660402e+00, 7.289909457581e+00, 7.805349786771e+00, 
	8.314218151199e+00, 8.582943277364e+00, 9.060850748862e+00, 9.723576132054e+00, 1.011113848139e+01, 
	1.037387603666e+01, 1.070083451508e+01, 1.095914243635e+01, 1.131620779630e+01, 1.157242942436e+01, 
	1.175372694863e+01, 1.203113073727e+01, 1.211667663294e+01, 1.237381396700e+01, 1.258260800977e+01, 
	1.280849040432e+01, 1.295480629556e+01, 1.299503896936e+01, 1.332951983169e+01, 1.348291444460e+01, 
	1.351062290799e+01, 1.328420963630e+01, 1.364801899081e+01, 1.290029806205e+01, 1.335053437809e+01, 
	1.259444390941e+01, 1.297920388473e+01, 1.331185006854e+01, 1.477223613958e+01, 1.316700671384e+01, 
	1.255282521437e+01, 1.504881714235e+01, 1.186728484083e+01, 1.433078917429e+01, 1.516132447524e+01, 
	1.270600323213e+01, 1.293067535390e+01, 1.314875499145e+01, 1.633583187362e+01, 1.267335156687e+01, 
	1.202220645032e+01, 1.686266709229e+01, 1.073265712671e+01, 9.442245906535e+00, 1.242461962088e+01, 
	7.378072642663e+00, 8.499119761218e+00, 9.081431619264e+00, 9.902213116707e+00, 1.061364157922e+01, 
	1.127652013087e+01, 9.612645076106e+00, 1.134359445594e+01, 1.202847570349e+01, 1.061725352081e+01, 
	7.014632420283e+00, 7.486848570759e+00, 8.804161918318e+00, 1.086326386439e+01, 7.373574190777e+00, 
	8.287034605260e+00, 8.516452292948e+00, 8.723702700560e+00, 8.877924755951e+00, 8.988047828645e+00, 
	9.085957047520e+00, 9.177905122059e+00, 9.263100241327e+00, 9.289687610886e+00, 9.316787171061e+00, 
	9.356989787133e+00, 9.430857400901e+00, 9.478517410763e+00, 9.500235285622e+00, 9.534728315216e+00, 
	9.573331395062e+00, 9.613111607498e+00, 1.065435136223e+01, 1.069726692486e+01, 1.074495140542e+01, 
	1.077917323440e+01, 1.079819373468e+01, 1.083341664100e+01, 1.086948211504e+01, 1.089584908009e+01, 
	1.093717849143e+01, 1.099418361039e+01, 1.103434220608e+01, 1.105833902715e+01, 1.107943985384e+01, 
	1.109368480679e+01, 1.111576535182e+01, 1.114636251869e+01, 1.116850900660e+01, 1.118455779586e+01, 
	1.121058365292e+01, 1.123411559134e+01, 1.125140437717e+01, 1.127837497289e+01, 1.131139935844e+01, 
	1.134461026037e+01, 1.140833931201e+01, 1.146663366873e+01, 1.154545632325e+01, 1.163008317628e+01, 
	1.175667944354e+01, 1.304907733507e+01, 1.352562336389e+01, 1.607560093813e+01, 1.741927873328e+01, 
	1.901952884210e+01, 2.109202734460e+01, 2.183322044355e+01, 2.400900993305e+01, 2.629871834347e+01, 
	2.586931357388e+01, 2.567975163939e+01, 2.350068529573e+01, 1.906053333190e+01, 1.813012008603e+01, 
	1.114330656888e+01, 1.238744754125e+01, 1.360872077552e+01, 1.488179294144e+01, 1.503404574324e+01, 
	1.618809141870e+01, 1.736341154021e+01, 1.845516220588e+01, 1.954893902597e+01, 1.962132610248e+01, 
	2.067510158662e+01, 2.174759220905e+01, 2.280917102776e+01, 2.386490354235e+01, 2.491544922713e+01, 
	2.595529303621e+01, 2.698881446999e+01, 1.002336916986e+01, 2.906072652960e+01, 1.010541528411e+01, 
	1.015714730800e+01, 1.020989679924e+01, 1.028609697229e+01, 1.063387591936e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetSCATT00CrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::SCATT00).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();

	std::vector<double> ref {6.232311730000e+00, 6.361883160000e+00, 6.388938430000e+00, 
	6.138896470000e+00, 5.417633060000e+00, 4.609624860000e+00, 4.301788330000e+00, 4.219864850000e+00, 
	4.268131260000e+00, 4.512114520000e+00, 4.993113520000e+00, 5.546146870000e+00, 6.083491330000e+00, 
	6.452254300000e+00, 6.670880320000e+00, 6.925290110000e+00, 7.105594160000e+00, 7.092264650000e+00, 
	6.998654370000e+00, 6.871245380000e+00, 6.735671040000e+00, 6.590752600000e+00, 6.343276500000e+00, 
	6.128695010000e+00, 6.027421950000e+00, 5.925627230000e+00, 5.816046710000e+00, 5.587187290000e+00, 
	5.359918590000e+00, 5.250911710000e+00, 5.052931790000e+00, 4.792027950000e+00, 4.684409140000e+00, 
	4.691690440000e+00, 4.840825560000e+00, 4.981565000000e+00, 5.170715810000e+00, 5.332732200000e+00, 
	5.479713920000e+00, 5.619349960000e+00, 5.701170440000e+00, 5.383744240000e+00, 4.291862490000e+00, 
	4.516252040000e+00, 4.409836770000e+00, 5.553380010000e+00, 5.344551560000e+00, 4.211221690000e+00, 
	8.096168520000e+00, 8.226529120000e+00, 1.132489010000e+01, 2.204038050000e+01, 2.253190520000e+00, 
	2.651448250000e+00, 3.149028540000e+00, 1.568078140000e+01, 2.458718540000e+00, 2.621360780000e+00, 
	2.681452990000e+00, 2.924201250000e+00, 2.942646740000e+00, 3.072799920000e+00, 3.303160910000e+00, 
	3.648800850000e+00, 3.886857030000e+00, 4.264924050000e+00, 5.160617350000e+00, 4.834032820000e+01, 
	4.672337530000e+00, 5.117794990000e+00, 5.289341930000e+00, 5.432853220000e+00, 5.636246200000e+00, 
	5.853748800000e+00, 6.040804860000e+00, 6.252255440000e+00, 6.461340430000e+00, 6.667404650000e+00, 
	6.869810100000e+00, 7.116383080000e+00, 7.447092530000e+00, 7.759305950000e+00, 8.048469540000e+00, 
	8.297001840000e+00, 8.439286230000e+00, 8.556712150000e+00, 8.683504100000e+00, 8.857852940000e+00, 
	9.037503240000e+00, 9.132929800000e+00, 9.244435310000e+00, 9.337154390000e+00, 9.409111020000e+00, 
	9.474203110000e+00, 9.535323140000e+00, 9.590830800000e+00, 9.607643130000e+00, 9.624520300000e+00, 
	9.648892400000e+00, 9.691607480000e+00, 9.717779160000e+00, 9.729118350000e+00, 9.746637340000e+00, 
	9.765282630000e+00, 9.783490180000e+00, 9.801259990000e+00, 9.818573950000e+00, 9.836539270000e+00, 
	9.848624230000e+00, 9.855015750000e+00, 9.866230960000e+00, 9.877113340000e+00, 9.884606360000e+00, 
	9.895648960000e+00, 9.909647940000e+00, 9.918767930000e+00, 9.923860550000e+00, 9.928185460000e+00, 
	9.931012150000e+00, 9.935256000000e+00, 9.940904620000e+00, 9.944818500000e+00, 9.947549820000e+00, 
	9.951806070000e+00, 9.955506320000e+00, 9.958138470000e+00, 9.962086680000e+00, 9.966691020000e+00, 
	9.971076010000e+00, 9.978825570000e+00, 9.985389710000e+00, 9.993211750000e+00, 1.000089260000e+01, 
	1.001049420000e+01, 1.002786830000e+01, 1.004654500000e+01, 1.006059460000e+01, 1.006684880000e+01, 
	1.007468510000e+01, 1.008448980000e+01, 1.008935930000e+01, 1.009534550000e+01, 1.010377600000e+01, 
	1.010799790000e+01, 1.011043640000e+01, 1.011467170000e+01, 1.012118050000e+01, 1.012878700000e+01, 
	1.013677410000e+01, 1.014196780000e+01, 1.014632610000e+01, 1.015225120000e+01, 1.015598770000e+01, 
	1.016042520000e+01, 1.016640280000e+01, 1.017013450000e+01, 1.017472460000e+01, 1.017878910000e+01, 
	1.018242840000e+01, 1.018828010000e+01, 1.019462200000e+01, 1.020213990000e+01, 1.021126560000e+01, 
	1.022097490000e+01, 1.023197170000e+01, 1.024734690000e+01, 1.027091220000e+01, 1.031251620000e+01, 
	1.038045790000e+01, 1.046788880000e+01, 1.061268710000e+01, 1.132802960000e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-8));
}

TEST_F(XSTests, GetSCATT01CrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::SCATT01).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.977320172947e+00, 2.794378839608e+00, 2.660038343729e+00, 
	2.517561123675e+00, 2.455820168666e+00, 2.620672500077e+00, 3.049090338735e+00, 3.307009338256e+00, 
	3.501010729471e+00, 3.743848928138e+00, 3.846842262481e+00, 3.556003320257e+00, 3.096457289130e+00, 
	2.724825666398e+00, 2.478804250759e+00, 2.222959324884e+00, 2.009129144096e+00, 1.984678752396e+00, 
	2.010285860762e+00, 2.048004414080e+00, 2.111143961186e+00, 2.198643435663e+00, 2.353714685764e+00, 
	2.457472226604e+00, 2.490578865862e+00, 2.499268251826e+00, 2.492854362327e+00, 2.452563732864e+00, 
	2.385143225056e+00, 2.329348036056e+00, 2.204614115726e+00, 1.874406023339e+00, 1.632696379898e+00, 
	1.457041514106e+00, 1.230836175070e+00, 1.059498109440e+00, 8.747066064460e-01, 7.453506347860e-01, 
	6.441908475142e-01, 5.686504201618e-01, 5.282143950379e-01, 4.256555792394e-01, 3.390522952020e-01, 
	2.867037405700e-01, 2.304516896096e-01, 1.970831791196e-01, 1.659135630800e-01, 1.434398907000e-01, 
	1.224595766000e-01, 1.055269952000e-01, 9.308453369000e-02, 7.643148860000e-02, 7.052561036000e-02, 
	6.196961210000e-02, 5.999406326000e-02, 5.718197820000e-02, 5.689367660000e-02, 5.050724710000e-02, 
	4.697550040000e-02, 4.683926390000e-02, 3.778594260000e-02, 4.104816630000e-02, 3.707835830000e-02, 
	3.131146210000e-02, 3.158804080000e-02, 3.007762850000e-02, 2.979208540000e-02, 2.188220460000e-02, 
	1.978352710000e-02, 2.726633950000e-02, 1.940890360000e-02, 2.197584480000e-02, 2.055440751000e-02, 
	2.119900948400e-02, 2.334758802000e-02, 2.460543058500e-02, 2.813885169000e-02, 2.241120750000e-02, 
	2.847525420000e-02, 2.104564908000e-02, 2.408685130000e-02, 1.276680330000e-02, 1.890000700000e-02, 
	8.682568500000e-03, 2.003142330000e-02, 2.349056210000e-02, 1.212343550000e-02, 1.858834863000e-02, 
	2.211074478000e-02, 2.273639680000e-02, 2.319429578000e-02, 2.347777370000e-02, 2.597710749788e-02, 
	2.662142802280e-02, 2.626693056663e-02, 2.811410651715e-02, 2.861780566964e-02, 2.874896361124e-02, 
	2.852777243815e-02, 2.842442243686e-02, 2.829629245487e-02, 2.830141488136e-02, 2.846286397646e-02, 
	2.877135666269e-02, 2.887859404919e-02, 2.894393365393e-02, 2.942140690748e-02, 2.969245719255e-02, 
	2.975888001899e-02, 2.981995473946e-02, 3.000671453699e-02, 3.008235422975e-02, 3.028187892427e-02, 
	3.047171940138e-02, 3.068815415217e-02, 3.085996702297e-02, 3.091889872566e-02, 3.127465850161e-02, 
	3.136256156582e-02, 3.134716544921e-02, 3.129030789253e-02, 3.138769521658e-02, 3.128076931678e-02, 
	3.117733280486e-02, 3.158142241695e-02, 3.177935756479e-02, 3.182856499365e-02, 3.168863361908e-02, 
	3.145060621141e-02, 3.194213433474e-02, 3.213190933506e-02, 3.250917360090e-02, 3.304621837690e-02, 
	3.321478989476e-02, 3.404875570751e-02, 3.562648408931e-02, 3.689256463622e-02, 3.804799892643e-02, 
	3.980001866728e-02, 4.355054759329e-02, 4.561845345559e-02, 4.921660414002e-02, 5.367183099801e-02, 
	5.194786591949e-02, 5.048021553639e+00, 6.038634287151e+00, 7.024989718268e+00, 8.019113643066e+00, 
	9.019169737430e+00, 1.002000058509e+01, 1.102041809191e+01, 1.202150100470e+01, 1.302184960927e+01, 
	1.402198348515e+01, 1.502261361015e+01, 1.602298308196e+01, 1.702334071075e+01, 1.802353610151e+01, 
	1.902386497161e+01, 2.002433980202e+01, 2.102456031856e+01, 2.202485609843e+01, 2.302502992082e+01, 
	2.402455153160e+01, 2.502444326548e+01, 2.602481852060e+01, 2.702509173745e+01, 2.802533691465e+01, 
	2.902525331282e+01, 3.002485248321e+01, 3.102479036618e+01, 3.200931531646e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetSCATT01CrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::SCATT01).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();

	std::vector<double> ref {3.017118782564e-02, 3.079845490096e-02, 3.092943192332e-02, 
	2.971895605718e-02, 2.622725430065e-02, 2.231561312752e-02, 2.082534849241e-02, 2.042874947594e-02, 
	2.066241155590e-02, 2.184355670439e-02, 2.417211660346e-02, 2.684940134138e-02, 2.945073473612e-02, 
	3.123594980768e-02, 3.229433825144e-02, 3.352595917981e-02, 3.439882748197e-02, 3.433429811193e-02, 
	3.388112223391e-02, 3.326432372728e-02, 3.260799601876e-02, 3.190643267244e-02, 3.070837836788e-02, 
	2.966956986164e-02, 2.917929776883e-02, 2.868650027251e-02, 2.815601101039e-02, 2.704808174664e-02, 
	2.594785330306e-02, 2.542014108435e-02, 2.446170228815e-02, 2.319864307319e-02, 2.267765062757e-02, 
	2.271290006300e-02, 2.343487674066e-02, 2.411620916796e-02, 2.503190543976e-02, 2.581624151686e-02, 
	2.652779338929e-02, 2.720378415685e-02, 2.759988454095e-02, 2.606319544132e-02, 2.077729659835e-02, 
	2.186358681496e-02, 2.134842081593e-02, 2.688441762987e-02, 2.587346011342e-02, 2.038690715241e-02, 
	3.919428803747e-02, 3.982537555652e-02, 5.482482281286e-02, 1.066994862617e-01, 1.090790020317e-02, 
	1.283590209001e-02, 1.524473352180e-02, 7.591208870294e-02, 1.190288003786e-02, 1.269024591171e-02, 
	1.298115776486e-02, 1.415632416604e-02, 1.424562046049e-02, 1.487570384046e-02, 1.599090234113e-02, 
	1.766417672174e-02, 1.881662833697e-02, 2.064688516064e-02, 2.498301787659e-02, 2.340199246861e-01, 
	2.261921086582e-02, 2.477571093774e-02, 2.560618527405e-02, 2.630093647927e-02, 2.728558039117e-02, 
	2.833853025656e-02, 2.924408565312e-02, 3.026773713934e-02, 3.127993658926e-02, 3.227751221691e-02, 
	3.325737540628e-02, 3.445105762479e-02, 3.605205214559e-02, 3.756350570321e-02, 3.896337293774e-02, 
	4.016654040254e-02, 4.085535207329e-02, 4.142382163024e-02, 4.203763299012e-02, 4.288167157913e-02, 
	4.375137501808e-02, 4.421334367274e-02, 4.475315198650e-02, 4.520201348427e-02, 4.555036207354e-02, 
	4.586547880044e-02, 4.616136642367e-02, 4.643008405337e-02, 4.651147407174e-02, 4.659317798645e-02, 
	4.671116553885e-02, 4.691795312546e-02, 4.704465260829e-02, 4.709954665822e-02, 4.718435768191e-02, 
	4.727462122633e-02, 4.736276563160e-02, 4.744879089772e-02, 4.753260935254e-02, 4.761958110035e-02, 
	4.767808549067e-02, 4.770902742021e-02, 4.776332127168e-02, 4.781600386286e-02, 4.785227825407e-02, 
	4.790573648483e-02, 4.797350682002e-02, 4.801765752095e-02, 4.804231135747e-02, 4.806324864007e-02, 
	4.807693290341e-02, 4.809747776717e-02, 4.812482325026e-02, 4.814377069925e-02, 4.815699326774e-02, 
	4.817759816104e-02, 4.819551140778e-02, 4.820825388528e-02, 4.822736752893e-02, 4.824965755757e-02, 
	4.827088569291e-02, 4.830840201758e-02, 4.834017961624e-02, 4.837804682318e-02, 4.841523051650e-02, 
	4.846171273523e-02, 4.854582233326e-02, 4.863623793634e-02, 4.870425332755e-02, 4.873453047848e-02, 
	4.877246671938e-02, 4.881993216368e-02, 4.884350585599e-02, 4.887248559455e-02, 4.891329841169e-02, 
	4.893373701351e-02, 4.894554201376e-02, 4.896604548620e-02, 4.899755517888e-02, 4.903437893709e-02, 
	4.907304521450e-02, 4.909818838849e-02, 4.911928731512e-02, 4.914797126302e-02, 4.916605999930e-02, 
	4.918754234033e-02, 4.921648044551e-02, 4.923454594456e-02, 4.925676703606e-02, 4.927644365017e-02, 
	4.929406183241e-02, 4.932239044424e-02, 4.935309215885e-02, 4.938948699640e-02, 4.943366533995e-02, 
	4.948066894417e-02, 4.953390545298e-02, 4.960833819433e-02, 4.972241995456e-02, 4.992382870186e-02, 
	5.025274064990e-02, 5.067600158740e-02, 5.137698332506e-02, 5.484002141786e-02};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetTRANSPCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::TRANSP).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {3.173719907053e+00, 3.211885370392e+00, 3.234712726271e+00, 
	3.278891876325e+00, 3.390134731334e+00, 3.490471569923e+00, 3.528343721265e+00, 3.654049751744e+00, 
	3.753031420529e+00, 3.905631891862e+00, 4.097764517519e+00, 4.351041569743e+00, 4.600385860870e+00, 
	4.754443363602e+00, 4.838422639241e+00, 4.882966715116e+00, 4.887396715904e+00, 4.843168247604e+00, 
	4.835335249238e+00, 4.867188665920e+00, 4.925116168814e+00, 5.039712674337e+00, 5.365548394236e+00, 
	5.747515303396e+00, 5.963904164138e+00, 6.212466518174e+00, 6.481921907673e+00, 7.056861427136e+00, 
	7.653316574944e+00, 7.958832363944e+00, 8.538996284274e+00, 9.553773676661e+00, 1.021572331647e+01, 
	1.069152818664e+01, 1.128946422626e+01, 1.176722168744e+01, 1.235168339832e+01, 1.280958915515e+01, 
	1.319935914581e+01, 1.358667937635e+01, 1.376197571941e+01, 1.429489472953e+01, 1.483409801321e+01, 
	1.527486604896e+01, 1.570700860610e+01, 1.625693641820e+01, 1.690904664515e+01, 1.752041950363e+01, 
	1.803519053921e+01, 1.754799279405e+01, 1.974592561829e+01, 1.900028873995e+01, 2.061001491596e+01, 
	2.015919122138e+01, 2.235268520116e+01, 2.257160832071e+01, 2.712367646557e+01, 2.233977215709e+01, 
	2.104912502829e+01, 3.145677251880e+01, 2.359060343278e+01, 3.162206300437e+01, 4.241306047256e+01, 
	3.492012806447e+01, 3.909959139737e+01, 4.450936143275e+01, 6.849108032604e+01, 6.215711839161e+01, 
	9.623051419963e+01, 6.943023361196e+01, 6.339953929546e+01, 4.165539578686e+01, 7.025884342936e+01, 
	9.271274235134e+00, 1.580629267575e+01, 1.767732472785e+01, 1.127618105005e+01, 5.603819041577e+01, 
	2.670674373837e+01, 4.895554811757e+01, 5.494014597794e+01, 1.797855577221e+02, 8.496022251717e+01, 
	1.566487280410e+02, 1.638755835258e+01, 1.727248010384e+01, 1.957029185903e+02, 2.463799132131e+01, 
	1.688749874633e+01, 1.688203346116e+01, 1.748141530300e+01, 1.823286269515e+01, 1.908198929370e+01, 
	1.999228425439e+01, 2.112175950171e+01, 2.231894319348e+01, 2.275105289433e+01, 2.320876173639e+01, 
	2.394732522756e+01, 2.544357377756e+01, 2.649972840755e+01, 2.702101688512e+01, 2.787629173602e+01, 
	2.889605814334e+01, 3.001423700595e+01, 3.124601946635e+01, 3.260580579309e+01, 3.421077084281e+01, 
	3.542338521998e+01, 3.612608294526e+01, 3.747438018546e+01, 3.891044274577e+01, 4.000296702108e+01, 
	4.178949368060e+01, 4.438986694585e+01, 4.631136033298e+01, 4.750929950127e+01, 4.858004584150e+01, 
	4.931766313843e+01, 5.048651703455e+01, 5.213671279211e+01, 5.336516150478e+01, 5.427312823068e+01, 
	5.577924746720e+01, 5.716832397758e+01, 5.820989314244e+01, 5.986996583501e+01, 6.195365906638e+01, 
	6.411338579379e+01, 6.844899966567e+01, 7.258155369066e+01, 7.856154602640e+01, 8.528740358162e+01, 
	9.635964561011e+01, 1.255791252443e+02, 1.852854645159e+02, 2.717282744354e+02, 3.362178420011e+02, 
	4.740017039813e+02, 7.880128454524e+02, 1.065776401547e+03, 1.719272803396e+03, 3.390176308169e+03, 
	4.531239072134e+03, 5.046554028446e+03, 5.265326595713e+03, 4.057469150282e+03, 2.437602956357e+03, 
	1.518370840263e+03, 1.184084979415e+03, 1.016112511908e+03, 8.659906449953e+02, 8.020033583907e+02, 
	7.534044695148e+02, 7.142331233899e+02, 7.015584379180e+02, 6.977620592893e+02, 7.001811758985e+02, 
	7.077697140284e+02, 7.269629651980e+02, 7.547840336814e+02, 7.937159279016e+02, 8.455765940792e+02, 
	9.026771694684e+02, 9.673656327345e+02, 1.055626181479e+03, 1.183157888263e+03, 1.385618703085e+03, 
	1.671124766687e+03, 1.982479177517e+03, 2.409656119634e+03, 3.737389614684e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-7));
}

TEST_F(XSTests, GetTRANSPCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::TRANSP).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();

	std::vector<double> ref {4.510932652174e+00, 4.773753625099e+00, 4.880292548077e+00, 
	4.898464123943e+00, 4.789652565699e+00, 4.546505336872e+00, 4.281216661508e+00, 4.199750330524e+00, 
	4.247935668444e+00, 4.491095423296e+00, 4.970692823397e+00, 5.522741658659e+00, 6.059269105264e+00, 
	6.427499990192e+00, 6.645962651749e+00, 6.900516020820e+00, 7.081155982518e+00, 7.067871931888e+00, 
	6.974375787766e+00, 6.846987556273e+00, 6.711580793981e+00, 6.566988637328e+00, 6.320218501632e+00, 
	6.106416420138e+00, 6.005600732231e+00, 5.904308339727e+00, 5.795330788990e+00, 5.567903068253e+00, 
	5.342246246697e+00, 5.234113738916e+00, 5.038251447712e+00, 4.782462556927e+00, 4.677772289372e+00, 
	4.687332909937e+00, 4.838523153259e+00, 4.981206720832e+00, 5.173430104560e+00, 5.338507848483e+00, 
	5.488687126611e+00, 5.631580125843e+00, 5.715465945459e+00, 5.397887004559e+00, 4.300286703402e+00, 
	4.539540643185e+00, 4.448989449184e+00, 5.688604492370e+00, 5.432422359887e+00, 4.303330212848e+00, 
	8.169236001963e+00, 8.366849014443e+00, 1.144211487719e+01, 2.256497141374e+01, 2.347107159797e+00, 
	2.658997137910e+00, 3.294891346478e+00, 1.598634761130e+01, 2.725314069962e+00, 2.888444724088e+00, 
	2.949712772235e+00, 3.162623665834e+00, 2.929436339540e+00, 3.079117246160e+00, 3.305901117659e+00, 
	3.637071863278e+00, 3.877055491663e+00, 4.262414144839e+00, 5.270042812123e+00, 1.145991790753e+02, 
	4.787072699134e+00, 5.161870269062e+00, 5.330846754726e+00, 5.474944083521e+00, 5.682074539609e+00, 
	5.905773539743e+00, 6.099799014347e+00, 6.320607162861e+00, 6.540464983411e+00, 6.758639407783e+00, 
	6.974452604594e+00, 7.239700742375e+00, 7.599921877854e+00, 7.945486364297e+00, 8.272278727062e+00, 
	8.559228259597e+00, 8.726985987927e+00, 8.867921808370e+00, 9.022828437010e+00, 9.242122948421e+00, 
	9.476928094982e+00, 9.606713246327e+00, 9.765437998013e+00, 9.902184726516e+00, 1.001472473793e+01, 
	1.012012252120e+01, 1.022566733358e+01, 1.032525871595e+01, 1.035716642593e+01, 1.038928362201e+01, 
	1.043765623446e+01, 1.052604194687e+01, 1.058300414739e+01, 1.060845905334e+01, 1.064856394232e+01, 
	1.069311617877e+01, 1.073840673437e+01, 1.078430110910e+01, 1.083085579065e+01, 1.088186761890e+01, 
	1.091718001451e+01, 1.093705407258e+01, 1.097196537873e+01, 1.100683239614e+01, 1.103190632175e+01, 
	1.107048336352e+01, 1.112199609318e+01, 1.115751724248e+01, 1.117790598864e+01, 1.119586565136e+01, 
	1.120818296710e+01, 1.122668472223e+01, 1.125196217675e+01, 1.127082402930e+01, 1.128406310673e+01, 
	1.130479920184e+01, 1.132402068859e+01, 1.133849234611e+01, 1.136086363247e+01, 1.138989214244e+01, 
	1.141911631431e+01, 1.148524089798e+01, 1.155919902038e+01, 1.176775165318e+01, 1.222301666948e+01, 
	1.314018268726e+01, 1.218112277767e+01, 1.190956896206e+01, 1.199627004667e+01, 1.205110466952e+01, 
	1.212986213328e+01, 1.224093016784e+01, 1.230246529414e+01, 1.238603261441e+01, 1.251589270159e+01, 
	1.258756476299e+01, 1.263173095799e+01, 1.271297585451e+01, 1.285084374482e+01, 1.303383322106e+01, 
	1.325860135479e+01, 1.342374971161e+01, 1.357963721268e+01, 1.381488282874e+01, 1.397740144000e+01, 
	1.418991765766e+01, 1.450363611955e+01, 1.471540055406e+01, 1.499454743296e+01, 1.525260245635e+01, 
	1.549402463817e+01, 1.589341710956e+01, 1.633687930784e+01, 1.686537111300e+01, 1.749922283466e+01, 
	1.815365383106e+01, 1.886281769455e+01, 1.979713806181e+01, 2.111037848005e+01, 2.315042217130e+01, 
	2.598991415935e+01, 2.907012209841e+01, 3.329222041667e+01, 4.658250047858e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNWT0CrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::NWT0).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 9.963627473900e-01, 
	9.952297476100e-01, 9.938295958600e-01, 9.926786208500e-01, 9.911814741800e-01, 9.899539407000e-01, 
	9.888783228000e-01, 9.877187973000e-01, 9.872185169000e-01, 9.856237192000e-01, 9.839524403000e-01, 
	9.825229291000e-01, 9.811432641000e-01, 9.792533107000e-01, 9.769913442000e-01, 9.748563282000e-01, 
	9.730724003000e-01, 9.748934973000e-01, 9.670483693000e-01, 9.697702210000e-01, 9.640609995000e-01, 
	9.656894878000e-01, 9.579699449000e-01, 9.572154991000e-01, 9.415952004000e-01, 9.580485001000e-01, 
	9.625928812000e-01, 9.272247478000e-01, 9.537409991000e-01, 9.355475307000e-01, 9.016592726000e-01, 
	9.195705652000e-01, 9.046814665000e-01, 8.890510800000e-01, 8.273622840000e-01, 8.384682240000e-01, 
	7.494876380000e-01, 8.286073360000e-01, 8.260299120000e-01, 8.849016950000e-01, 8.141704050000e-01, 
	9.914816049900e-01, 9.714601282000e-01, 9.667125419000e-01, 9.940232117700e-01, 8.474911600000e-01, 
	9.409335591000e-01, 8.653423940000e-01, 8.523588630000e-01, 6.005974710000e-01, 7.718114550000e-01, 
	6.273409130000e-01, 9.651826024000e-01, 9.668787979000e-01, 5.776928070000e-01, 9.351133928000e-01, 
	9.667920955000e-01, 9.676966518000e-01, 9.662620798000e-01, 9.640586674000e-01, 9.613391347000e-01, 
	9.583622850000e-01, 9.545991383000e-01, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-7));
}

TEST_F(XSTests, GetNWT0CrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::NWT0).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();
	std::vector<double> ref(172, 1.000000000000e+00);
    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetLambdas)
{	
    std::vector<double> lambdas = library_->getNuclide("Pu239")->getLambdas();
	std::vector<double> ref {1.248109990000e-02, 2.994666990000e-02, 1.071553010000e-01, 
	3.176192940000e-01, 1.352380040000e+00, 1.069116020000e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(lambdas, ref, 1.0E-9));
}

TEST_F(XSTests, GetPotXS)
{	
    double potXS = library_->getNuclide("Pu239")->getPotXS();
    EXPECT_EQ(potXS, 11.1471);
}

TEST_F(XSTests, GetTotalCrossSectionResonant238)
{	
    std::vector<double> xs = library_->getNuclide("U238")->getXSSet(XSKind::NTOT0).getXSNoInterp(2.93000000E+02, 2.11442700E+03).getValues();

	std::vector<double> ref {6.152112010000e+00, 5.993115900000e+00, 5.883075240000e+00, 
	5.795361040000e+00, 5.841610910000e+00, 6.088483810000e+00, 6.566021920000e+00, 6.986002920000e+00, 
	7.294635770000e+00, 7.677556990000e+00, 7.935103890000e+00, 7.931162830000e+00, 7.738595010000e+00, 
	7.526566980000e+00, 7.370854850000e+00, 7.168050770000e+00, 6.962312220000e+00, 6.901368140000e+00, 
	6.930066110000e+00, 7.006326200000e+00, 7.134714130000e+00, 7.290252210000e+00, 7.670152190000e+00, 
	8.091972350000e+00, 8.328283310000e+00, 8.575904850000e+00, 8.828931810000e+00, 9.332166670000e+00, 
	9.822374340000e+00, 1.004757020000e+01, 1.047307970000e+01, 1.126688960000e+01, 1.179990959990e+01, 
	1.213259980009e+01, 1.251335040058e+01, 1.279325000019e+01, 1.312318019962e+01, 1.338171050114e+01, 
	1.359718030145e+01, 1.379432990096e+01, 1.390398980171e+01, 1.448425010062e+01, 1.481815040028e+01, 
	1.514399010199e+01, 1.480943989854e+01, 1.558523960142e+01, 1.640401050895e+01, 1.430029969915e+01, 
	1.792744058702e+01, 2.282767979716e+01, 2.127300961086e+01, 2.089389061725e+01, 2.486039926640e+01, 
	1.560775990584e+01, 2.066907026988e+01, 2.146958984335e+01, 3.837998922008e+01, 1.818650927563e+01, 
	1.733846909255e+01, 2.126862007078e+01, 1.601223000324e+01, 2.240987055924e+01, 3.073531045163e+01, 
	4.266081234466e+01, 1.354844000046e+01, 5.662311006395e+01, 1.628522091075e+01, 1.443334999965e+01, 
	6.721632032869e+01, 1.109220979996e+01, 1.210655019997e+01, 1.316518969992e+01, 1.657202919950e+01, 
	4.618691817883e+01, 3.409914064645e+02, 6.423322999719e+00, 8.530807280138e+00, 1.032053040011e+01, 
	1.383664019990e+01, 2.448931121305e+02, 7.175175969933e+00, 8.284708070056e+00, 9.074705729916e+00, 
	1.021146969993e+01, 1.025037959991e+01, 1.113325029998e+01, 1.384350010070e+01, 2.938663849639e+02, 
	1.156006030057e+01, 9.336608559793e+00, 9.215664709907e+00, 9.089640619747e+00, 9.129221869793e+00, 
	9.175194789905e+00, 9.224213649943e+00, 9.270485880000e+00, 9.284809110000e+00, 9.299348830000e+00, 
	9.320536610000e+00, 9.358437540000e+00, 9.382031440000e+00, 9.392501830000e+00, 9.408819200000e+00, 
	9.426440240000e+00, 9.444002150000e+00, 9.461503030000e+00, 9.478914260000e+00, 9.497588160000e+00, 
	9.510313030000e+00, 9.517325400000e+00, 9.529644970000e+00, 9.541874890000e+00, 9.550616260000e+00, 
	9.563488960000e+00, 9.580722810000e+00, 9.592082980000e+00, 9.598444940000e+00, 9.604002000000e+00, 
	9.607780460000e+00, 9.613454820000e+00, 9.621088980000e+00, 9.626558300000e+00, 9.630394940000e+00, 
	9.636380200000e+00, 9.641733170000e+00, 9.645641330000e+00, 9.651506420000e+00, 9.658350940000e+00, 
	9.665209770000e+00, 9.677496910000e+00, 9.688255310000e+00, 9.701643940000e+00, 9.715280530000e+00, 
	9.733458520000e+00, 9.769242290000e+00, 9.813118930000e+00, 9.850282670000e+00, 9.868723870000e+00, 
	9.893948550000e+00, 9.928510670000e+00, 9.947278020000e+00, 9.972332950000e+00, 1.001116470000e+01, 
	1.003246020000e+01, 1.004557420000e+01, 1.006962390000e+01, 1.011033340000e+01, 1.016421510000e+01, 
	1.023036960000e+01, 1.027889160000e+01, 1.032467560000e+01, 1.039366630000e+01, 1.044100760000e+01, 
	1.050312810000e+01, 1.059504600000e+01, 1.065682890000e+01, 1.073862930000e+01, 1.081429000000e+01, 
	1.088509080000e+01, 1.100222210000e+01, 1.113240050000e+01, 1.128762050000e+01, 1.147390170000e+01, 
	1.166629220000e+01, 1.187488460000e+01, 1.214987470000e+01, 1.253657820000e+01, 1.313754270000e+01, 
	1.397444150000e+01, 1.488244440000e+01, 1.612728500000e+01, 2.005147360000e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetNWT0Resonant238)
{	
    std::vector<double> xs = library_->getNuclide("U238")->getXSSet(XSKind::NWT0).getXSNoInterp(2.93000000E+02, 2.11442700E+03).getValues();

	std::vector<double> ref {1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 9.997038023720e-01, 
	9.995476744950e-01, 9.993685100930e-01, 9.992375114230e-01, 9.990823446420e-01, 9.989609145600e-01, 
	9.988600174000e-01, 9.987673189000e-01, 9.987162192100e-01, 9.984437640500e-01, 9.982871993000e-01, 
	9.981343332900e-01, 9.982914982800e-01, 9.979280000600e-01, 9.975443324100e-01, 9.985302015000e-01, 
	9.968317125500e-01, 9.945460194700e-01, 9.952699998400e-01, 9.954466880300e-01, 9.936009999400e-01, 
	9.979170174300e-01, 9.955513272400e-01, 9.951785001900e-01, 9.873612002000e-01, 9.967104999800e-01, 
	9.971068985800e-01, 9.984550003400e-01, 9.986799999600e-01, 9.988130012100e-01, 9.965947507900e-01, 
	9.974938933700e-01, 9.990175580610e-01, 9.933067564900e-01, 9.972624366600e-01, 9.995523075630e-01, 
	9.867070196000e-01, 9.998981343670e-01, 9.998761003810e-01, 9.998457148320e-01, 9.995576007060e-01, 
	9.932985315100e-01, 9.399657995000e-01, 9.994290006000e-01, 9.997382028670e-01, 9.997265021960e-01, 
	9.992935014310e-01, 9.281911403000e-01, 9.993505065210e-01, 9.998153381310e-01, 9.998265050380e-01, 
	9.995711996450e-01, 9.997462691390e-01, 9.995673034570e-01, 9.988018035700e-01, 8.880375550000e-01, 
	9.974228313700e-01, 9.990842396510e-01, 9.994180063950e-01, 9.996286607350e-01, 9.996885040890e-01, 
	9.997270762690e-01, 9.997498234440e-01, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 
	1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00, 1.000000000000e+00};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetABSCrossSectionResonant)
{	
    std::vector<double> xs = library_->getNuclide("Pu239")->getXSSet(XSKind::ABS).getXSNoInterp(5.50000000e+02, 2.51750000e+02).getValues();

	std::vector<double> ref {2.782649819950e+00, 2.712171660090e+00, 2.660148950610e+00, 
	2.581761641791e+00, 2.564890675060e+00, 2.500836445620e+00, 2.275224736689e+00, 1.959844595494e+00, 
	1.703468759853e+00, 1.708127205950e+00, 1.773323458020e+00, 1.834382741960e+00, 1.898262858040e+00, 
	1.939824155080e+00, 1.981350460810e+00, 1.963823410360e+00, 1.949505690400e+00, 1.881292789400e+00, 
	1.807682780700e+00, 1.762441220000e+00, 1.729320320900e+00, 1.720221041800e+00, 1.713300949800e+00, 
	1.673366563600e+00, 1.659680780200e+00, 1.684688743000e+00, 1.684861733000e+00, 1.704076138000e+00, 
	1.724244248000e+00, 1.705235093000e+00, 1.682756065000e+00, 1.704605061000e+00, 1.737283524871e+00, 
	1.774697757600e+00, 1.819466503798e+00, 1.867594711501e+00, 1.910184637477e+00, 1.982505142979e+00, 
	2.089816069361e+00, 2.124200133839e+00, 2.173504365009e+00, 2.346736060844e+00, 2.590547037032e+00, 
	2.753070056978e+00, 2.982661030736e+00, 3.458980072356e+00, 3.745439882680e+00, 4.180941952057e+00, 
	4.647031132427e+00, 4.369355960930e+00, 6.190991940076e+00, 6.176424102633e+00, 7.330008042712e+00, 
	7.626715277577e+00, 9.433483012813e+00, 9.316933089137e+00, 1.240833614385e+01, 9.223275783092e+00, 
	8.543272923178e+00, 1.645479812333e+01, 1.176110601262e+01, 1.733232500530e+01, 2.728880998367e+01, 
	2.224543916926e+01, 2.620050960224e+01, 3.139068053323e+01, 5.218504219368e+01, 4.950566653794e+01, 
	8.422808782871e+01, 5.259482966972e+01, 5.268629134098e+01, 3.223512505533e+01, 5.785479269539e+01, 
	1.914400465977e+00, 7.330521909525e+00, 8.620496059378e+00, 1.402107491201e+00, 4.544696784802e+01, 
	1.545870632026e+01, 3.936394846269e+01, 4.362063986657e+01, 1.677697582246e+02, 7.436186250954e+01, 
	1.496427544492e+02, 8.920734018195e+00, 8.491803921891e+00, 1.848517130662e+02, 1.728300066114e+01, 
	8.622563154376e+00, 8.388263801059e+00, 8.780887194452e+00, 9.378412138012e+00, 1.011993055451e+01, 
	1.093295858674e+01, 1.197012799032e+01, 1.308395215000e+01, 1.348997732000e+01, 1.392072205000e+01, 
	1.461886118000e+01, 1.604114201000e+01, 1.704950521000e+01, 1.754908036000e+01, 1.837002490000e+01, 
	1.935149380000e+01, 2.043000226000e+01, 2.162061354000e+01, 2.293796965000e+01, 2.449552011000e+01, 
	2.567397359000e+01, 2.635770889000e+01, 2.767097188000e+01, 2.907103916000e+01, 3.013739726000e+01, 
	3.188278773000e+01, 3.442636630000e+01, 3.630787178000e+01, 3.748188636000e+01, 3.853187945000e+01, 
	3.925533913000e+01, 4.040210055000e+01, 4.202162840000e+01, 4.322803023000e+01, 4.411984729000e+01, 
	4.559984687000e+01, 4.696579074000e+01, 4.799025820000e+01, 4.962341880000e+01, 5.167393970000e+01, 
	5.380022910000e+01, 5.807260800000e+01, 6.214704890000e+01, 6.804860880000e+01, 7.469038010000e+01, 
	8.563617140000e+01, 1.145640908000e+02, 1.737955592000e+02, 2.596896132000e+02, 3.238366090000e+02, 
	4.610220040000e+02, 7.739644160000e+02, 1.050988495000e+03, 1.703313171000e+03, 3.372931030000e+03, 
	4.514422120000e+03, 5.035922000000e+03, 5.258864010000e+03, 4.056432990000e+03, 2.439492732000e+03, 
	1.521246644000e+03, 1.187717499000e+03, 1.020524567000e+03, 8.711303710000e+02, 8.079911190000e+02, 
	7.602384030000e+02, 7.218922880000e+02, 7.101262050000e+02, 7.072363890000e+02, 7.105835110000e+02, 
	7.191185000000e+02, 7.392396700000e+02, 7.679993900000e+02, 8.078758700000e+02, 8.606861110000e+02, 
	9.187464140000e+02, 9.844014280000e+02, 1.073627991000e+03, 1.202121918000e+03, 1.405538090000e+03, 
	1.691993162000e+03, 2.004293699000e+03, 2.432394473000e+03, 3.760764526000e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}

TEST_F(XSTests, GetABSCrossSectionNonResonant)
{	
    std::vector<double> xs = library_->getNuclide("La139")->getXSSet(XSKind::ABS).getXSNoInterp(5.50000000e+02, Numerics::DINF).getValues();

	// PrintFuncs::createCppVector(xs, "%13.12e");

	std::vector<double> ref {1.662929615670e+00, 1.582296386441e+00, 1.492050932531e+00, 
	1.217584345396e+00, 6.045527292643e-01, 4.165274653042e-02, 2.375616962800e-04, 3.239452351750e-04, 
	4.790923395700e-04, 8.135361481905e-04, 1.758579050000e-03, 3.439825030000e-03, 5.225133150000e-03, 
	6.480585780000e-03, 7.375834040000e-03, 8.756065740000e-03, 9.973789570000e-03, 9.945001450000e-03, 
	9.603567420000e-03, 9.007975460000e-03, 8.517366830000e-03, 8.142512290000e-03, 7.651585150000e-03, 
	7.390353830000e-03, 7.356070910000e-03, 7.366248870000e-03, 7.440717890000e-03, 7.763618140000e-03, 
	8.275485600000e-03, 8.626262660000e-03, 9.781473320000e-03, 1.363474970000e-02, 1.604017990000e-02, 
	1.835538070000e-02, 2.113077980000e-02, 2.376010080000e-02, 2.774563060000e-02, 3.159241010000e-02, 
	3.549997880000e-02, 3.943368050000e-02, 4.189886900000e-02, 4.020528120000e-02, 2.920177020000e-02, 
	4.515194890000e-02, 6.050147860000e-02, 1.621091070000e-01, 1.137434990000e-01, 1.124949980000e-01, 
	1.122623980000e-01, 1.801451000000e-01, 1.720495970000e-01, 6.312909720000e-01, 1.048244980000e-01, 
	2.038450910000e-02, 1.611078980000e-01, 3.814851940000e-01, 2.784982920000e-01, 2.797746060000e-01, 
	2.812407020000e-01, 2.525792120000e-01, 1.035506020000e-03, 2.119361980000e-02, 1.873134080000e-02, 
	5.933953910000e-03, 9.015227670000e-03, 1.813690920000e-02, 1.344085040000e-01, 6.649288940000e+01, 
	1.373535990000e-01, 6.885097920000e-02, 6.710764770000e-02, 6.838832050000e-02, 7.311276350000e-02, 
	8.036497980000e-02, 8.823838830000e-02, 9.861692790000e-02, 1.104040000000e-01, 1.235093030000e-01, 
	1.379010980000e-01, 1.577720940000e-01, 1.888826040000e-01, 2.237410990000e-01, 2.627739910000e-01, 
	3.023918870000e-01, 3.285554950000e-01, 3.526321050000e-01, 3.813619910000e-01, 4.271464050000e-01, 
	4.831816850000e-01, 5.179973840000e-01, 5.657548900000e-01, 6.102324130000e-01, 6.511660810000e-01, 
	6.917845010000e-01, 7.365025280000e-01, 7.808575030000e-01, 7.960366010000e-01, 8.113535050000e-01, 
	8.354709150000e-01, 8.813580270000e-01, 9.122753740000e-01, 9.264386300000e-01, 9.491102100000e-01, 
	9.751133920000e-01, 1.002279040000e+00, 1.030488970000e+00, 1.059816960000e+00, 1.092952010000e+00, 
	1.116232040000e+00, 1.129753950000e+00, 1.153496980000e+00, 1.177531000000e+00, 1.195148940000e+00, 
	1.222744940000e+00, 1.260329960000e+00, 1.286772970000e+00, 1.302083020000e+00, 1.315745000000e+00, 
	1.325243950000e+00, 1.339519980000e+00, 1.359177950000e+00, 1.374145980000e+00, 1.384675030000e+00, 
	1.401168940000e+00, 1.416708950000e+00, 1.428558950000e+00, 1.447003960000e+00, 1.471444960000e+00, 
	1.496309040000e+00, 1.554721950000e+00, 1.622149940000e+00, 1.822916030000e+00, 2.270543100000e+00, 
	3.178148030000e+00, 2.201803920000e+00, 1.911664010000e+00, 1.984383940000e+00, 2.032989030000e+00, 
	2.103950980000e+00, 2.205260040000e+00, 2.261951920000e+00, 2.339565990000e+00, 2.461040970000e+00, 
	2.528510090000e+00, 2.570245030000e+00, 2.647273060000e+00, 2.778664110000e+00, 2.954080100000e+00, 
	3.170897010000e+00, 3.330882070000e+00, 3.482429030000e+00, 3.711777930000e+00, 3.870579960000e+00, 
	4.078682900000e+00, 4.386446950000e+00, 4.594497200000e+00, 4.869082930000e+00, 5.123095990000e+00, 
	5.360898020000e+00, 5.754463200000e+00, 6.191611770000e+00, 6.712624070000e+00, 7.337384220000e+00, 
	7.982162950000e+00, 8.680377960000e+00, 9.599404340000e+00, 1.088918970000e+01, 1.288782980000e+01, 
	1.565970990000e+01, 1.865291980000e+01, 2.273090930000e+01, 3.530931090000e+01};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs, ref, 1.0E-9));
}