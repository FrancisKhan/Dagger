#include <iostream>

#include "gtest/gtest.h"
#include "file_tools.h"
#include "Library.h"
#include "Interpolation.h"
#include "additionalPrintFuncs.h"

TEST(InterpolationTests, LinLin)
{	
    Library library;
    std::string refLibPath = File::getPrePath() + "Pu239.txt";
	library.setXSLibraryPath(refLibPath);
    std::vector<std::string> nucVec = {"Pu239"};
	std::vector < std::shared_ptr<Nuclide> > nuclides = library.readNuclides(nucVec);

    CrossSectionSet xsSet = library.getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, LinLin(), 1222.5, LinLin()).getValues();

    std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007868923804e+01, 1.926060699441e+01, 2.107419971728e+01, 
	2.041138137349e+01, 2.286544892476e+01, 2.327005098013e+01, 2.879879871397e+01, 2.318670451133e+01, 
	2.152621586997e+01, 3.494699472633e+01, 2.486693703178e+01, 3.535084450762e+01, 5.035057328151e+01, 
	4.428947774795e+01, 4.700928512136e+01, 5.514913822343e+01, 9.911876292216e+01, 1.365133953956e+02, 
	1.280455458235e+02, 1.574484654216e+02, 9.463940266088e+01, 4.894104585493e+01, 1.452115374613e+02, 
	9.291325980372e+00, 1.665552925622e+01, 1.846594543093e+01, 1.129212757670e+01, 8.527055515403e+01, 
	2.721035571720e+01, 1.104958514151e+02, 1.071672478638e+02, 2.925748649244e+02, 1.523677769401e+02, 
	3.318610919350e+02, 1.640211426613e+01, 1.728821924831e+01, 3.831341740404e+02, 2.500240974455e+01, 
	1.690870597098e+01, 1.690422869579e+01, 1.750438941818e+01, 1.825583526907e+01, 1.910818918652e+01, 
	2.001870359543e+01, 2.114906138930e+01, 2.234666567672e+01, 2.277924112149e+01, 2.323703713076e+01, 
	2.397529163596e+01, 2.547122086450e+01, 2.652706692161e+01, 2.704837956145e+01, 2.790400221539e+01, 
	2.892412571053e+01, 3.004226229182e+01, 3.127391191576e+01, 3.263396920199e+01, 3.423921239526e+01, 
	3.545196916794e+01, 3.614352690129e+01, 3.748793229141e+01, 3.891883778679e+01, 4.000701673459e+01, 
	4.178743686491e+01, 4.438229891924e+01, 4.629922689374e+01, 4.749237383015e+01, 4.856021719031e+01, 
	4.928928857858e+01, 5.044812343360e+01, 5.208779829596e+01, 5.330483153344e+01, 5.419718123015e+01, 
	5.568032218027e+01, 5.704764479559e+01, 5.806295057421e+01, 5.973145596847e+01, 6.171270051539e+01, 
	6.391519412219e+01, 6.812641405961e+01, 7.235638614327e+01, 7.815912608677e+01, 8.479575401392e+01, 
	9.527105250825e+01, 1.249686802098e+02, 1.847495502055e+02, 2.691809139684e+02, 3.346779350607e+02, 
	4.703400691173e+02, 7.791389801694e+02, 1.053644413568e+03, 1.703052197877e+03, 3.381259659974e+03, 
	4.541564353902e+03, 5.054881963012e+03, 5.300769656166e+03, 3.995784801468e+03, 2.405982317952e+03, 
	1.514106398246e+03, 1.138256262769e+03, 1.023551068771e+03, 8.753735331471e+02, 8.129405012015e+02, 
	7.661194083729e+02, 7.100438123606e+02, 7.161518806005e+02, 6.747820675754e+02, 6.823508898246e+02, 
	6.187689064442e+02, 6.977148776354e+02, 6.357872723998e+02, 8.152199517540e+02, 8.681055361393e+02, 
	7.605397052812e+02, 9.915166325016e+02, 1.081190359144e+03, 1.209724551928e+03, 1.413149691977e+03, 
	1.699604457475e+03, 2.011877656381e+03, 2.439950388705e+03, 3.768327941973e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST(InterpolationTests, SqrtLogLin)
{	
    Library library;
    std::string refLibPath = File::getPrePath() + "Pu239.txt";
	library.setXSLibraryPath(refLibPath);
    std::vector<std::string> nucVec = {"Pu239"};
	std::vector < std::shared_ptr<Nuclide> > nuclides = library.readNuclides(nucVec);

    CrossSectionSet xsSet = library.getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, Sqrt(), 1222.5, LogLin()).getValues();

    std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007869200049e+01, 1.926054909993e+01, 2.107428661190e+01, 
	2.040811600260e+01, 2.286634942750e+01, 2.327009835948e+01, 2.879889729887e+01, 2.318670673911e+01, 
	2.152622702558e+01, 3.494694522502e+01, 2.486705898611e+01, 3.535080838971e+01, 5.034856427919e+01, 
	4.429248190031e+01, 4.698606220792e+01, 5.515386710760e+01, 9.912614752808e+01, 1.364993153703e+02, 
	1.280230120910e+02, 1.575073570512e+02, 9.464364501982e+01, 4.893694414141e+01, 1.452107912658e+02, 
	9.291405757789e+00, 1.665558216046e+01, 1.846589752248e+01, 1.129338181775e+01, 8.526913593462e+01, 
	2.723763593890e+01, 1.104773717995e+02, 1.071704394395e+02, 2.925694803762e+02, 1.524016673463e+02, 
	3.318081933164e+02, 1.640344308773e+01, 1.729125017303e+01, 3.831069845229e+02, 2.501343109812e+01, 
	1.690879669182e+01, 1.690427713890e+01, 1.750443955997e+01, 1.825588317752e+01, 1.910823369203e+01, 
	2.001872526617e+01, 2.114908869077e+01, 2.234670073086e+01, 2.277927957300e+01, 2.323707951988e+01, 
	2.397534188358e+01, 2.547129044369e+01, 2.652715265222e+01, 2.704846358780e+01, 2.790406956123e+01, 
	2.892418870662e+01, 3.004233867131e+01, 3.127400603396e+01, 3.263408180521e+01, 3.423932436356e+01, 
	3.545207433594e+01, 3.614366090105e+01, 3.748809275976e+01, 3.891903010400e+01, 4.000723634287e+01, 
	4.178770148939e+01, 4.438263107686e+01, 4.629962361946e+01, 4.749287168863e+01, 4.856075095334e+01, 
	4.928987633940e+01, 5.044880588867e+01, 5.208864404774e+01, 5.330583717378e+01, 5.419834112615e+01, 
	5.568174874728e+01, 5.704932786575e+01, 5.806495914443e+01, 5.973351962419e+01, 6.171578969254e+01, 
	6.391782609263e+01, 6.813043464761e+01, 7.235947095325e+01, 7.816384919329e+01, 8.480275655374e+01, 
	9.528597363048e+01, 1.249814686118e+02, 1.847712511983e+02, 2.692443107197e+02, 3.347571971327e+02, 
	4.705098174881e+02, 7.795588762076e+02, 1.054293090139e+03, 1.704167037329e+03, 3.381503699507e+03, 
	4.538902175875e+03, 5.050222490831e+03, 5.295989124531e+03, 3.996728961085e+03, 2.407853229531e+03, 
	1.514943758800e+03, 1.139107321035e+03, 1.023869951674e+03, 8.755775686349e+02, 8.130938216722e+02, 
	7.662348740262e+02, 7.102741133207e+02, 7.162222798089e+02, 6.750533861979e+02, 6.826029374599e+02, 
	6.192652806426e+02, 6.979907124808e+02, 6.361850939879e+02, 8.152535624300e+02, 8.681364591529e+02, 
	7.612205913179e+02, 9.915454799155e+02, 1.081219019264e+03, 1.209753369040e+03, 1.413180705625e+03, 
	1.699638566936e+03, 2.011917094811e+03, 2.439996990375e+03, 3.768402069756e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

