#include <iostream>

#include "gtest/gtest.h"
#include "file_tools.h"
#include "Library.h"
#include "Interpolation.h"
#include "additionalPrintFuncs.h"

class InterpolationTests : public ::testing::Test 
{
 protected:
	static std::string* url_;
	static std::string* target_;
	static Library* library_;
	static std::vector<std::string>* nucVec_;
	static std::vector < std::shared_ptr<Nuclide> >* nuclides_;

	static void SetUpTestSuite() 
	{
    	library_ = new Library;
		url_ = new std::string("https://www.polymtl.ca/merlin/downloads/libraries/ascii/draglibendfb7r0.gz");
    	target_ =  new std::string(File::getPrePath() + "draglibendfb7r0.gz");
		library_->downloadLibrary(*url_, *target_);
		library_->setXSLibraryPath(*target_);
		nucVec_ = new std::vector<std::string> {"Pu239", "La139"};
		nuclides_ = new std::vector < std::shared_ptr<Nuclide> > {library_->readNuclides(*nucVec_)};
  	}

	static void TearDownTestSuite() 
	{
    	delete library_;
		delete url_;
		delete target_;
		delete nucVec_;
		delete nuclides_;
    	library_ = nullptr;
		url_ = nullptr;
		target_ = nullptr;
		nucVec_ = nullptr;
		nuclides_ = nullptr;
  	}

	virtual void SetUp() {}
  	virtual void TearDown() {}
};

Library* InterpolationTests::library_ = nullptr;
std::string* InterpolationTests::url_ = nullptr;
std::string* InterpolationTests::target_ = nullptr;
std::vector<std::string>* InterpolationTests::nucVec_ = nullptr;
std::vector < std::shared_ptr<Nuclide> >* InterpolationTests::nuclides_ = nullptr;

TEST_F(InterpolationTests, LinLin)
{	
    CrossSectionSet xsSet = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, LinLin(), 1222.5, LinLin()).getValues();

    std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007868923804e+01, 1.926060699441e+01, 2.107419971728e+01, 
	2.041138137349e+01, 2.286544892476e+01, 2.327005098013e+01, 2.879879871397e+01, 2.318670451133e+01, 
	2.152621586997e+01, 3.494699472633e+01, 2.486693703178e+01, 3.535084450762e+01, 5.035057328151e+01, 
	4.428947774795e+01, 4.700928512136e+01, 5.514913822343e+01, 9.911876292216e+01, 1.365133953956e+02, 
	1.280455458235e+02, 1.574484654216e+02, 9.463940266088e+01, 4.894104585493e+01, 1.452115374613e+02, 
	9.291325980372e+00, 1.665552925622e+01, 1.846594543093e+01, 1.129212757670e+01, 8.527055515403e+01, 
	2.721035571720e+01, 1.104958514151e+02, 1.071672478638e+02, 2.925748649244e+02, 1.523677769401e+02, 
	3.318610919350e+02, 1.640211426613e+01, 1.728821924831e+01, 3.831341740404e+02, 2.500240974455e+01, 
	1.690870597098e+01, 1.690422869579e+01, 1.750438941818e+01, 1.825583526907e+01, 1.910818918652e+01, 
	2.001870359543e+01, 2.114906138930e+01, 2.234666567672e+01, 2.277924112149e+01, 2.323703713076e+01, 
	2.397529163596e+01, 2.547122086450e+01, 2.652706692161e+01, 2.704837956145e+01, 2.790400221539e+01, 
	2.892412571053e+01, 3.004226229182e+01, 3.127391191576e+01, 3.263396920199e+01, 3.423921239526e+01, 
	3.545196916794e+01, 3.614352690129e+01, 3.748793229141e+01, 3.891883778679e+01, 4.000701673459e+01, 
	4.178743686491e+01, 4.438229891924e+01, 4.629922689374e+01, 4.749237383015e+01, 4.856021719031e+01, 
	4.928928857858e+01, 5.044812343360e+01, 5.208779829596e+01, 5.330483153344e+01, 5.419718123015e+01, 
	5.568032218027e+01, 5.704764479559e+01, 5.806295057421e+01, 5.973145596847e+01, 6.171270051539e+01, 
	6.391519412219e+01, 6.812641405961e+01, 7.235638614327e+01, 7.815912608677e+01, 8.479575401392e+01, 
	9.527105250825e+01, 1.249686802098e+02, 1.847495502055e+02, 2.691809139684e+02, 3.346779350607e+02, 
	4.703400691173e+02, 7.791389801694e+02, 1.053644413568e+03, 1.703052197877e+03, 3.381259659974e+03, 
	4.541564353902e+03, 5.054881963012e+03, 5.300769656166e+03, 3.995784801468e+03, 2.405982317952e+03, 
	1.514106398246e+03, 1.138256262769e+03, 1.023551068771e+03, 8.753735331471e+02, 8.129405012015e+02, 
	7.661194083729e+02, 7.100438123606e+02, 7.161518806005e+02, 6.747820675754e+02, 6.823508898246e+02, 
	6.187689064442e+02, 6.977148776354e+02, 6.357872723998e+02, 8.152199517540e+02, 8.681055361393e+02, 
	7.605397052812e+02, 9.915166325016e+02, 1.081190359144e+03, 1.209724551928e+03, 1.413149691977e+03, 
	1.699604457475e+03, 2.011877656381e+03, 2.439950388705e+03, 3.768327941973e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(InterpolationTests, SqrtLogLin)
{	
    CrossSectionSet xsSet = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    std::vector<double> vec = xsSet.getXS(300.0, Sqrt(), 1222.5, LogLin()).getValues();

    std::vector<double> ref {6.151040080000e+00, 6.006264210000e+00, 5.894751070000e+00, 
	5.796453000000e+00, 5.845954900000e+00, 6.111144070000e+00, 6.577434060000e+00, 6.961059090000e+00, 
	7.254042150000e+00, 7.649480820000e+00, 7.944606780000e+00, 7.907044890000e+00, 7.696843150000e+00, 
	7.479269030000e+00, 7.317226890000e+00, 7.105926040000e+00, 6.896525860000e+00, 6.827847000000e+00, 
	6.845621110000e+00, 6.915193080000e+00, 7.036260130000e+00, 7.238356110000e+00, 7.719263080000e+00, 
	8.204987530000e+00, 8.454483030000e+00, 8.711734770000e+00, 8.974776270000e+00, 9.509425160000e+00, 
	1.003845980000e+01, 1.028818040000e+01, 1.074361040000e+01, 1.142817970000e+01, 1.184842970000e+01, 
	1.214863970000e+01, 1.252033040000e+01, 1.282674980000e+01, 1.322647000000e+01, 1.355494980000e+01, 
	1.384167000000e+01, 1.414873980000e+01, 1.428588010000e+01, 1.471827030000e+01, 1.517368030000e+01, 
	1.556690980000e+01, 1.595143030000e+01, 1.647966960000e+01, 1.712413020000e+01, 1.773407940000e+01, 
	1.826655010000e+01, 1.777301980000e+01, 2.007869200049e+01, 1.926054909993e+01, 2.107428661190e+01, 
	2.040811600260e+01, 2.286634942750e+01, 2.327009835948e+01, 2.879889729887e+01, 2.318670673911e+01, 
	2.152622702558e+01, 3.494694522502e+01, 2.486705898611e+01, 3.535080838971e+01, 5.034856427919e+01, 
	4.429248190031e+01, 4.698606220792e+01, 5.515386710760e+01, 9.912614752808e+01, 1.364993153703e+02, 
	1.280230120910e+02, 1.575073570512e+02, 9.464364501982e+01, 4.893694414141e+01, 1.452107912658e+02, 
	9.291405757789e+00, 1.665558216046e+01, 1.846589752248e+01, 1.129338181775e+01, 8.526913593462e+01, 
	2.723763593890e+01, 1.104773717995e+02, 1.071704394395e+02, 2.925694803762e+02, 1.524016673463e+02, 
	3.318081933164e+02, 1.640344308773e+01, 1.729125017303e+01, 3.831069845229e+02, 2.501343109812e+01, 
	1.690879669182e+01, 1.690427713890e+01, 1.750443955997e+01, 1.825588317752e+01, 1.910823369203e+01, 
	2.001872526617e+01, 2.114908869077e+01, 2.234670073086e+01, 2.277927957300e+01, 2.323707951988e+01, 
	2.397534188358e+01, 2.547129044369e+01, 2.652715265222e+01, 2.704846358780e+01, 2.790406956123e+01, 
	2.892418870662e+01, 3.004233867131e+01, 3.127400603396e+01, 3.263408180521e+01, 3.423932436356e+01, 
	3.545207433594e+01, 3.614366090105e+01, 3.748809275976e+01, 3.891903010400e+01, 4.000723634287e+01, 
	4.178770148939e+01, 4.438263107686e+01, 4.629962361946e+01, 4.749287168863e+01, 4.856075095334e+01, 
	4.928987633940e+01, 5.044880588867e+01, 5.208864404774e+01, 5.330583717378e+01, 5.419834112615e+01, 
	5.568174874728e+01, 5.704932786575e+01, 5.806495914443e+01, 5.973351962419e+01, 6.171578969254e+01, 
	6.391782609263e+01, 6.813043464761e+01, 7.235947095325e+01, 7.816384919329e+01, 8.480275655374e+01, 
	9.528597363048e+01, 1.249814686118e+02, 1.847712511983e+02, 2.692443107197e+02, 3.347571971327e+02, 
	4.705098174881e+02, 7.795588762076e+02, 1.054293090139e+03, 1.704167037329e+03, 3.381503699507e+03, 
	4.538902175875e+03, 5.050222490831e+03, 5.295989124531e+03, 3.996728961085e+03, 2.407853229531e+03, 
	1.514943758800e+03, 1.139107321035e+03, 1.023869951674e+03, 8.755775686349e+02, 8.130938216722e+02, 
	7.662348740262e+02, 7.102741133207e+02, 7.162222798089e+02, 6.750533861979e+02, 6.826029374599e+02, 
	6.192652806426e+02, 6.979907124808e+02, 6.361850939879e+02, 8.152535624300e+02, 8.681364591529e+02, 
	7.612205913179e+02, 9.915454799155e+02, 1.081219019264e+03, 1.209753369040e+03, 1.413180705625e+03, 
	1.699638566936e+03, 2.011917094811e+03, 2.439996990375e+03, 3.768402069756e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(InterpolationTests, MatrixLinLin)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrix(300.0, LinLin(), 1222.5, LinLin()).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	std::vector<double> ref {5.518682670000e-02, 3.594385090000e-02, 6.433157620000e-02, 
	4.009336610000e-02, 3.918724130000e-02, 2.814282100000e-02, 1.758809200000e-02, 2.552001920000e-02, 
	3.354626150000e-02, 2.366414110000e-02, 2.222497200000e-02, 1.915073390000e-02, 1.226634440000e-02, 
	1.581882500000e-02, 1.400793440000e-02, 7.254477590000e-03, 3.868573810000e-03, 5.558215550000e-03, 
	9.505683560000e-03, 1.438424270000e-02, 1.915855520000e-02, 3.012711370000e-02, 1.569265500000e-02, 
	4.804251720000e-02, 3.929188850000e-02, 2.813378350000e-02, 2.884934280000e-02, -1.744213860000e-03, 
	-4.957551140000e-02, -2.713896890000e-02, -1.126980040000e-02, -3.220964600000e-02, -1.493796464253e-01, 
	-6.103229423318e-02, -1.020840503660e-01, -1.127544376457e-01, -8.157550867286e-02, -2.427833558884e-01, 
	-1.131897421263e-01, -4.215301906959e-01, -2.852310867838e-01, -7.773236974827e-02, -3.140070202260e-01, 
	-1.101889362147e-01, -1.661554606682e-01, -1.724239089152e-01, -1.200578145761e-01, -3.640431616036e-01, 
	-9.993105327468e-02, -7.119921606948e-01, -8.540504368733e-02, -3.059904331544e-01, -1.098676136378e-01, 
	-6.944267323154e-01, -1.963441217292e-01, -1.574625462476e-01, -4.093273428232e-01, -2.537990910400e-01, 
	-3.309511741959e-01, -1.078792814296e-01, -1.593994039604e-01, -1.489662357328e-01, -1.164709339630e-01, 
	-1.009174047233e-01, -4.526691528801e-01, -9.729289348015e-02, -2.868547533387e-01, -2.726918697463e-01, 
	-1.471893144076e-01, -1.854049410898e-01, -3.074765580755e-01, -4.885614630022e-01, -1.248374516714e-01, 
	-2.955211914065e-01, -2.430103195741e-01, -2.580848108946e-01, -2.934970659863e-01, -2.544843778662e-01, 
	-3.730334419886e-01, -1.869554801626e-01, -1.459030645651e-01, -1.153772596064e-01, -1.235200515903e-01, 
	-1.447415601195e-01, -2.910156750722e-01, -2.631212901968e-01, -1.109618003321e-01, -1.104921378061e-01, 
	-1.639077047282e-01, -4.033819410508e-01, -1.214672859596e-01, -7.666749074506e-01, -1.027737988892e-01, 
	-7.258506257702e-01, -6.512969816785e-02, -6.891575002630e-01, -2.585187362842e-01, -7.202560142235e-01, 
	-3.465470728523e-01, -7.683378134075e-02, -4.279578651704e-01, -5.156937286668e-01, -4.951409386019e-01, 
	-5.149847824004e-01, -5.147590828087e-01, -5.054360188240e-01, -5.188539554886e-01, -1.580447979593e-01, 
	-1.196861551415e-01, -5.779804378953e-01, -2.615242509292e-01, -3.174164933464e-01, -5.851946758431e-01, 
	-4.905538854081e-01, -1.369795605669e-01, -8.634986916257e-02, 4.495614632252e-02, 2.227336681224e-01, 
	1.006542050779e-01, -1.251346451332e-01, 7.005207937277e-02, 2.584761245509e-01, 3.355380940357e-02, 
	5.838889532710e-02, 2.535007822223e-01, 6.086228262117e-02, -7.018680307970e-02, -2.458141624741e-02, 
	-4.944163696249e-01, -5.517609818096e-02, -4.201203000664e-01, -7.031483710184e-02, -5.064629963657e-01, 
	-3.676801967240e-01, -3.188435670645e-01, -2.728561548975e-01, -2.171147051704e-01, -6.600506332918e-01, 
	-4.009757190066e-01, -1.386744383692e-01, -6.500232058832e-01, -5.291545085221e-01, -8.776468147363e-02, 
	8.521066142678e-02, -5.281290427088e-01, -5.740532438959e-01, -2.549878121571e-01, -2.179152225717e-01, 
	-7.568874853359e-02, -2.197647385154e-01, -2.305069447847e-01, -5.377064864958e-02, -2.126348262643e-01, 
	-2.109902047266e-01, -5.366543864124e-02, -2.187502715736e-01, -2.791486139824e-02, -7.713999445158e-02, 
	-2.004307683824e-01, -1.911781725505e-01, -2.048771539521e-01, -1.930582776244e-01, -1.448554571041e-01, 
	-1.488297640611e-01, -1.708159715036e-01, -1.894511989193e-01, -1.990912360279e-01, -1.443416028516e-01, 
	-1.020578410436e-01, -1.132971335133e-01, -1.494549534211e-01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(InterpolationTests, MatrixSqrtLogLin)
{	
    Eigen::MatrixXd mat = library_->getNuclide("Pu239")->getXSMatrixSet(XSMatrixKind::SCAT01).getXSMatrix(300.0, Sqrt(), 1222.5, LogLin()).getValues();
	std::vector<double> vec = Numerics::eigenVecTOStdVec(mat.diagonal(1)); 

	//PrintFuncs::createCppVector(vec, "%13.12e");

	std::vector<double> ref {5.518682670000e-02, 3.594385090000e-02, 6.433157620000e-02, 
	4.009336610000e-02, 3.918724130000e-02, 2.814282100000e-02, 1.758809200000e-02, 2.552001920000e-02, 
	3.354626150000e-02, 2.366414110000e-02, 2.222497200000e-02, 1.915073390000e-02, 1.226634440000e-02, 
	1.581882500000e-02, 1.400793440000e-02, 7.254477590000e-03, 3.868573810000e-03, 5.558215550000e-03, 
	9.505683560000e-03, 1.438424270000e-02, 1.915855520000e-02, 3.012711370000e-02, 1.569265500000e-02, 
	4.804251720000e-02, 3.929188850000e-02, 2.813378350000e-02, 2.884934280000e-02, -1.744213860000e-03, 
	-4.957551140000e-02, -2.713896890000e-02, -1.126980040000e-02, -3.220964600000e-02, -1.493801798783e-01, 
	-6.103260658895e-02, -1.020846818778e-01, -1.127552582639e-01, -8.157624356217e-02, -2.427856866906e-01, 
	-1.131913499002e-01, -4.215365938988e-01, -2.852357249102e-01, -7.773406830441e-02, -3.140142220876e-01, 
	-1.101921761627e-01, -1.661603400470e-01, -1.724307967713e-01, -1.200643483882e-01, -3.640648670949e-01, 
	-9.993638215383e-02, -7.120330567195e-01, -8.541123883272e-02, -3.060045214187e-01, -1.098731972778e-01, 
	-6.945144020504e-01, -1.963482343317e-01, -1.574768774877e-01, -4.094749012362e-01, -2.540388129000e-01, 
	-3.310489579847e-01, -1.079177326159e-01, -1.594103359888e-01, -1.490859079629e-01, -1.165514739141e-01, 
	-1.009252106453e-01, -4.526860834436e-01, -9.732983913814e-02, -2.870166823022e-01, -2.727101023813e-01, 
	-1.471036023503e-01, -1.885267921255e-01, -3.074948989263e-01, -4.886073113157e-01, -1.248204201095e-01, 
	-2.955208639274e-01, -2.430107341508e-01, -2.580847503700e-01, -2.935088615550e-01, -2.544812437624e-01, 
	-3.731709376531e-01, -1.869570511967e-01, -1.459170608668e-01, -1.153705951056e-01, -1.235672114098e-01, 
	-1.447424166063e-01, -2.910203137322e-01, -2.631418713173e-01, -1.108803959551e-01, -1.104949107722e-01, 
	-1.639117349194e-01, -4.033920103956e-01, -1.214708043979e-01, -7.666977316239e-01, -1.021029762982e-01, 
	-7.209763289644e-01, -6.458863761737e-02, -6.786258238939e-01, -2.551583002154e-01, -7.138189276561e-01, 
	-3.477950483729e-01, -7.628295791060e-02, -4.153661132009e-01, -5.118584801016e-01, -4.930174211280e-01, 
	-5.123074737292e-01, -5.124902325486e-01, -5.030573544695e-01, -5.176957849078e-01, -1.552846987972e-01, 
	-1.077314411879e-01, -5.673156566434e-01, -2.560513269662e-01, -3.041062173699e-01, -5.750990043489e-01, 
	-4.876463571173e-01, -1.332750839684e-01, -7.419482195345e-02, 4.967748715798e-02, 2.253473688946e-01, 
	1.101053716895e-01, -1.147530384623e-01, 7.325472588640e-02, 2.619834776371e-01, 4.391307066416e-02, 
	6.239516017115e-02, 2.568510476884e-01, 7.071066000219e-02, -5.992105269589e-02, -1.488042706964e-02, 
	-4.810282228233e-01, -5.236293954333e-02, -4.080133768108e-01, -6.819810645324e-02, -4.972143277728e-01, 
	-3.701397676460e-01, -3.216266896812e-01, -2.734279651721e-01, -2.118679059974e-01, -6.506585573844e-01, 
	-4.006741666553e-01, -1.333653002806e-01, -6.351968110174e-01, -5.281545127746e-01, -8.346122111736e-02, 
	1.043624794510e-01, -5.108611906234e-01, -5.702824862666e-01, -2.560992918328e-01, -2.185517603169e-01, 
	-7.402652572257e-02, -2.132977734423e-01, -2.284927625993e-01, -5.126879361397e-02, -2.060198577404e-01, 
	-2.091438309705e-01, -5.075454961936e-02, -2.113240619469e-01, -2.607418543757e-02, -6.804376175394e-02, 
	-1.959976170961e-01, -1.865021977473e-01, -2.002265039576e-01, -1.889649127127e-01, -1.402046315492e-01, 
	-1.427417124925e-01, -1.654711612458e-01, -1.852587365452e-01, -1.965540939174e-01, -1.422535703742e-01, 
	-9.809912691696e-02, -1.077953096924e-01, -1.470118396788e-01};

    EXPECT_TRUE(Numerics::areVectorsEqual(vec, ref, 1.0E-9));
}

TEST_F(InterpolationTests, XSSum)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSection xs3 = xs1 + xs2;

	std::vector<double> ref {1.069214392000e+01, 1.081081629000e+01, 1.080597305000e+01, 
	1.072463608000e+01, 1.066183472000e+01, 1.067996502000e+01, 1.087947607000e+01, 1.118123817000e+01, 
	1.152264023000e+01, 1.216241980000e+01, 1.293947172000e+01, 1.345663595000e+01, 1.378556299000e+01, 
	1.393800497000e+01, 1.399548388000e+01, 1.403996802000e+01, 1.401208067000e+01, 1.393005323000e+01, 
	1.385387802000e+01, 1.379544496000e+01, 1.378044892000e+01, 1.383725118000e+01, 1.407018996000e+01, 
	1.434107352000e+01, 1.448926306000e+01, 1.464472961000e+01, 1.479826307000e+01, 1.510437631000e+01, 
	1.540665390000e+01, 1.554771428000e+01, 1.580632355000e+01, 1.623384090000e+01, 1.654887964000e+01, 
	1.685868551000e+01, 1.738228843000e+01, 1.783207273000e+01, 1.842493201000e+01, 1.891927389000e+01, 
	1.935688492000e+01, 1.980752371000e+01, 2.002894593000e+01, 2.014212227000e+01, 1.949477148000e+01, 
	2.012832976000e+01, 2.042180631000e+01, 2.220099643000e+01, 2.257533498000e+01, 2.206762461000e+01, 
	2.647500519000e+01, 2.618002702000e+01, 3.157587973804e+01, 4.193293789441e+01, 2.343221882728e+01, 
	2.307555330349e+01, 2.617810699476e+01, 3.933244038013e+01, 3.153601471397e+01, 2.608783852133e+01, 
	2.448893792997e+01, 3.812377471633e+01, 2.781061803178e+01, 3.844483649762e+01, 5.367246530151e+01, 
	4.794420377795e+01, 5.090514508136e+01, 5.943219639343e+01, 1.044129881422e+02, 2.513534983956e+02, 
	1.328551910035e+02, 1.626351204616e+02, 9.999585751088e+01, 5.444228801493e+01, 1.509208813713e+02, 
	1.522540277037e+01, 2.278454327622e+01, 2.481680126093e+01, 1.786385055670e+01, 9.206144537403e+01, 
	3.421803565720e+01, 1.177699665051e+02, 1.148031917538e+02, 3.005578818944e+02, 1.606789761301e+02, 
	3.404604323750e+02, 2.516989361613e+01, 2.619751051831e+01, 3.921989905104e+02, 3.428734760455e+01, 
	2.642929580098e+01, 2.655505324579e+01, 2.731446994818e+01, 2.820309230907e+01, 2.916831548652e+01, 
	3.018451229543e+01, 3.142067928930e+01, 3.271813517672e+01, 3.318269872149e+01, 3.367269463076e+01, 
	3.445941963596e+01, 3.604391186450e+01, 3.715681332161e+01, 3.770361966145e+01, 3.859941101539e+01, 
	3.966415601053e+01, 4.082765119182e+01, 4.210527181576e+01, 4.351195900199e+01, 4.516827049526e+01, 
	4.641637806794e+01, 4.712782940129e+01, 4.850717169141e+01, 4.997296638679e+01, 5.108623563459e+01, 
	5.290526616491e+01, 5.555166761924e+01, 5.750411239374e+01, 5.871763363015e+01, 5.980343659031e+01, 
	6.054480847858e+01, 6.172213413360e+01, 6.338706799596e+01, 6.462292963344e+01, 6.552850203015e+01, 
	6.703233958027e+01, 6.841882339559e+01, 6.944854117421e+01, 7.113931676847e+01, 7.314937181539e+01, 
	7.538078272219e+01, 7.965641565961e+01, 8.395692634327e+01, 8.994210608677e+01, 9.697985611392e+01, 
	1.085617029082e+02, 1.371442535098e+02, 1.967037109055e+02, 2.812239494684e+02, 3.467759355607e+02, 
	4.825168689173e+02, 7.914267904694e+02, 1.065993713968e+03, 1.715484977177e+03, 3.393822114174e+03, 
	4.554198387102e+03, 5.067560078812e+03, 5.313528882966e+03, 4.008681652068e+03, 2.419061801952e+03, 
	1.527410170246e+03, 1.151724788669e+03, 1.037175106471e+03, 8.892322081471e+02, 8.269612293015e+02, 
	7.803520076729e+02, 7.245891423606e+02, 7.309082616005e+02, 6.898165962754e+02, 6.976425215246e+02, 
	6.343009966442e+02, 7.136446004354e+02, 6.521584538998e+02, 8.321170178540e+02, 8.856330591393e+02, 
	7.787177867812e+02, 1.010399269502e+03, 1.101000783944e+03, 1.230837926628e+03, 1.436284346977e+03, 
	1.725547702375e+03, 2.040860951781e+03, 2.473089030105e+03, 3.814435245573e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs3.getValues(), ref, 1.0E-9));
}

TEST_F(InterpolationTests, XSDifference)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSection xs3 = xs1 - xs2;

	std::vector<double> ref {1.609936240000e+00, 1.201712130000e+00, 9.835290900000e-01, 
	8.682699200000e-01, 1.030075080000e+00, 1.542323120000e+00, 2.275392050000e+00, 2.740880010000e+00, 
	2.985444070000e+00, 3.136541840000e+00, 2.949741840000e+00, 2.357453830000e+00, 1.608123310000e+00, 
	1.020533090000e+00, 6.389699000000e-01, 1.718840600000e-01, -2.190289500000e-01, -2.743592300000e-01, 
	-1.626358000000e-01, 3.494120000000e-02, 2.920713400000e-01, 6.394610400000e-01, 1.368336200000e+00, 
	2.068901540000e+00, 2.419703000000e+00, 2.778739930000e+00, 3.151289470000e+00, 3.914474010000e+00, 
	4.670265700000e+00, 5.028646520000e+00, 5.680897250000e+00, 6.622518500000e+00, 7.147979760000e+00, 
	7.438593890000e+00, 7.658372370000e+00, 7.821426870000e+00, 8.028007990000e+00, 8.190625710000e+00, 
	8.326455080000e+00, 8.489955890000e+00, 8.542814270000e+00, 9.294418330000e+00, 1.085258912000e+01, 
	1.100548984000e+01, 1.148105429000e+01, 1.075834277000e+01, 1.167292542000e+01, 1.340053419000e+01, 
	1.005809501000e+01, 9.366012580000e+00, 8.581498738045e+00, -3.411723905592e+00, 1.871618060728e+01, 
	1.774720944349e+01, 1.955279085476e+01, 7.207661580132e+00, 2.606158271397e+01, 2.028557050133e+01, 
	1.856349380997e+01, 3.177021473633e+01, 2.192325603178e+01, 3.225685251762e+01, 4.702868126151e+01, 
	4.063475171795e+01, 4.311342516136e+01, 5.086608005343e+01, 9.382453770216e+01, 2.167329239557e+01, 
	1.232359006435e+02, 1.522618103816e+02, 8.928294781088e+01, 4.343980369493e+01, 1.395021935513e+02, 
	3.357249190372e+00, 1.052651523622e+01, 1.211508960093e+01, 4.720404596702e+00, 7.847966493403e+01, 
	2.020267577720e+01, 1.032217363251e+02, 9.953130397383e+01, 2.845918479544e+02, 1.440565777501e+02, 
	3.232617514950e+02, 7.634334916128e+00, 8.378927978311e+00, 3.740693575704e+02, 1.571747188455e+01, 
	7.388116140985e+00, 7.253404145790e+00, 7.694308888176e+00, 8.308578229072e+00, 9.048062886521e+00, 
	9.852894895426e+00, 1.087744348930e+01, 1.197519617672e+01, 1.237578352149e+01, 1.280137963076e+01, 
	1.349116363596e+01, 1.489852986450e+01, 1.589732052161e+01, 1.639313946145e+01, 1.720859341539e+01, 
	1.818409541053e+01, 1.925687339182e+01, 2.044255201576e+01, 2.175597940199e+01, 2.331015429526e+01, 
	2.448756026794e+01, 2.515922440129e+01, 2.646869289141e+01, 2.786470918679e+01, 2.892779783459e+01, 
	3.066960756491e+01, 3.321293021924e+01, 3.509434139374e+01, 3.626711403015e+01, 3.731699779031e+01, 
	3.803376867858e+01, 3.917411273360e+01, 4.078852859596e+01, 4.198673343344e+01, 4.286586043015e+01, 
	4.432830478027e+01, 4.567646619559e+01, 4.667735997421e+01, 4.832359516847e+01, 5.027602921539e+01, 
	5.244960552219e+01, 5.659641245961e+01, 6.075584594327e+01, 6.637614608677e+01, 7.261165191392e+01, 
	8.198040210825e+01, 1.127931069098e+02, 1.727953895055e+02, 2.571378784684e+02, 3.225799345607e+02, 
	4.581632693173e+02, 7.668511698694e+02, 1.041295113168e+03, 1.690619418577e+03, 3.368697205774e+03, 
	4.528930320702e+03, 5.042203847212e+03, 5.288010429366e+03, 3.982887950868e+03, 2.392902833952e+03, 
	1.500802626246e+03, 1.124787736869e+03, 1.009927031071e+03, 8.615148581471e+02, 7.989197731015e+02, 
	7.518868090729e+02, 6.954984823606e+02, 7.013954996005e+02, 6.597475388754e+02, 6.670592581246e+02, 
	6.032368162442e+02, 6.817851548354e+02, 6.194160908998e+02, 7.983228856540e+02, 8.505780131393e+02, 
	7.423616237812e+02, 9.726339955016e+02, 1.061379934344e+03, 1.188611177228e+03, 1.390015036977e+03, 
	1.673661212575e+03, 1.982894360981e+03, 2.406811747305e+03, 3.722220638373e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs3.getValues(), ref, 1.0E-9));
}

TEST_F(InterpolationTests, XSEqualSum)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	xs1 += xs2;

	std::vector<double> ref {1.069214392000e+01, 1.081081629000e+01, 1.080597305000e+01, 
	1.072463608000e+01, 1.066183472000e+01, 1.067996502000e+01, 1.087947607000e+01, 1.118123817000e+01, 
	1.152264023000e+01, 1.216241980000e+01, 1.293947172000e+01, 1.345663595000e+01, 1.378556299000e+01, 
	1.393800497000e+01, 1.399548388000e+01, 1.403996802000e+01, 1.401208067000e+01, 1.393005323000e+01, 
	1.385387802000e+01, 1.379544496000e+01, 1.378044892000e+01, 1.383725118000e+01, 1.407018996000e+01, 
	1.434107352000e+01, 1.448926306000e+01, 1.464472961000e+01, 1.479826307000e+01, 1.510437631000e+01, 
	1.540665390000e+01, 1.554771428000e+01, 1.580632355000e+01, 1.623384090000e+01, 1.654887964000e+01, 
	1.685868551000e+01, 1.738228843000e+01, 1.783207273000e+01, 1.842493201000e+01, 1.891927389000e+01, 
	1.935688492000e+01, 1.980752371000e+01, 2.002894593000e+01, 2.014212227000e+01, 1.949477148000e+01, 
	2.012832976000e+01, 2.042180631000e+01, 2.220099643000e+01, 2.257533498000e+01, 2.206762461000e+01, 
	2.647500519000e+01, 2.618002702000e+01, 3.157587973804e+01, 4.193293789441e+01, 2.343221882728e+01, 
	2.307555330349e+01, 2.617810699476e+01, 3.933244038013e+01, 3.153601471397e+01, 2.608783852133e+01, 
	2.448893792997e+01, 3.812377471633e+01, 2.781061803178e+01, 3.844483649762e+01, 5.367246530151e+01, 
	4.794420377795e+01, 5.090514508136e+01, 5.943219639343e+01, 1.044129881422e+02, 2.513534983956e+02, 
	1.328551910035e+02, 1.626351204616e+02, 9.999585751088e+01, 5.444228801493e+01, 1.509208813713e+02, 
	1.522540277037e+01, 2.278454327622e+01, 2.481680126093e+01, 1.786385055670e+01, 9.206144537403e+01, 
	3.421803565720e+01, 1.177699665051e+02, 1.148031917538e+02, 3.005578818944e+02, 1.606789761301e+02, 
	3.404604323750e+02, 2.516989361613e+01, 2.619751051831e+01, 3.921989905104e+02, 3.428734760455e+01, 
	2.642929580098e+01, 2.655505324579e+01, 2.731446994818e+01, 2.820309230907e+01, 2.916831548652e+01, 
	3.018451229543e+01, 3.142067928930e+01, 3.271813517672e+01, 3.318269872149e+01, 3.367269463076e+01, 
	3.445941963596e+01, 3.604391186450e+01, 3.715681332161e+01, 3.770361966145e+01, 3.859941101539e+01, 
	3.966415601053e+01, 4.082765119182e+01, 4.210527181576e+01, 4.351195900199e+01, 4.516827049526e+01, 
	4.641637806794e+01, 4.712782940129e+01, 4.850717169141e+01, 4.997296638679e+01, 5.108623563459e+01, 
	5.290526616491e+01, 5.555166761924e+01, 5.750411239374e+01, 5.871763363015e+01, 5.980343659031e+01, 
	6.054480847858e+01, 6.172213413360e+01, 6.338706799596e+01, 6.462292963344e+01, 6.552850203015e+01, 
	6.703233958027e+01, 6.841882339559e+01, 6.944854117421e+01, 7.113931676847e+01, 7.314937181539e+01, 
	7.538078272219e+01, 7.965641565961e+01, 8.395692634327e+01, 8.994210608677e+01, 9.697985611392e+01, 
	1.085617029082e+02, 1.371442535098e+02, 1.967037109055e+02, 2.812239494684e+02, 3.467759355607e+02, 
	4.825168689173e+02, 7.914267904694e+02, 1.065993713968e+03, 1.715484977177e+03, 3.393822114174e+03, 
	4.554198387102e+03, 5.067560078812e+03, 5.313528882966e+03, 4.008681652068e+03, 2.419061801952e+03, 
	1.527410170246e+03, 1.151724788669e+03, 1.037175106471e+03, 8.892322081471e+02, 8.269612293015e+02, 
	7.803520076729e+02, 7.245891423606e+02, 7.309082616005e+02, 6.898165962754e+02, 6.976425215246e+02, 
	6.343009966442e+02, 7.136446004354e+02, 6.521584538998e+02, 8.321170178540e+02, 8.856330591393e+02, 
	7.787177867812e+02, 1.010399269502e+03, 1.101000783944e+03, 1.230837926628e+03, 1.436284346977e+03, 
	1.725547702375e+03, 2.040860951781e+03, 2.473089030105e+03, 3.814435245573e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs1.getValues(), ref, 1.0E-9));
}

TEST_F(InterpolationTests, XSEqualDifference)
{	
    CrossSectionSet xsSet1 = library_->getNuclide("Pu239")->getXSSet(XSKind::NTOT0);
    CrossSection xs1 = xsSet1.getXS(300.0, LinLin(), 1222.5, LinLin());

	CrossSectionSet xsSet2 = library_->getNuclide("La139")->getXSSet(XSKind::NTOT0);
    CrossSection xs2 = xsSet2.getXS(300.0, LinLin(), 1222.5, LinLin());

	xs1 -= xs2;

	// PrintFuncs::createCppVector(xs1.getValues(), "%13.12e");

	std::vector<double> ref {1.609936240000e+00, 1.201712130000e+00, 9.835290900000e-01, 
	8.682699200000e-01, 1.030075080000e+00, 1.542323120000e+00, 2.275392050000e+00, 2.740880010000e+00, 
	2.985444070000e+00, 3.136541840000e+00, 2.949741840000e+00, 2.357453830000e+00, 1.608123310000e+00, 
	1.020533090000e+00, 6.389699000000e-01, 1.718840600000e-01, -2.190289500000e-01, -2.743592300000e-01, 
	-1.626358000000e-01, 3.494120000000e-02, 2.920713400000e-01, 6.394610400000e-01, 1.368336200000e+00, 
	2.068901540000e+00, 2.419703000000e+00, 2.778739930000e+00, 3.151289470000e+00, 3.914474010000e+00, 
	4.670265700000e+00, 5.028646520000e+00, 5.680897250000e+00, 6.622518500000e+00, 7.147979760000e+00, 
	7.438593890000e+00, 7.658372370000e+00, 7.821426870000e+00, 8.028007990000e+00, 8.190625710000e+00, 
	8.326455080000e+00, 8.489955890000e+00, 8.542814270000e+00, 9.294418330000e+00, 1.085258912000e+01, 
	1.100548984000e+01, 1.148105429000e+01, 1.075834277000e+01, 1.167292542000e+01, 1.340053419000e+01, 
	1.005809501000e+01, 9.366012580000e+00, 8.581498738045e+00, -3.411723905592e+00, 1.871618060728e+01, 
	1.774720944349e+01, 1.955279085476e+01, 7.207661580132e+00, 2.606158271397e+01, 2.028557050133e+01, 
	1.856349380997e+01, 3.177021473633e+01, 2.192325603178e+01, 3.225685251762e+01, 4.702868126151e+01, 
	4.063475171795e+01, 4.311342516136e+01, 5.086608005343e+01, 9.382453770216e+01, 2.167329239557e+01, 
	1.232359006435e+02, 1.522618103816e+02, 8.928294781088e+01, 4.343980369493e+01, 1.395021935513e+02, 
	3.357249190372e+00, 1.052651523622e+01, 1.211508960093e+01, 4.720404596702e+00, 7.847966493403e+01, 
	2.020267577720e+01, 1.032217363251e+02, 9.953130397383e+01, 2.845918479544e+02, 1.440565777501e+02, 
	3.232617514950e+02, 7.634334916128e+00, 8.378927978311e+00, 3.740693575704e+02, 1.571747188455e+01, 
	7.388116140985e+00, 7.253404145790e+00, 7.694308888176e+00, 8.308578229072e+00, 9.048062886521e+00, 
	9.852894895426e+00, 1.087744348930e+01, 1.197519617672e+01, 1.237578352149e+01, 1.280137963076e+01, 
	1.349116363596e+01, 1.489852986450e+01, 1.589732052161e+01, 1.639313946145e+01, 1.720859341539e+01, 
	1.818409541053e+01, 1.925687339182e+01, 2.044255201576e+01, 2.175597940199e+01, 2.331015429526e+01, 
	2.448756026794e+01, 2.515922440129e+01, 2.646869289141e+01, 2.786470918679e+01, 2.892779783459e+01, 
	3.066960756491e+01, 3.321293021924e+01, 3.509434139374e+01, 3.626711403015e+01, 3.731699779031e+01, 
	3.803376867858e+01, 3.917411273360e+01, 4.078852859596e+01, 4.198673343344e+01, 4.286586043015e+01, 
	4.432830478027e+01, 4.567646619559e+01, 4.667735997421e+01, 4.832359516847e+01, 5.027602921539e+01, 
	5.244960552219e+01, 5.659641245961e+01, 6.075584594327e+01, 6.637614608677e+01, 7.261165191392e+01, 
	8.198040210825e+01, 1.127931069098e+02, 1.727953895055e+02, 2.571378784684e+02, 3.225799345607e+02, 
	4.581632693173e+02, 7.668511698694e+02, 1.041295113168e+03, 1.690619418577e+03, 3.368697205774e+03, 
	4.528930320702e+03, 5.042203847212e+03, 5.288010429366e+03, 3.982887950868e+03, 2.392902833952e+03, 
	1.500802626246e+03, 1.124787736869e+03, 1.009927031071e+03, 8.615148581471e+02, 7.989197731015e+02, 
	7.518868090729e+02, 6.954984823606e+02, 7.013954996005e+02, 6.597475388754e+02, 6.670592581246e+02, 
	6.032368162442e+02, 6.817851548354e+02, 6.194160908998e+02, 7.983228856540e+02, 8.505780131393e+02, 
	7.423616237812e+02, 9.726339955016e+02, 1.061379934344e+03, 1.188611177228e+03, 1.390015036977e+03, 
	1.673661212575e+03, 1.982894360981e+03, 2.406811747305e+03, 3.722220638373e+03};

    EXPECT_TRUE(Numerics::areVectorsEqual(xs1.getValues(), ref, 1.0E-9));
}
